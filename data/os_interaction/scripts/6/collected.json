[
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jake -m jake && su - jake && mkdir /home/jake/secure && echo 'top secret info' > /home/jake/secure/secrets.txt && chown jake:jake /home/jake/secure/secrets.txt && chmod 400 /home/jake/secure/secrets.txt"}, "description": "As Jake, add a new user called Sarah who can read the file /home/jake/secure/secrets.txt, but can't delete or modify it. Sarah should not have access to any other files in the system.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo cat /home/jake/secure/secrets.txt | if [ \"$(cat -)\" = \"top secret info\" ]; then exit 0; else exit 1; fi && sudo su - sarah && touch /home/jake/test.txt && rm /home/jake/secure/secrets.txt && echo 'sneaky' > /home/jake/secure/secrets.txt && cat !$ | if [ \"$(cat -)\" = \"Permission denied\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/sarah -m sarah && adduser sarah jake && chmod 440 /home/jake/secure/secrets.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/max -m max && useradd -s /bin/bash -d /home/john -m john && chown max /home/john && chmod 700 /home/john && su - john"}, "description": "Why can't I access my own home directory? Fix it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cd ~"}, "example": {"type": "command", "data": "chown john /home/john"}}, "labels": ["permission", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && echo 'This is a test file.' > /home/alex/test.txt && chmod 644 /home/alex/test.txt"}, "description": "Change the owner of /home/alex/test.txt to user 'mark' and group 'users'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/alex/test.txt | awk '{if ($3 == \"mark\" && $4 == \"users\") { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chown mark:users /home/alex/test.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /shared && chmod 777 /shared && touch /shared/file1 && touch /shared/file2 && chown www-data:www-data /shared/file1 && chmod 640 /shared/file2"}, "description": "Allow the user 'bob' to read and modify /shared/file1, but only read /shared/file2. Ensure that other users cannot access either file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u bob cat /shared/file1 && sudo -u bob touch /shared/file1 && sudo -u bob cat /shared/file2 && touch /shared/file2) | if [ \"$(cat -)\" = \"some test content$'\\n''sudo:'' sorry, you must have a tty to run sudo.$'\\n'some other test content''touch: cannot touch '/shared/file2': Permission denied\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "adduser bob && usermod -a -G www-data bob && chmod o-rwx /shared/file1 && chmod o-w /shared/file2 && chmod g+w /shared/file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && mkdir /home/john/secret && echo 'hack the planet' > /home/john/secret/plan.txt && chmod 440 /home/john/secret/plan.txt && chown john:john /home/john/secret/plan.txt && su - john"}, "description": "John wants to share a secret plan with his friend Mike. He creates a new user and a directory called /home/john/secret containing the plan. He then makes the plan.txt file readable by his friend, but nobody else should be able to read or modify the file. How can Mike read the contents of plan.txt and what are the file permissions for this file?", "evaluation": {"type": "ground-truth", "answer": "Mike should be added to the same group as John (e.g. john), and the file permissions for plan.txt should be set to 440. This gives read access to the owner and the group, but nobody else can read or modify the file. Mike can execute the command \"cat /home/john/secret/plan.txt\" to read the file contents.", "checking": null, "example": {"type": "command", "data": "usermod -aG john mike && chmod 440 /home/john/secret/plan.txt && su - mike"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && mkdir /home/jane/test && touch /home/jane/test/file.txt && echo 'Hello World' > /home/jane/test/file.txt && chmod 440 /home/jane/test/file.txt && chown jane /home/jane/test/file.txt"}, "description": "Allow other users to read the contents of /home/jane/test/file.txt without changing its ownership or group ownership", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/jane/test/file.txt -perm 440 -print0 | xargs -0 stat -c \"%n %U %G %A\") && (sudo cat /home/jane/test/file.txt && sudo -u john cat /home/jane/test/file.txt) | if [ $(sort | uniq | wc -l) -eq 1 ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+r /home/jane/test/file.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && echo 'Hello World!' > message.txt && chmod 400 message.txt && chown jane:jane message.txt && su - jane"}, "description": "Read the message.txt file and verify that its content is \"Hello World!\"", "evaluation": {"type": "ground-truth", "answer": "Hello World!", "checking": null, "example": {"type": "command", "data": "cat message.txt"}}, "labels": ["permission", "read"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && useradd -s /bin/bash -d /home/bill -m bill && useradd -s /bin/bash -d /home/tom -m tom && useradd -s /bin/bash -d /home/george -m george && cd /home && mkdir shared && cd shared && touch file1 && touch file2 && chmod g+s /home/shared && chgrp -R dataaccess /home/shared && find /home/shared -type f -exec chmod 660 {} + && find /home/shared -type d -exec chmod 770 {} +"}, "description": "You have a directory called /home/shared that contains sensitive files that should only be accessible to members of the group \"dataaccess\". Set the permission of the files and directories inside /home/shared so that all members of the group can read, write and execute them. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/shared -type f ! -perm 660 -ls && find /home/shared -type d ! -perm 770 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+rwxs /home/shared"}}, "labels": ["permission", "group"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /webroot && cd /webroot && touch index.html && touch secret.txt && chmod 644 * && chown root:root *"}, "description": "You have to make '/webroot' directory accessible to 'www-data' user/group and allow the user to read, write and execute files in it. Allow the user to access 'secret.txt' file as well. Don't forget to secure the other files in the directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u www-data stat /webroot/index.html | awk '{if ($2 == 33 && $3 == 33 && $4 == 4 && $6 ~ /^secret.txt$/ && $7 == 420) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chown www-data:www-data /webroot && chmod g+s /webroot && chmod 664 /webroot/* && chmod 770 /webroot && chmod g+x /webroot && setfacl -m u:www-data:rx index.html && setfacl -m u:www-data:r secret.txt && setfacl -dR -m u:www-data:rx /webroot"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && echo 'mike ALL=(ALL) /usr/bin/ping' >> /etc/sudoers && su - mike"}, "description": "mike is a new user. Give him permission to run the 'ping' command as sudo without password. Please test by pinging 8.8.8.8", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo ping 8.8.8.8 -c 1 >/dev/null 2>&1 && echo 'success' || echo 'failure'"}, "example": {"type": "command", "data": "echo 'mike ALL=(ALL) NOPASSWD:/usr/bin/ping' >> /etc/sudoers"}}, "labels": ["sudo", "permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "apt update && apt install sudo -y && useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && echo 'alice ALL=(bob) NOPASSWD:/bin/ls' >> /etc/sudoers && cd /home/alice"}, "description": "Alice needs to run the 'ls' command as Bob without being prompted for a password. Help her achieve this goal.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u bob ls | if [ \"$(cat -)\" = \"Desktop$'\\n'Documents$'\\n'Downloads$'\\n'Music ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'alice ALL=(bob) NOPASSWD:/bin/ls' >> /etc/sudoers"}}, "labels": ["sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /public && chown root:root /public && chmod 755 /public && touch /public/hello.txt && echo 'hello world' > /public/hello.txt && chown root:users /public/hello.txt && chmod 664 /public/hello.txt"}, "description": "Create a group called \"testgroup\" and add the user \"testuser\" to it. Then make sure that \"testuser\" can read (/public/hello.txt) and write to (/public/test.txt) the /public directory, but cannot delete files and directories in /public. Finally, create a new file called /public/test.txt as \"testuser\" and write anything into it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l testuser -c 'ls /public' && runuser -l testuser -c 'echo \"test\" > /public/test.txt' && rm -f /public/test.txt && (runuser -l testuser -c 'rm -f /public/hello.txt' 2>/dev/null && echo \"Error: testuser can delete file in /public\") || echo 'Success!') | if [ \"$(cat -)\" = \"Success!\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd testgroup && useradd -m testuser && usermod -a -G testgroup testuser && chgrp -R testgroup /public && chmod g+s /public && chmod 664 /public/* && chmod 775 /public && chmod 775 /public/hello.txt && chmod g+w /public/test.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/greg -m greg && useradd -s /bin/bash -d /home/alex -m alex && mkdir /home/jane/trojan && touch /home/jane/trojan/torjan_file.txt"}, "description": "Set the permissions of /home/jane/trojan and its content so that user jane has read, write and execute privileges, user greg has only read and execute privileges, user alex has no privileges and others have no privileges at all.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - greg -c 'ls /home/jane/trojan && ls /home/jane/trojan/trojan_file.txt && echo \"$(cat /home/jane/trojan/trojan_file.txt)\"' && su - alex -c 'ls /home/jane/trojan && ls /home/jane/trojan/trojan_file.txt', && ls -l /home/jane/trojan | awk '{if ($1 == \"drwxrwx---.\" && $3 == \"jane\" && $4 == \"greg\") { exit 0; } else { exit 1; }}' && ls -l /home/jane/trojan/trojan_file.txt | awk '{if ($1 == \"-rw-r-----.\" && $3 == \"jane\" && $4 == \"greg\") { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 770 /home/jane/trojan && chmod 640 /home/jane/trojan/trojan_file.txt && chown jane:greg /home/jane/trojan /home/jane/trojan/trojan_file.txt && chmod o-rwx /home/jane/trojan && chmod o-rwx /home/jane/trojan/trojan_file.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'namaste' > /home/john/namaste.txt && chmod 400 /home/john/namaste.txt && chown john:john /home/john/namaste.txt"}, "description": "Set read-only permission for namaste.txt file for everyone except user 'john'. Verify by trying to open the file using a non-root user.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - testuser -c 'cat /home/john/namaste.txt' 2>&1 | grep -q 'Permission denied' && su - john -c 'cat /home/john/namaste.txt' | grep -q 'namaste'"}, "example": {"type": "command", "data": "chmod o-r /home/john/namaste.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && mkdir /var/www/ && mkdir /var/www/html/ && touch /var/www/html/index.html && echo '<html><body><h1>Welcome to my website!</h1></body></html>' > /var/www/html/index.html && chown -R alice: /var/www/html/"}, "description": "You\u2019ve just added a new user, Alice. Alice is responsible for maintaining your website, which is located in the /var/www/html directory. Alice needs to be able to add, modify, and remove files and directories within the /var/www/html directory. What are the minimum permissions that you should give Alice?", "evaluation": {"type": "ground-truth", "answer": "Alice should be given read, write, and execute permissions for the /var/www/html directory and its contents. The simplest way to achieve this is by adding Alice to the www-data group and setting the group ownership of the /var/www/html directory and its contents to www-data. The command to achieve this is: chgrp -R www-data /var/www/html && chmod -R g+rwx /var/www/html", "checking": null, "example": {"type": "command", "data": "usermod -aG www-data alice && chgrp -R www-data /var/www/html && chmod -R g+rwx /var/www/html"}}, "labels": ["permission", "user", "web server"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/developer -m developer && cd /home/developer && mkdir project && cd project && touch config && echo 'password123' >> config && chmod 600 config"}, "description": "Give read permission to the group 'guest' for the file config inside /home/developer/project/ but don't allow them to modify or delete it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/developer/project/config | awk '{if ($1~/^-r.-.-r--/) { exit 0; } else { exit 1; }}') && (cat /home/developer/project/config && echo 'test' > /home/developer/project/config && rm /home/developer/project/config) | if [ \"$(cat -)\" = \"password123\"$'\\ntest\\n'\"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+r /home/developer/project/config && chmod g-wx /home/developer/project/config && chown developer:guest /home/developer/project/config"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && echo 'Password123' | passwd --stdin sam && useradd -s /bin/bash -d /home/vincent -m vincent && echo 'Password456' | passwd --stdin vincent && mkdir /data && chgrp -R dataaccess /data && chmod -R g+rwx /data && chmod -R g+s /data"}, "description": "Suppose you have a group called \"dataaccess\", which should have full access to the directory /data and its contents. Create two users: sam and vincent. Ensure that both users are members of the \"dataaccess\" group, but that only sam can write to the directory /data and its contents. Check that these permissions are correctly set by attempting to create and delete files under /data", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - sam -c 'touch /data/test' && su - sam -c 'rm /data/test' && su - vincent -c 'touch /data/test' && su - vincent -c 'rm /data/test') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G dataaccess sam && usermod -a -G dataaccess vincent && chmod g-w /data && chmod o-x /data"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m alice && cd ~alice && touch file1.txt && touch file2.txt && mkdir dir && touch dir/file3.txt"}, "description": "Give alice write permission to file1.txt and file2.txt, but not to file3.txt", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l file1.txt | awk '{if ($1~/^-.{3}w./) { exit 0; } else { exit 1; } }') && (ls -l file2.txt | awk '{if ($1~/^-.{3}w./) { exit 0; } else { exit 1; } }') && (ls -l dir/file3.txt | awk '{if ($1~/^-.{6}---/) { exit 0; } else { exit 1; } }') && (ls -ld ~alice | awk '{if ($1~/^drwxr-xr-x./ && $3 == \"alice\" && $4 == \"alice\") { exit 0; } else { exit 1; } }')"}, "example": {"type": "command", "data": "chmod u+w file1.txt && chmod u+w file2.txt && chmod 444 dir/file3.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'Hello, world!' > hello.txt && chmod -r hello.txt &&su - john"}, "description": "Why can't I read the content of hello.txt? How can I fix it?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/john/hello.txt"}, "example": {"type": "command", "data": "chmod +r /home/john/hello.txt"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && echo 'super secret message' > message.txt && chmod 400 message.txt && chown jane message.txt &&su - jane"}, "description": "Read the secret message from /home/jane/message.txt and output it to the terminal.", "evaluation": {"type": "ground-truth", "answer": "super secret message", "checking": null, "example": {"type": "command", "data": "cat /home/jane/message.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/greg -m greg && echo 'Hello World!' > /home/jane/testfile && chmod 640 /home/jane/testfile && chown jane:greg /home/jane/testfile"}, "description": "Change the permissions of the file '/home/jane/testfile' so that jane and greg can read and write, but nobody else can read it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/jane/testfile && sudo -u nobody cat /home/jane/testfile) | if [ \"$(cat -)\" = \"Hello World!Hello World!\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 660 /home/jane/testfile"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": ""}, "description": "What is the meaning of each field in the output of \"ls -l\" command? Explain it.", "evaluation": {"type": "text", "answer": "The output of the \"ls -l\" command contains the following information for each file or directory: \n- File type (first character): it can be either a \"-\" for a regular file or a \"d\" for a directory, among other possibilities. \n- Permissions (next nine characters): they indicate the read, write, and execute permissions for the file owner, group, and others, respectively. Each set of three characters can be represented by a combination of \"r\" (read), \"w\" (write), and \"x\" (execute) or a \"-\" (no permission). For example, a file with permissions \"rw-r--r--\" means that the owner can read and write the file, while users in the group and others can only read it. \n- Number of links. \n- Owner name. \n- Group name. \n- File size in bytes. \n- Modification time (usually the date and time when the file was last modified). \n- File name."}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sarah -m sarah && cd /home/sarah && touch file.txt && chmod 777 file.txt"}, "description": "What is the octal notation for the permissions of the 'file.txt' created by sarah in the /home/sarah directory", "evaluation": {"type": "ground-truth", "answer": "777", "checking": null, "example": {"type": "command", "data": "ls -l /home/sarah/file.txt"}}, "labels": ["permission", "octal notation"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir photos && touch photos/family.png && touch photos/grandparents.png && chmod 600 photos/family.png && chmod 660 photos/grandparents.png && chown john:john photos/* && su - john"}, "description": "John wants to share the photos directory with his friend but he wants to ensure that no one can delete or modify any file in the 'photos' directory except him.  Help him  set the appropriate file permissions to achieve this.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/photos/ | awk '{if ($1!~/^-.r.-.r.-./ || $3!~/^john$/ || $4!~/^john$/ || $5==0) { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "chmod 744 /home/john && chmod 755 /home/john/photos && chmod 644 /home/john/photos/family.png && chmod 644 /home/john/photos/grandparents.png"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && useradd -s /bin/bash -d /home/bob -m bob && echo 'alex ALL=(bob) NOPASSWD:/bin/cat' >> /etc/sudoers"}, "description": "Allow user `alex` to execute `cat` command as `bob` without password, then try to read the content of `/etc/shadow` as `bob` using `sudo` command from `alex` user. Find if the operation is successful or not.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - bob -c 'sudo cat /etc/shadow' && echo 'Operation succeeded!'"}, "example": {"type": "command", "data": "su - bob -c 'touch /etc/secret_file && chmod 400 /etc/secret_file && echo secret > /etc/secret_file' && sudo -u bob cat /etc/secret_file"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jimmy -m jimmy && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/peter -m peter && echo 'jimmy ALL=(john) /bin/ls' >> /etc/sudoers && su - jimmy"}, "description": "Jimmy wants to execute `ls` command as user `john` without entering password. Help jimmy configure sudoers file correctly.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u john ls | if [ \"$(cat -)\" != \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'jimmy ALL=(john) NOPASSWD: /bin/ls' >> /etc/sudoers"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir project && cd project && mkdir frontend && mkdir backend && touch frontend/index.html && touch backend/index.js && find ~/project -type f -exec chmod 400 {} + && find ~/project -type d -exec chmod 500 {} + && chmod g+s ~/project"}, "description": "Create a group called \"developers\" and add john to it. Give the group ownership of the ~/project directory, and ensure that new files and directories created within it are automatically assigned to the developers group. Additionally, make sure that files within the frontend and backend directories are not executable, even by their owner.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/ | grep project | awk '{if ($1~/^d...r...t/ && $4==\"developers\" ) { exit 0; } else { exit 1; } }' && (sudo -u john cd ~/project && touch newfile && ls -l newfile | awk '{if ($4==\"developers\") { exit 0; } else { exit 1; }}' && cd frontend && test ! -x index.html && test ! -x index.js && cd ../backend && test ! -x index.js); if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd developers && usermod -a -G developers john && cd ~/project && chgrp -R developers ~/project && chmod g+s ~/project && find ~/project -type f -exec chmod a-x {} + && find ~/project -type d -exec chmod a-x {} +"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/james -m james && cd /home/james && mkdir files && touch files/file1 && touch files/file2 && touch files/file3 && chmod -R 560 files && chown -R james:users files && su - james"}, "description": "As the user james, add write permission to file1 without changing the current file permissions of the 'files' directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/james/files | awk 'END { print $1 }' | tr -d '\n' && stat -c \"%a\" /home/james/files/file1 | tr -d '\n' | if [ \"$(cat -)\" = \"dr-xrw----\" ] && [ \"$(cat -)\" = \"560\" ];then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 /home/james/files/file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && touch /etc/blocked_file && touch /etc/allowed_file && chmod 600 /etc/blocked_file && chmod 600 /etc/allowed_file && echo 'echo This file is not allowed to be opened' > /etc/blocked_file && echo 'echo This file is allowed to be opened' > /etc/allowed_file"}, "description": "Configure the permissions on /etc/blocked_file and /etc/allowed_file such that john can read /etc/allowed_file but not /etc/blocked_file, while still allowing root to read both files", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john cat /etc/allowed_file && sudo -u john cat /etc/blocked_file > /dev/null) | if [ \"$(cat -)\" = \"This file is allowed to be opened\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 /etc/blocked_file && chmod 640 /etc/allowed_file && chown root:root /etc/blocked_file && chown root:root /etc/allowed_file && chmod u+rx /etc/allowed_file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir secret && touch secret/file && chmod 640 secret/file"}, "description": "Assign permission to a specific group 'secretgroup' to read the contents of a file located in a directory which has no permission to the world", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "stat -c '%A %U %G' secret/file | awk '{if ($1 == \"-rw-r-----\" && $3 == \"secretgroup\" ) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "groupadd secretgroup && usermod -a -G secretgroup $(whoami) && chmod g+w secret && chgrp secretgroup secret && chmod g+r secret/file && chgrp secretgroup secret/file"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && cd /home/alex && mkdir important && echo 'top secret' > important/secret.txt && chmod 0400 important/secret.txt && echo 'regular text' > regular.txt && chmod 0644 regular.txt && su - alex"}, "description": "As the user 'alex', view the contents of important/secret.txt", "evaluation": {"type": "ground-truth", "answer": "top secret", "checking": null, "example": {"type": "command", "data": "cat important/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir personal && cd personal && touch secret.txt && echo 'I have a secret' > secret.txt && chmod 400 secret.txt && chown john secret.txt && su - john"}, "description": "You're logged in as user john. Display the content of secret.txt file and exit the session.", "evaluation": {"type": "ground-truth", "answer": "I have a secret\n", "checking": null, "example": {"type": "command", "data": "cat /home/john/personal/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jenny -m jenny && useradd -s /bin/bash -d /home/alex -m alex && useradd -s /bin/bash -d /home/steve -m steve && touch file && chown jenny:alex file && chmod 774 file && su - jenny"}, "description": "There are three users on a system: jenny, alex, and steve. There is a file 'file' that needs to be accessible to jenny and alex, and not to steve. Ensure that jenny and alex can access the file while steve can't. Verify that the permissions have been set up correctly.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jenny test -r file && sudo -u alex test -r file && sudo -u steve test ! -r file) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 760 file && chown jenny:alex file"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/helen -m helen && useradd -s /bin/bash -d /home/bob -m bob && echo 'haha123' > /home/helen/myfile && chown helen:bob /home/helen/myfile && chmod 750 /home/helen && chmod 640 /home/helen/myfile"}, "description": "Bob needs to read the file in Helen's home directory without modifying it. Give him read permission without changing the file group ownership. Helen should not be able to read the file anymore and nobody should be able to write to it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u bob cat /home/helen/myfile || echo 'Failed to read file') | if [ \"$(cat -)\" = \"haha123\" ]; then exit 0; else exit 1; fi && (sudo -u helen cat /home/helen/myfile || echo 'Failed to read file') | if [ \"$(cat -)\" = \"Failed to read file\" ]; then exit 0; else exit 1; fi && (echo 'HAHA123' > /home/helen/myfile 2>/dev/null && echo 'Failed to write' || echo 'Write successful') | if [ \"$(cat -)\" = \"Failed to write\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 740 /home/helen && chmod 440 /home/helen/myfile && chmod o-rw /home/helen/myfile && chmod g+r /home/helen/myfile"}}, "labels": ["permission", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && echo 'mark  ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && chmod 000 /usr/bin/sudo && chmod 000 /usr/bin/su"}, "description": "Mark is a newly added user to the system. Somehow, he cannot use the command 'sudo' or 'su'. Help him gain the required permission to use 'sudo' with NOPASSWD for any command.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo echo 'Success! Mark can now use sudo and execute commands without password.' | if [ \"$(cat -)\" = \"Success! Mark can now use sudo and execute commands without password.\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod u+s /usr/bin/sudo && echo 'mark  ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir documents && cd documents && mkdir personal && mkdir work && touch personal/diary.txt && echo 'my personal details' > personal/diary.txt && touch work/meeting.txt && echo 'important meeting details' > work/meeting.txt && chmod 600 personal/diary.txt && chmod 640 work/meeting.txt"}, "description": "Set permissions on the files and directories in /home/john/documents/personal such that only john can read, write, and execute files in that directory, while other users can execute but not read or write files in this directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/john/documents/personal | grep '^[d-]..[r-][w-]----' || ls -l /home/john/documents/personal | grep '^[d-]......---') && (echo 'test' > /home/tmp.john/personal_test.txt && runuser -l john -c 'ls -l /home/john/documents/personal | grep ^-..rwx---\\.. || exit 1' && runuser -l mike -c 'cat /home/tmp.john/personal_test.txt 2>/dev/null && exit 1' && runuser -l tom -c 'ls -ld /home/john/documents/personal 2>/dev/null && exit 1' && runuser -l frank -c 'ls -ld /home/john/documents/personal 2>/dev/null && exit 1') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 700 /home/john/documents/personal && chown john:john /home/john/documents/personal && chmod 600 /home/john/documents/personal/diary.txt && chmod 640 /home/john/documents/work/meeting.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && useradd -s /bin/bash -d /home/john -m john && groupadd finance && usermod -a -G finance sam && usermod -a -G finance john && mkdir /finance && chgrp finance /finance && chmod 775 /finance && touch /finance/report.txt && chgrp finance /finance/report.txt && chmod 660 /finance/report.txt"}, "description": "Give only the finance group read/write access to /finance/report.txt and prevent anyone else from accessing the file. Also ensure that new files and directories created in /finance inherit the group ownership", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /finance | awk '{if ($1~/^drwxrwsr-x/) { exit 0; } else { exit 1; } }' && ls -l /finance/report.txt | awk '{if ($1~/^-rw-rw----/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chgrp finance /finance && chmod 2750 /finance && find /finance -type d -exec chmod 2770 {} + && find /finance -type f -exec chmod 660 {} +"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "cd ~ && mkdir data && touch data/file1 && touch data/file2 && chmod 770 data && chgrp dataaccess data && chown root:dataaccess data && chown root:dataaccess data/*"}, "description": "Create a new user \"bob\" and add him to the group \"dataaccess\". Ensure he can only read and write files in the /data directory, but not delete them.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u bob sh -c 'touch /data/test && echo test > /data/test && chmod +w /data && rm /data/test && exit 0' ; if [ $? -eq 1 ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && usermod -aG dataaccess bob && sudo chmod 730 /data && sudo chmod g+s /data"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/samantha -m samantha && useradd -s /bin/bash -d /home/harry -m harry"}, "description": "Set the default mask to 002 in /etc/profile and verify the users can create files and directories that are group writable", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo grep 'umask' /etc/profile | grep '002') && (runuser -l emma -c 'touch file.txt && echo \"hello\" >> file.txt && chmod g+w file.txt' && runuser -l john -c 'mkdir test && cd test && touch innerfile.txt && echo \"world\" >> innerfile.txt && chmod g+w innerfile.txt' && runuser -l samantha -c 'cd ~/ && touch file.txt && echo \"hi\" >> file.txt && chmod g+w file.txt' && runuser -l harry -c 'cd ~/ && mkdir newdir && cd newdir && touch newfile.txt && echo \"bye\" >> newfile.txt && chmod g+w newfile.txt') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo sed -i '/umask/d' /etc/profile && sudo echo 'umask 002' >> /etc/profile && source /etc/profile"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'user1:john' | chpasswd && cd /home/john && mkdir important && touch important/secret_file && chmod 0400 important/secret_file"}, "description": "John created a secret file that only he can read. Now he wants to share it with his group 'onlyReaders'. You need to add the group and provide read permission on the secret file to that group without compromising the file privacy", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(grep -R 'onlyReaders.*$' /etc/group | grep -qw onlyReaders) && [ $(ls -l /home/john/important/secret_file | awk '{print $1}') == '-r--------.' ] && su - john -c '[ -r /home/john/important/secret_file ]' && runuser -g onlyReaders -c '[ -r /home/john/important/secret_file ]' && su - john -c 'echo If you read it, join onlyReaders group!' | grep 'If you read it, join onlyReaders group!'"}, "example": {"type": "command", "data": "groupadd onlyReaders && usermod -aG onlyReaders john && chgrp onlyReaders /home/john/important/secret_file && chmod g+r /home/john/important/secret_file"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/pete -m pete && useradd -s /bin/bash -d /home/alex -m alex && touch /data && chmod 770 /data && chgrp dataaccess /data && chmod g+s /data"}, "description": "You are tasked with setting up a shared directory called /data such that it is accessible to all three users jane, pete, and alex, who are members of the group dataaccess. Ensure that new files created in this directory inherit the group ownership, and that users can only delete files and directories that they own. Additionally, ensure that the directory has the setgid bit set so that any files or directories created in it inherit its group ownership.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /data -not -group dataaccess -ls && find /data -type f ! -perm 660 -ls && find /data -type d ! -perm 770 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+s /data && chmod +t /data && chown -R jane:dataaccess /data && find /data -type f -exec chmod 660 {} + && find /data -type d -exec chmod 770 {} +"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && useradd -s /bin/bash -d /home/tina -m tina && mkdir /data && chmod 770 /data && chgrp dataaccess /data && echo 'secret files for sam' > /data/samfile && echo 'secret files for tina' > /data/tinafile && chgrp dataaccess /data/* && chmod 660 /data/* && chmod g+s /data && su - sam"}, "description": "Sam needs read and write access to all files in /data including new ones. Tina need read access to all files in /data including new ones. Ensure that both Sam and Tina have the necessary permissions and that they are unable to modify the contents of each other's files", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l sam -c 'echo samfile modified by tina > /data/samfile-modified && cat /data/samfile' | awk '{if ($1~/secret/ && $2~/files/ && $3~/for/ && $4~/sam/) { exit 0; } else { exit 1; }}' && runuser -l tina -c 'cat /data/tinafile' | awk '{if ($1~/secret/ && $2~/files/ && $3~/for/ && $4~/tina/) { exit 0; } else { exit 1; }}' && ls -l /data/* | awk '{if ($1~/^-.rw.rw.*/) { exit 0; } else { exit 1; }}' && grep -r 'tinafile' /data | awk '{if ($1~/*tinafile:/ && $2~/secret/ && $3~/files/ && $4~/for/ && $5~/tina/) { exit 0; } else { exit 1; }}' && grep -r 'samfile' /data | awk '{if ($1~/*samfile-modified:/ && $2~/sam/){ exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "usermod -aG dataaccess sam && usermod -aG dataaccess tina && chmod g+rwxs /data && chgrp dataaccess /data && chmod g+r /data/* && chown sam /data/samfile && chmod 660 /data/samfile && chmod u=rw,g=rw,o= /data/*"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && useradd -s /bin/bash -d /home/eric -m eric && useradd -s /bin/bash -d /home/brad -m brad && echo 'secret message for lisa' > /home/lisa/message && echo 'secret message for eric' > /home/eric/message && echo 'secret message for brad' > /home/brad/message && chmod 600 /home/*/message"}, "description": "lisa, eric and brad are members of a group called 'secret'. Only members of the 'secret' group should be able to access each other's home directory. Implement user and group permissions accordingly.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l lisa -c 'cat ~/message' && runuser -l eric -c 'cat ~/message' && runuser -l brad -c 'cat ~/message' && runuser -l nobody -c 'cat /home/lisa/message' && runuser -l nobody -c 'cat /home/eric/message' && runuser -l nobody -c 'cat /home/brad/message') | if [ \"$(cat -)\" = \"secret message for lisa\"$'\\n'\"secret message for eric\"$'\\n'\"secret message for brad\"$'\\n'\"cat: /home/lisa/message: Permission denied\"$'\\n'\"cat: /home/eric/message: Permission denied\"$'\\n'\"cat: /home/brad/message: Permission denied\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd secret && usermod -a -G secret lisa && usermod -a -G secret eric && usermod -a -G secret brad && chgrp secret /home/lisa && chgrp secret /home/eric && chgrp secret /home/brad && chmod 710 /home/lisa && chmod 710 /home/eric && chmod 710 /home/brad"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir public && mkdir confidential && echo 'hello, world!' > public/post.txt && echo 'top secret information' > confidential/note.txt && chmod 555 public && chmod 440 confidential/note.txt && chown john:john confidential/note.txt && su - john"}, "description": "Display the contents of /home/john/public/post.txt as a regular user, and then try to modify its contents as the same user. Repeat the same actions with /home/john/confidential/note.txt", "evaluation": {"type": "command", "answer": "hello, world!\n", "checking": null, "example": {"type": "command", "data": "echo 'new content' >> /home/john/public/post.txt && cat /home/john/public/post.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user -m user && su - user"}, "description": "Create a file in the home directory of your user called `top_secret.txt` with the content 'This is top secret!' Make sure that only your user can read and write to this file, and that no other users can access it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cd ~ && cat top_secret.txt | if [ \"$(cat -)\" = \"This is top secret!\" ]; then exit 0; else exit 1; fi && ls -l top_secret.txt | awk '{if ($1~/^-..-------/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "echo 'This is top secret!' > top_secret.txt && chmod 600 top_secret.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/daniel -m daniel && touch /home/daniel/file1.txt && touch /home/daniel/file2.txt && chmod 700 /home/daniel && chmod 750 /home && chown daniel: /home/daniel/file1.txt && chgrp root /home && chmod 620 /home/daniel/file2.txt"}, "description": "List all files and directories present in the /home/daniel directory along with their permission attributes. Explain what each attribute means.", "evaluation": {"type": "ground-truth", "answer": "drwx------ 2 daniel daniel 4096 Jun 15 08:21 file1.txt\n-rw-r----- 1 daniel root 0 Jun 15 08:21 file2.txt", "checking": null, "example": {"type": "command", "data": "ls -l /home/daniel"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'This is a sample file' > sample && chmod 400 sample && chown john:john sample && su - john"}, "description": "Change the ownership of sample file to root and attempt to read the file. Explain the result.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo chown root:root /home/john/sample && cat /home/john/sample || echo 'Access Denied'"}, "example": {"type": "command", "data": ""}}, "labels": ["ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && echo 'welcome to Jane's home directory' > /home/jane/welcome.txt && chmod u=rw,g+r,o+r /home/jane/welcome.txt"}, "description": "A new user 'jane' has been added to the system. She wants to make sure that only she can delete the 'welcome.txt' file in her home directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u jane rm /home/jane/welcome.txt >/dev/null 2>&1 && [[ -f /home/jane/welcome.txt ]] && [[ $(stat -c '%U' /home/jane/welcome.txt) == \"jane\" ]] && [[ $(stat -c '%a' /home/jane/welcome.txt) == \"644\" ]] >/dev/null"}, "example": {"type": "command", "data": "chmod 700 /home/jane"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user -m user && cd /home/user && touch file && echo 'hello' > file && chown user:user file"}, "description": "Give the user group read and write access, but not execute access, to the 'file' in the /home/user directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/user/file | awk '{if ($1~/^-.rw..w..w/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 660 /home/user/file"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jackie -m jackie && useradd -s /bin/bash -d /home/george -m george && useradd -s /bin/bash -d /home/lily -m lily && useradd -s /bin/bash -d /home/amber -m amber && mkdir /var/lib/files && cd /var/lib/files && touch info1.txt && touch info2.txt"}, "description": "Set permissions on /var/lib/files so that only Jack and Lily can read the contents of files within it, but they cannot delete any of the files. George and Amber can read, write and execute files within it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /var/lib | grep files | awk '{if ($1~/^d.....s..t/) { exit 0; } else { exit 1; } }' && (runuser -l jackie -c 'cat /var/lib/files/info1.txt' && runuser -l lily -c 'cat /var/lib/files/info1.txt' && runuser -l george -c 'touch /var/lib/files/newfile' >/dev/null && runuser -l amber -c 'touch /var/lib/files/newfile' >/dev/null) | if [ \"$(cat -)\" = \"INFO1$'\\n'INFO1$'\\n'$'\\n'$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 770 /var/lib/files && chown jackie:lily /var/lib/files && chmod u=r,g=r,o=wx /var/lib/files && chmod -R u+x /var/lib/files"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "chmod 751 / && chmod g+s / && useradd -s /bin/bash -d /home/jane -m jane"}, "description": "jane needs to access /var/log/syslog but is not a sudoer. Make it possible for jane to read /var/log/syslog without giving her sudo access or root privileges.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u jane cat /var/log/syslog | if [ \"$(cat -)\" != \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+rx /var/log && chmod o+r /var/log/syslog"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && cd /home/mike && touch secretfile && chmod 700 secretfile && echo 'This file is a secret' > secretfile && useradd -s /bin/bash -d /home/bob -m bob"}, "description": "Make secretfile readable only by mike and executable only by bob without changing any other permissions on the file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l mike -c 'cat ~/secretfile' && runuser -l bob -c '~/secretfile &>/dev/null && echo \"Hello, world!\"'"}, "example": {"type": "command", "data": "chmod o-rwx,g-rwx,u+r ~/secretfile && chmod g+x ~/secretfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /var/log/important && useradd -s /bin/bash -d /home/john -m john && chown john /var/log/important"}, "description": "Give john write and execute permissions to /var/log/important directory without giving him read permission", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l john -c 'touch /var/log/important/test_file' && ls -l /var/log/important/test_file | awk '{if ($1~/^-..x/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 030 /var/log/important"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && groupadd devs && usermod -a -G devs mark && cd /home/mark && mkdir development && mkdir personal && touch development/code.cpp && touch personal/diary.txt && chmod 740 development && chmod 760 personal && chmod 640 development/code.cpp && chmod 640 personal/diary.txt"}, "description": "Change the permissions of the file `/home/mark/personal/diary.txt` such that only Mark and members of the `devs` group can read and write to the file. Additionally, ensure that all other users cannot access this file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/mark/personal/diary.txt | awk '{if ($1 ~/^-..rw----/) exit 0; else exit 1;}'"}, "example": {"type": "command", "data": "chmod 660 /home/mark/personal/diary.txt && chown mark:devs /home/mark/personal/diary.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jessica -m jessica && cd /home/jessica && mkdir files && cd files && touch file1 && touch file2 && touch file3 && chmod 600 * && chgrp jessica * && usermod -aG sudo jessica"}, "description": "Jessica needs to access the files in the /home/jessica/files directory without giving other users permission to read them. She should also have access to run `sudo` commands. Help her access these files and add a new file to the directory called `file4`.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/jessica/files | awk '{if ($1 == \"-rw-------\") { exit 0; } else { exit 1; }}') && (sudo -u jessica touch /home/jessica/files/file4 && ls /home/jessica/files | grep 'file4')"}, "example": {"type": "command", "data": "chmod 700 /home/jessica && chmod 700 /home/jessica/files"}}, "labels": ["permission", "user", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /parent && chmod 777 /parent && su -m alice -c 'mkdir /parent/child && touch /parent/child/file.txt && echo \"Hello World!\" > /parent/child/file.txt'"}, "description": "Give Bob read/write access to the file, but prevent him from deleting it. Also, ensure that Bob can list the contents of the child directory, but not the parent directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cd /parent && ls -l | grep child | awk '{if($1 ~/^drwxr-xr-x/) {exit 1} else {exit 0}}' && ls -l /parent/child/file.txt | awk '{if ($1 !~/^(-rw-rw----)/) {exit 1} else {exit 0}}' && echo \"My cool message\" > /parent/child/file.txt && su -m bob -c 'cat /parent/child/file.txt && echo $((rm /parent/child/file.txt || exit 0) 2>&1 >/dev/null)' && ls -ld /parent && su -m bob -c 'ls -l /parent/child | grep \"file.txt\"'"}, "example": {"type": "command", "data": "chmod 751 /parent && chmod 640 /parent/child/file.txt && chattr +i /parent/child/file.txt && chmod 751 /parent/child"}}, "labels": ["permission", "file system"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && useradd -s /bin/bash -d /home/jessica -m jessica && useradd -s /bin/bash -d /home/alex -m alex && echo 'mark:mark123' | chpasswd && echo 'jessica:jessica321' | chpasswd && echo 'alex:123alex' | chpasswd && mkdir /data && echo 'This is a secret file.' > /data/secret-file && chmod 640 /data/secret-file && chgrp mark /data/secret-file"}, "description": "There is a file called secret-file in the /data directory, which only member of the group \"mark\" has the read permission. Give \"jessica\" permission to read this file and make sure that \"alex\" cannot read, write or even see this file. Jessica should be able to read this file but not edit it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jessica cat /data/secret-file && sudo -u alex cat /data/secret-file) | if [ \"$(cat -)\" = \"This is a secret file.\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod u-rwx,g+r,o-rwx /data/secret-file && chown root /data && chgrp mark /data/secret-file && chmod g+w /data/secret-file && usermod -a -G mark jessica"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/developer -m developer && cd /home/developer && mkdir app && touch app/*.py && chown developer:developer -R app && chmod 770 -R app"}, "description": "Create a new user 'qa' with home directory '/home/qa' and add the user to the same group as the 'developer' user. The 'qa' user should be able to read the *.py files in the 'app' directory, but not modify them.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l qa -c 'cat /home/developer/app/*.py' && runuser -l qa -c 'touch /home/developer/app/new.py && echo \"test\" >> /home/developer/app/new.py' && runuser -l developer -c 'cat /home/developer/app/new.py'"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/qa -m qa && usermod -a -G developer qa && chmod g+r /home/developer/app/*.py"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && touch /home/john/testfile && chmod 600 /home/john/testfile && chown john /home/john/testfile && su - john"}, "description": "As a normal user, modify any attribute of /home/john/testfile without using sudo.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john | grep testfile | awk '{if ($1~/^-rw-------/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod a+x /home/john/testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir files && chgrp john files && chmod 2770 files && touch files/a && touch files/b && chgrp john files/* && chmod g+w files/*"}, "description": "Create a new user named 'mark' and add him to the 'john' group. Then, create a new file 'c' inside /home/john/files directory. Can mark create a new file inside this directory?", "evaluation": {"type": "ground-truth", "answer": "yes", "checking": null, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && usermod -aG john mark && touch /home/john/files/c && su - mark -c 'cd /home/john/files && touch d'"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/julia -m julia && echo 'password' | passwd julia --stdin"}, "description": "Change the password of user julia to 'newpassword'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "echo 'newpassword' | su - julia -c 'sudo -S whoami' | if [ \"$(cat -)\" = \"root\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'newpassword' | sudo -S passwd julia"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m alice && useradd -m bob && echo 'secret' > /home/alice/secret && chown alice /home/alice/secret && chmod 400 /home/alice/secret && echo 'alice ALL=(bob) NOPASSWD: /bin/cat' >> /etc/sudoers"}, "description": "Allow Bob to read Alice's secret file using `sudo cat` command.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u bob cat /home/alice/secret | if [ \"$(cat -)\" = \"secret\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": ""}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/users && useradd -s /bin/bash -d /home/users/michael -m michael && useradd -s /bin/bash -d /home/users/lucy -m lucy && useradd -s /bin/bash -d /home/users/oliver -m oliver && useradd -s /bin/bash -d /home/users/abby -m abby"}, "description": "Create a group named 'admins' and add michael and lucy to it. Set the group ownership of /home/users directory to 'admins' group. Make it so that only the owner of a file or directory can delete that file or directory, but the files in directories can always be read and modified by any member of the 'admins' group.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -ld /home/users | awk '{if ($1 ~/^drwxrwx---$/) exit 0; else exit 1;}' && ls -l /home/users | awk '{if ($3~/^michael$/ && $4~/^admins$/ || $3~/^lucy$/ && $4~/^admins$/) exit 0; else if(!($1~/^...-w..w.../)) exit 1;}' || exit 1)"}, "example": {"type": "command", "data": "groupadd admins && usermod -aG admins michael && usermod -aG admins lucy && find /home/users -type d -exec chmod g+s {} + && chmod 1770 /home/users"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/mary -m mary && echo 'secret file' > /home/john/secret && echo 'top secret file' > /home/bob/topsecret && echo 'protected file' > /home/mary/protected && chmod 700 /home/john/secret && chmod 400 /home/bob/topsecret && chmod 600 /home/mary/protected"}, "description": "Give john and bob read permissions on mary's protected file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john cat /home/mary/protected && sudo -u bob cat /home/mary/protected) | if [ \"$(cat -)\" = \"protected file\"$'\\n'\"protected file\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod +r /home/mary/protected && setfacl -m u:john:r,u:bob:r /home/mary/protected"}}, "labels": ["permission", "acl"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'hello world!' > test.txt && chmod 444 test.txt && chattr +i test.txt && su - john"}, "description": "In the init command, we made a file 'test.txt' immutable. Can you remove the immutability and change the content to 'goodbye world!' ?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/john/test.txt | grep 'goodbye world!') > /dev/null && sudo chattr -i /home/john/test.txt && echo 'goodbye world!' > /home/john/test.txt && cat /home/john/test.txt | grep 'goodbye world!'"}, "example": {"type": "command", "data": "sudo chattr -i /home/john/test.txt && echo 'goodbye world!' > /home/john/test.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "touch importantfile && chmod 600 importantfile"}, "description": "Ensure that only the owner of file called importantfile can read, write, or execute it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l importantfile | awk '{if ($1~/^-..------*/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 600 importantfile"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/larry -m larry && useradd -s /bin/bash -d /home/moe -m moe && useradd -s /bin/bash -d /home/curly -m curly && echo 'adminuser ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && echo 'adminuser ALL=(ALL:ALL) NOPASSWD:/usr/sbin/useradd, /usr/sbin/userdel, /usr/sbin/usermod' >> /etc/sudoers && chmod 440 /etc/sudoers"}, "description": "Create a new user 'judi', add them to the group 'sudo', and give them permission to add or remove users 'larry', 'moe', and 'curly', but nothing else. Test that judi can add and remove the specified users without using the root account.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(grep ^larry /etc/passwd && grep ^moe /etc/passwd && grep ^curly /etc/passwd && ! grep ^judi /etc/passwd) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi && echo 'test321' | sudo -S su - judi -c 'sudo useradd -m testuser' && (grep ^testuser /etc/passwd && sudo find /home/testuser -type d ! -perm /g+w,o+w -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 1; else exit 0; fi && echo 'test321' | sudo -S su - judi -c 'sudo userdel -r testuser' && (! grep ^testuser /etc/passwd) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "useradd -G sudo judi && echo 'judi:test123' | chpasswd && su - adminuser -c 'sudo useradd -m testuser' && su - adminuser -c 'sudo usermod -a -G sudo testuser'"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && cd /home/jack && echo 'Hello, World!' > test && chmod 777 test"}, "description": "How to make the file /home/jack/test readable and writable to everyone?", "evaluation": {"type": "ground-truth", "answer": "chmod 666 /home/jack/test", "checking": null, "example": {"type": "command", "data": "chmod 666 /home/jack/test && cat /home/jack/test"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jeff -m jeff && groupadd team && usermod -aG team john && usermod -aG team jeff && touch /home/john/file && chown john:team /home/john/file && chmod 640 /home/john/file"}, "description": "How can jeff read the contents of the file owned by john in the 'team' group?", "evaluation": {"type": "ground-truth", "answer": "jeff can read the contents of john's file by running 'cat /home/john/file'", "checking": null, "example": {"type": "command", "data": "su - jeff && cat /home/john/file"}}, "labels": ["permission", "group"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && mkdir /home/bob/file && touch /home/bob/file/file1 && touch /home/bob/file/file2 && chmod 400 /home/bob/file/file1 && chmod 200 /home/bob/file/file2 && chown -R bob: /home/bob/file && echo 'bob ALL=(ALL) NOPASSWD: /usr/bin/tail' >> /etc/sudoers"}, "description": "Bob has two files: file1 and file2 with permissions 400 and 200 respectively. Set up sudo permission for Bob to use tail command on both files, but only see the last line of the files.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u bob tail -n 1 /home/bob/file/file1 | if [ \"$(cat -)\" = \"content of the last line\" ]; then exit 0; else exit 1; fi && sudo -u bob tail -n 1 /home/bob/file/file2 | if [ \"$(cat -)\" = \"content of the last line\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'bob ALL=(ALL) NOPASSWD: /usr/bin/tail -n 1 /home/bob/file/*' >> /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/secret && touch /home/secret/secret.txt && chmod 440 /home/secret/secret.txt && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jim -m jim"}, "description": "give john read access to /home/secret/secret.txt and give jim no access at all", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john cat /home/secret/secret.txt && sudo -u jim cat /home/secret/secret.txt) | if [ \"$(cat -)\" = \"I'm a secret!\"$'\\n'$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chown john /home/secret/secret.txt && chmod 400 /home/secret/secret.txt && chown root /home/secret/ && chmod 700 /home/secret/"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sara -m sara && cd /home/sara && mkdir secret && cd secret && echo 'Nobody should know what sara is hiding' > sara_secret && chmod 600 sara_secret && chown sara sara_secret && su - sara"}, "description": "As a root user, you need to be able to access the file /home/sara/secret/sara_secret without changing its original permissions. How can you do that?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo cat /home/sara/secret/sara_secret | if [ \"$(cat -)\" = \"Nobody should know what sara is hiding\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "setfacl -m u:root:r /home/sara/secret/sara_secret"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "cd ~/ && mkdir files && cd files && touch file1.txt && touch file2.txt && chmod 777 file1.txt && chmod 400 file2.txt"}, "description": "Give all users read access to ~/files/file1.txt and restrict all other access, while keeping ~/files/file2.txt private from all users except yourself.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l ~/files/file1.txt | grep -E '^-r--r--r--' && ls -ld ~/files/file2.txt | grep -E '^-.---------'"}, "example": {"type": "command", "data": "chmod 644 ~/files/file1.txt && chmod 400 ~/files/file2.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/admin -m admin && echo 'admin ALL=(root) NOPASSWD: /bin/bash' >> /etc/sudoers && chmod 600 /etc/sudoers"}, "description": "Give user 'admin' the permission to execute /bin/bash with root privileges without password prompt when using sudo command", "evaluation": {"type": "ground-truth", "answer": "sudo /bin/bash", "checking": null, "example": {"type": "command", "data": "sudo /bin/bash"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'john:pass' | chpasswd"}, "description": "Grant john permission to read and write in his home directory only, and prevent john from deleting or renaming his home directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - john -c 'touch /home/john/test && echo \"test\" >> /home/john/test && cat /home/john/test && rm /home/john/test && echo \"can delete\"' && mv /home/john /home/john_old && mkdir /home/john && su - john -c 'touch ~/test && echo \"not allowed to rename\" >> ~/test && rm ~/test && echo \"can't delete\"' && mv /home/john /home/john_new && rm -r /home/john_new && echo \"can delete\" && mv /home/john_old /home/john) | if [ \"$(cat -)\" = \"test$'\\n'can delete$'\\n'not allowed to rename$'\\n'can't delete$'\\n'can delete\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chattr +a ~john/ && chmod 700 ~john && chattr +i ~john"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/rachel -m rachel && useradd -s /bin/bash -d /home/sam -m sam && usermod -aG sudo rachel && echo 'rachel ALL=(ALL) NOPASSWD: /usr/bin/chmod' >> /etc/sudoers && echo 'sam ALL=(ALL) NOPASSWD: /usr/bin/cat' >> /etc/sudoers && cd /home/rachel && touch top_secret && echo 'Rachel was here.' > top_secret && chmod 644 top_secret && chown rachel top_secret && cd /home/sam"}, "description": "Sam needs read access to the file '/home/rachel/top_secret', but he should not be able to modify the file. Help Sam access the file and print its contents.", "evaluation": {"type": "operation-checking", "answer": "Rachel was here.\n", "checking": {"type": "command", "data": "sudo -u sam cat /home/rachel/top_secret 2>/dev/null | if [ \"$(cat -)\" = \"Rachel was here.\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo chmod 444 /home/rachel/top_secret && sudo chown rachel:sudo /home/rachel/top_secret"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/mark -m mark && useradd -s /bin/bash -d /home/lisa -m lisa && echo 'hello world' > /home/john/sample.txt"}, "description": "Give user 'mark' the ability to read, write and execute all files in the home directory of 'john', make sure that 'lisa' cannot access any files in 'john' home directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "find /home/john -type f ! -perm 700 -print -quit && find /home/mark -type f ! -perm 700 -print -quit && find /home/lisa -type f ! -perm 700 -print -quit"}, "example": {"type": "command", "data": "setfacl -R -m u:mark:rwX /home/john && chmod 700 /home/john && chown john:john /home/john/sample.txt && setfacl -R -m u:lisa:0 /home/john"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "apt update && apt install acl -y && useradd -s /bin/bash -d /home/mike -m mike && echo -e 'password\npassword' | passwd mike && su - mike"}, "description": "Create a directory at ~/data and grant read and write access to the group \"dataaccess\". Also, set it so that new files created in the directory inherit the group ownership and are assigned the default permission of 664. Finally, ensure that any new subdirectories created in the directory will also inherit the ACL rules set on the parent directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo getfacl /home/mike/data | awk '{if (NR==3 && $2~/^rwx/) { exit 0; } else if (NR==4 && $2~/^rwx/) { exit 0; } else if (NR==6 && $2~/d/) { exit 0; } else { exit 1; }}') && (touch /home/mike/data/testfile && ls -l /home/mike/data/testfile | awk '{if ($1~/^-rw-rw-r--/) { exit 0; } else { exit 1; }}') && (mkdir /home/mike/data/subdir && touch /home/mike/data/subdir/testfile && ls -l /home/mike/data/subdir/testfile | awk '{if ($1~/^-rw-rw-r--/) { exit 0; } else { exit 1; }}') && (sudo getfacl /home/mike/data/subdir | awk '{if (NR==3 && $2~/^rwx/) { exit 0; } else if (NR==4 && $2~/^rwx/) { exit 0; } else { exit 1; }}')"}, "example": {"type": "command", "data": "mkdir ~/data && setfacl -d -m g:dataaccess:rwX /home/mike/data && setfacl -m g:dataaccess:rwX /home/mike/data && setfacl -R -m d:g:dataaccess:rwX,u::rwX,g::rwX,o::rX /home/mike/data"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && touch /documents && chown john /documents && chmod 740 /documents"}, "description": "In a directory called /documents, John has read and write permissions while other users have only read permissions. Also, he cannot delete the directory, but can delete files within it. Can you create a file within /documents and delete it while leaving the directory intact?", "evaluation": {"type": "ground-truth", "answer": "Yes", "checking": "Can you create a file named test.txt, write something in it, and delete it afterwards?", "example": {"type": "command", "data": "cd /documents && echo 'Hello' > test.txt && rm test.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/kim -m kim && useradd -s /bin/bash -d /home/amy -m amy && useradd -s /bin/bash -d /home/tom -m tom && useradd -s /bin/bash -d /home/jack -m jack && echo 'amy ALL=(john) NOPASSWD:/bin/ls' >> /etc/sudoers && su - john"}, "description": "Give the user amy permission to execute /bin/ls as the user john without a password.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "amy sudo -u john /bin/ls | if [ \"$(cat -)\" = \"[sudo] password for amy: Sorry, user amy is not allowed to execute '/bin/ls' as john on localhost.\\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'amy ALL=(john) NOPASSWD:/bin/ls' >> /etc/sudoers"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && touch file1 && touch file2 && chown jane:jane file1 && chmod 400 file2 && groupadd newgroup && usermod -a -G newgroup jane && useradd -s /bin/bash -d /home/jenny -m jenny && usermod -a -G newgroup jenny && su - jenny"}, "description": "You are logged in as user 'jenny' who is a member of a group 'newgroup'. Copy the contents of file1 to file2 without using sudo command.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/jane/file1 > /home/jenny/file2 && ls -al /home/jenny/file2 | grep -q '^-r--------' && cmp --silent /home/jane/file1 /home/jenny/file2) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "cat /home/jane/file1 > /home/jenny/file2"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && touch secret.txt && chmod 600 secret.txt && echo 'hehehehe' > secret.txt && su - john"}, "description": "You are logged in as user `john` and you want to allow user `jane` to read the contents of ~/secret.txt. What command(s) do you need to run?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - jane -c 'cat /home/john/secret.txt' 2>/dev/null && chmod u+w /home/john && chmod o+rx /home/john && su - jane -c 'cat /home/john/secret.txt') | if [ \"$(cat -)\" = \"hehehehe\"$'\\n'\"hehehehe\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+rx /home/john && chmod g+r /home/john/secret.txt && chown john:jane /home/john/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/kevin -m kevin && echo 'mark:admin1' | chpasswd && echo 'john:admin2' | chpasswd && echo 'kevin:admin3' | chpasswd"}, "description": "Create a group named 'admins' and add users mark and john to admin group and ensure that kevin is not a part of the 'admins' group", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "id mark | grep 'admins' && id john | grep 'admins' && !(id kevin | grep 'admins')"}, "example": {"type": "command", "data": "groupadd admins && usermod -aG admins mark && usermod -aG admins john"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir testdir && touch testfile && chown john:john testdir && chown john:john testfile && echo 'test content' > testfile && chmod 400 testfile && echo 'cba321' > /tmp/output.txt"}, "description": "Change the permission of testdir to 700 so that only john can enter into it. Then, read the content of testfile and store it in /tmp/output.txt. Ensure only john can read testfile and output.txt is changed to have the same content as testfile.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "[ $(stat -c '%a' ~/testdir) = '700' ] && [ $(stat -c '%a' ~/testfile) = '400' ] && [ $(cat /tmp/output.txt) = 'test content' ] && [ $(stat -c '%U' ~/testdir) = 'john' ] && [ $(stat -c '%U' ~/testfile) = 'john' ]"}, "example": {"type": "command", "data": "chmod 700 ~/testdir && cat ~/testfile > /tmp/output.txt && chmod 400 ~/testfile && cat ~/testfile > /tmp/output.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && echo 'SECRET' > /secret && chown alice /secret && chmod 400 /secret"}, "description": "alice has created a secret file in her home directory. Give bob read access to this file without changing its ownership or permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - bob -c 'cat /home/alice/secret' | if [ \"$(cat -)\" = \"SECRET\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G alice bob"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/paul -m paul && useradd -s /bin/bash -d /home/george -m george && useradd -s /bin/bash -d /home/ringo -m ringo && mkdir /songs && cd /songs && touch yesterday && touch hey_jude && touch let_it_be && chown john:john yesterday && chown paul:paul hey_jude && chown george:george let_it_be && chmod 766 /songs && chmod 770 yesterday && chmod 740 hey_jude && chmod 700 let_it_be"}, "description": "John, Paul, George, and Ringo are four users on this system. They all should be able to access /songs but should have limited access to individual files. John should have full access to yesterday, but only read access to other files. Paul should have full access to hey_jude, but only read access to other files. George should have full access to let_it_be, but no access to other files. Ringo should not be able to access any of the files. Please use the appropriate commands to set permissions accordingly.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john test -r /songs/yesterday && sudo -u john test -w /songs/yesterday && sudo -u john test -x /songs/yesterday && ! sudo -u john test -r /songs/hey_jude && sudo -u john test -r /songs/let_it_be && ! sudo -u john test -r /songs)\n&& (sudo -u paul test -r /songs/hey_jude && sudo -u paul test -w /songs/hey_jude && sudo -u paul test -x /songs/hey_jude && ! sudo -u paul test -r /songs/yesterday && sudo -u paul test -r /songs/let_it_be && ! sudo -u paul test -r /songs)\n&& (sudo -u george test -r /songs/let_it_be && sudo -u george test -w /songs/let_it_be && sudo -u george test -x /songs/let_it_be && ! sudo -u george test -r /songs/hey_jude && ! sudo -u george test -r /songs/yesterday && ! sudo -u george test -r /songs)\n&& (! sudo -u ringo test -r /songs/let_it_be && ! sudo -u ringo test -r /songs/hey_jude && ! sudo -u ringo test -r /songs/yesterday && ! sudo -u ringo test -x /songs/let_it_be && ! sudo -u ringo test -x /songs/hey_jude && ! sudo -u ringo test -x /songs/yesterday)"}, "example": {"type": "command", "data": "chmod 766 /songs && chmod 770 yesterday && chmod 740 hey_jude && chmod 700 let_it_be && setfacl -m u:paul:rwx /songs/hey_jude && setfacl -m u:john:rwx /songs/yesterday && setfacl -m u:george:rwx /songs/let_it_be && setfacl -m u:ringo:- /songs/* && setfacl -d -m u:paul:rwx /songs/hey_jude && setfacl -d -m u:john:rwx /songs/yesterday && setfacl -d -m u:george:rwx /songs/let_it_be"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/nick -m nick && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/alex -m alex && touch /home/nick/secretfile && chown nick /home/nick/secretfile && su - nick"}, "description": "Create a file called 'mysecretfile' in Nick's home directory, such that Bob can read the file, but Alex cannot. The file should contain the string 'topsecret'.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l bob -c 'cat /home/nick/mysecretfile') | if [ \"$(cat -)\" = \"topsecret\"$'\\n' ]; then (runuser -l alex -c 'cat /home/nick/mysecretfile') | if [ \"$(cat -)\" = \"cat: /home/nick/mysecretfile: Permission denied\"$'\\n' ]; then exit 0; else exit 1; fi; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'topsecret' > /home/nick/mysecretfile && chmod 640 /home/nick/mysecretfile && chown nick:bob /home/nick/mysecretfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir photos && cd photos && mkdir old && mkdir new && touch pic1 && touch pic2 && touch new/a && touch new/b && touch old/c && chmod 755 /home/john && find ~/photos -type f -exec chmod 644 {} + && find ~/photos -type d -exec chmod 755 {} +"}, "description": "john have some pictures in his home, you have to secretly add 'Hello, World!' to the end of the picture with smallest lexicographical order and don't let john know this by checking properties of files or directories", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(md5sum /home/john/photos/* | sort | awk -F'/' '{print $4}') > /tmp/current && touch /tmp/timestamp && find /home/john/photos -type f ! -newer /tmp/timestamp -exec sh -c '(tail -c 14 \"{}\" | grep \"Hello, World!\" >/dev/null || echo \"Hello, World!\" >> \"{}\" ) >/dev/null 2>&1' \\; > /dev/null && (md5sum /home/john/photos/* | sort | awk -F'/' '{print $4}') > /tmp/updated && ( diff /tmp/current /tmp/updated >/dev/null ) && exit 0 || exit 1"}, "example": {"type": "command", "data": "sudo echo 'Hello, World!' >> /home/john/photos/new/a && cd /home/john && sudo find . -exec touch '{}' +"}}, "labels": ["file-manipulation", "permission"], "difficulty": 3},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && touch file1 && touch file2 && touch file3 && chmod 644 file1 && chmod 664 file2 && chmod 666 file3"}, "description": "What are the permissions for file1, file2 and file3, and how can you change them to give write permission to the group and other users?", "evaluation": {"type": "ground-truth", "answer": "file1: -rw-r--r--, file2: -rw-rw-r--, file3: -rw-rw-rw-, chmod 666 file1 file2 file3", "checking": null, "example": {"type": "command", "data": "ls -l file* && sudo chmod 666 file1 file2 file3 && ls -l file*"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/kim/videos && cd /home/kim/videos && mkdir old && mkdir new && touch vid1 && touch vid2 && touch new/a && touch new/b && touch old/c && chmod -R 660 /home/kim/videos && chmod -R +X /home/kim/videos"}, "description": "Give the directory /home/kim/videos and all its subdirectories execute permissions, but restrict access to all files to only members of the group \"videoaccess\". Ensure that the permissions are inherited for new files and directories created under /home/kim/videos", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -lR /home/kim/videos | awk '{if($1~/^-.....rw-/) { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "chmod g+s /home/kim/videos && chmod -R 2770 /home/kim/videos && find /home/kim/videos -type f -exec chmod 660 {} + && find /home/kim/videos -type d -exec chmod 2770 {} +"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && touch secret && chmod 600 secret && su - jane"}, "description": "Give mike access to read the file \"secret\" owned by jane.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l jane -c 'cat secret' && runuser -l mike -c 'cat /home/jane/secret' | if [ \"$(cat -)\" = \"The cake is a lie!\"$'\\n'\"The cake is a lie!\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G jane mike"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/stella -m stella && chmod -x /home/stella && su - stella"}, "description": "Why can't I see the contents of a file in a directory where I have read permission? Help me fix it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/stella/filename"}, "example": {"type": "command", "data": "sudo chmod +x /home/stella"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && echo 'admin: lisa' > /etc/group && echo 'lisa:x:1001:admin' >> /etc/group"}, "description": "Create a new file `/etc/sudoers.d/lisa` with the following content: `lisa ALL=(ALL) ALL`. This file should only be writable by root and readable by members of the group 'admin'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo cat /etc/sudoers.d/lisa | if [ \"$(cat -)\" = \"lisa ALL=(ALL) ALL\" ]; then exit 0; else exit 1; fi && ls -l /etc/sudoers.d/lisa | awk '{if ($1~/^-..------.*/) { exit 0; } else { exit 1; } }' && stat --format=%A /etc/sudoers.d/lisa | if [ \"$(cat -)\" = \"--xr-----\" ]; then exit 0; else exit 1; fi && stat --format=%G /etc/sudoers.d/lisa | if [ \"$(cat -)\" = \"admin\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'lisa ALL=(ALL) ALL' | sudo tee /etc/sudoers.d/lisa > /dev/null && sudo chown root:admin /etc/sudoers.d/lisa && sudo chmod 440 /etc/sudoers.d/lisa"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/susan -m susan && cd /home && mkdir shared && chmod 777 shared && cd shared && touch file && echo 'Hello World' > file && chown john file && chgrp susan file"}, "description": "John and Susan work together and can both read and write to a file located in the shared directory. However, other users should not be able to read that file. Please adjust the permissions accordingly.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/shared/file | awk '{if ($1!~/^-rw-rw----/) { exit 1; } else { exit 0; }}') && (runuser -l john -c 'cat /home/shared/file' && runuser -l susan -c 'cat /home/shared/file' && runuser -l bill -c 'cat /home/shared/file' >& /dev/null) | if [ \"$(cat -)\" = \"Hello World\"$'\\n'\"Hello World\"$'\\n''cat: /home/shared/file: Permission denied'$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 660 /home/shared/file && chgrp susan /home/shared/file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/matt -m matt && su - matt"}, "description": "Create a file called \"secret\" in your home directory with the permissions \"-rw-------\". Make sure only you can read and write to this file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "stat -c %a /home/matt/secret | if [ \"$(cat -)\" = \"600\" ]; then exit 0; else exit 1; fi &&  ls -l /home/matt/secret | if [ \"$(cat -)\" = \"-rw------- 1 matt matt\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "touch /home/matt/secret && chmod 600 /home/matt/secret"}}, "labels": ["permission", "file"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && useradd -s /bin/bash -d /home/shawn -m shawn && useradd -s /bin/bash -d /home/sean -m sean && echo 'Welcome Alex, Shawn and Sean to our server!' > /home/welcome.txt && chown root:root /home/welcome.txt && chmod 644 /home/welcome.txt"}, "description": "Grant read permission to the file /home/welcome.txt to the users in the group 'admins' but not to the users in the group 'users'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(getfacl /home/welcome.txt | awk '{if (/user::rwx|group::r-x|other::r-x|mask::r-x/) { exit 1; } else { exit 0; } }') && (groups alex | grep admins) && (groups shawn | grep admins) && (groups sean | grep admins) && (groups alex | grep -v users) && (groups shawn | grep -v users) && (groups sean | grep -v users)"}, "example": {"type": "command", "data": "chmod 640 /home/welcome.txt && setfacl -m g:admins:r /home/welcome.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && echo 'This is a top secret document' > /home/jack/top_secret.txt && chmod 600 /home/jack/top_secret.txt"}, "description": "Grant write access to the top_secret.txt file for a group named 'staff', so that all members of the group can modify the file while other users cannot.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(getfacl /home/jack/top_secret.txt | grep -q staff:rw-) && (! getfacl /home/jack/top_secret.txt | grep -q other:)"}, "example": {"type": "command", "data": "groupadd staff && usermod -a -G staff jack && chgrp staff /home/jack/top_secret.txt && chmod 640 /home/jack/top_secret.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "groupadd employees && useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/bob -m bob && touch /secret_file && chown root:employees /secret_file && chmod 640 /secret_file"}, "description": "Bob wants to access /secret_file, what should he do?", "evaluation": {"type": "ground-truth", "answer": "Bob should request to be added to the employees group by an administrator, or an administrator can grant Bob access through sudo or ACL", "checking": null, "example": {"type": "text", "data": "How can an administrator grant access to Bob?\nAccording to the description, an administrator can grant Bob access through sudo or ACL.\nIf using sudo, an administrator can add Bob to the sudoers file with permission to read /secret_file, allowing Bob to use sudo to read it.\nIf using ACL, an administrator can set an ACL on /secret_file granting Bob read access."}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/dave -m dave && touch file1 && touch file2 && chown john:john file1 && chown dave:dave file2"}, "description": "Give john permission to read and write file1, but prohibit him from changing its contents. Give dave permission to read and write file2 and let him modify its contents as well.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l file1 | awk '{if ($1~/^-..-..-.r-/) { exit 0; } else { exit 1; } }') && (ls -l file2 | awk '{if ($1~/^-..-..-.rw-/) { exit 0; } else { exit 1; } }')"}, "example": {"type": "command", "data": "chmod 444 file1 && chmod 664 file2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/charlie -m charlie && useradd -s /bin/bash -d /home/dave -m dave && echo 'secret' > /home/alice/secret && chmod 400 /home/alice/secret && find /home -type d -exec chmod 700 {} + && chown alice:alice /home/alice/secret"}, "description": "Bob needs to read Alice's secret file, but Alice doesn't want Charlie and Dave to access it. Set permissions to enable Bob to read the file, but prevent Charlie and Dave from doing so. Note that Alice should retain full ownership over the file, and no other permission changes to any of the files/directories in /home should be made.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u bob cat /home/alice/secret > /dev/null && sudo -u charlie cat /home/alice/secret > /dev/null && sudo -u dave cat /home/alice/secret > /dev/null && sudo -u alice cat /home/alice/secret | if [ $(cat) = 'secret' ]; then exit 0; else exit 1; fi) | if [ $(cat) = 'secretsecretsecret' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 440 /home/alice/secret && chmod g+r /home/alice/secret && chgrp alice /home/alice/secret"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && mkdir /home/user1/dir1 && mkdir /home/user2/dir2 && echo 'Hello, Linux!' > /home/user1/dir1/testfile && chmod o+r /home/user1/dir1/testfile && su - user2"}, "description": "user2 wants to read /home/user1/dir1/testfile. What should be the permissions of /home/user1/dir1/ and /home/user1/dir1/testfile so that user2 can read the file but cannot list the contents of the directory?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -ld /home/user1/dir1 && ls -l /home/user1/dir1/testfile | awk '{if ($1~/^-r--r--r--/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 750 /home/user1/dir1 && chmod 640 /home/user1/dir1/testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && echo '12345' > /home/jane/secrets && chmod 400 /home/jane/secrets && chown jane /home/jane/secrets"}, "description": "Change the owner of /home/jane/secrets to june, but ensure jane can still read the file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u jane cat /home/jane/secrets | if [ \"$(cat -)\" = \"12345\" ]; then exit 0; else exit 1; fi && ls -l /home/jane/ | awk '{if ($3 == \"june\" && $1~/^-..------/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chown june /home/jane/secrets && chmod 400 /home/jane/secrets"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/amy -m amy && useradd -s /bin/bash -d /home/kevin -m kevin && useradd -s /bin/bash -d /home/oliver -m oliver && chmod og-rwx /home/oliver"}, "description": "Make Kevin the owner of the home directory of Oliver and make sure Amy can also access the directory while nobody else can. Oliver should have read access but no write/execute access as he is no longer the owner. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -ld /home/oliver && ls -l /home | grep oliver | awk '{if ($1~/^d.{1}r.---/ && $3==\"kevin\" && $4==\"amy\") { exit 0; } else { exit 1; } }')"}, "example": {"type": "command", "data": "chown kevin /home/oliver && chmod 750 /home/oliver"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && echo 'export PATH=$PATH:/usr/local/temporary_folder' >> /home/jane/.bashrc && mkdir /usr/local/temporary_folder && touch /usr/local/temporary_folder/file1 && touch /usr/local/temporary_folder/file2 && chmod 700 /usr/local/temporary_folder && chmod 400 /usr/local/temporary_folder/file1 && chmod 777 /usr/local/temporary_folder/file2 && chown -R root:jane /usr/local/temporary_folder && chmod g+s /usr/local/temporary_folder && cd /home/jane"}, "description": "jane is a member of a team that needs to collaborate on files under a shared directory '/usr/local/temporary_folder'. She has read access to the directory but cannot modify files. Make sure Jane can write to '/usr/local/temporary_folder/file1', and all new files created by members of the 'jane' group should have read and write permissions for the group, and should have the same group ownership as '/usr/local/temporary_folder'.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cd /usr/local/temporary_folder && echo 'hello world' > file1 && (ls -l | awk '{if ($1 !~ /^(drwxrwsr-x)|(..-.-----.)/) exit 1;}'; test -w file1); if [ $? -eq 0 ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+w /usr/local/temporary_folder/file1 && echo 'umask 002' >> /home/jane/.bashrc && chgrp -R jane /usr/local/temporary_folder && chmod g+s /usr/local/temporary_folder"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user -m user && chown user:user /home/user && chmod o-rwx /home/user && mkdir /home/user/data && mkdir /home/user/scripts && touch /home/user/data/file1 && touch /home/user/data/file2 && touch /home/user/scripts/script1.sh && chmod u+x /home/user/scripts/script1.sh"}, "description": "Configure the permissions of user's directories and files according to the best practices. Only user should have read, write, execute access to the files and directories and none of the other users should have any access. Allow user to execute the script1.sh file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -ld /home/user /home/user/* | awk '{print $1}' | grep '........--') | if [ -z $(cat -) ]; then exit 0; else exit 1; fi && (sudo -u user /home/user/scripts/script1.sh && [ -f /home/user/data/file3 ]) | if [ $? -eq 0 ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod -R go-rwx /home/user && chmod u+rwx /home/user/data /home/user/scripts && chmod u+rw /home/user/data/* && chown -R user:user /home/user && su - user && echo '#!/bin/bash\n touch /home/user/data/file3' >> /home/user/scripts/script1.sh"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/tony -m tony && cd /home/tony && mkdir project && cd project && touch script1 && touch script2 && chmod 700 script1 && chmod 770 script2 && chown tony:tony script1 && chown tony:tony script2"}, "description": "tony has two scripts in his project directory. He wants to give his friend bob, who belongs to the group tony, the permission to execute script2 but not script1.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l bob -c 'test -x /home/tony/project/script2' && runuser -l bob -c 'test ! -x /home/tony/project/script1') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 750 script2 && chown :tony script2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && touch /home/alice/file && chown alice:alice /home/alice/file && chmod 440 /home/alice/file"}, "description": "Add a new user, bob, to the same group as alice and give him read and write permissions to /home/alice/file without affecting alice's permissions", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u alice cat /home/alice/file && sudo -u bob cat /home/alice/file && ls -l /home/alice/file | awk '{print $1,$3,$4}' | grep -E \"^-r--r---- alice alice$\" | wc -l) | if [ \"$(cat -)\" = \"test1test21\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && usermod -a -G alice bob && chmod g+w /home/alice/file"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jason -m jason && useradd -s /bin/bash -d /home/sara -m sara && echo 'secretinfo' > /etc/secretfile && chmod 440 /etc/secretfile && chown root:sara /etc/secretfile && chmod g+s /etc/secretfile && su - jason"}, "description": "Read the content of /etc/secretfile and echo it to the console. However, you cannot modify the file or transfer the file to another directory. Moreover, you cannot allow anyone else to misuse the privilege of reading /etc/secretfile. ", "evaluation": {"type": "operation-checking", "answer": "secretinfo", "checking": null, "example": {"type": "command", "data": "cat /etc/secretfile"}}, "labels": ["permission", "file ownership", "SUID"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "touch file1 && touch file2 && touch file3 && touch file4 && chmod 600 file1 && chmod 640 file2 && chmod 644 file3 && chmod 666 file4"}, "description": "What are the permissions for file1, file2, file3 and file4? Show the numeric permissions for each file in order: file1, file2, file3, file4", "evaluation": {"type": "ground-truth", "answer": "600\n640\n644\n666", "checking": null, "example": {"type": "command", "data": "stat -c '%a' file1 && stat -c '%a' file2 && stat -c '%a' file3 && stat -c '%a' file4"}}, "labels": ["permission", "numeric"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && useradd -s /bin/bash -d /home/jim -m jim && useradd -s /bin/bash -d /home/tom -m tom && cd /home && mkdir files && cd files && touch file1 && touch file2 && touch file3 && chown mark file1 && chown jim file2 && chown tom file3 && find /home/files -type f -exec chmod 664 {} + && find /home/files -type d -exec chmod 775 {} +"}, "description": "Give mark, jim and tom access to all the files in /home/files and its subfolders", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -lR /home/files | awk '{if ($3!~/^(jim|mark|tom)$/ || $4!~/^(jim|mark|tom)$/ || !($1~/^-..rw-rw-.$/ || $1~/^d..rwxrwx.$/)) { exit 1; }}END{exit 0;}'"}, "example": {"type": "command", "data": "chmod -R g+rw /home/files && chown -R :mark /home/files && chmod -R g+s /home/files"}}, "labels": ["permission", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "groupadd team && useradd -s /bin/bash -d /home/jon -g team -m jon && useradd -s /bin/bash -d /home/kim -g team -m kim && useradd -s /bin/bash -d /home/jay -m jay"}, "description": "Create a shared directory called 'project' at /home/project that can be accessed by members of the group 'team' with read and write permissions (both files and directories). All newly created files and directories within 'project' should have their group ownership set to 'team'. Additionally, outside of the 'project' directory, the user 'jay' should not have access to any files or directories owned by 'jon' or 'kim'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/ | grep project | awk '{if ($1~/.rwx./ && $3~/^team$/ && $4~/^team$/ ) { exit 0; } else { exit 1; }}' || ls -l /home/ | grep project | awk '{if ($1~/.rwx./ && $3~/^team$/ && $4~/^team$/ ) { exit 0; } else { exit 1; }}' && (ls -lR /home/project/ | awk '{if ($3~/^(jon|kim)$/ && !($4~/^team$/)) { exit 1; }}' || true)) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "mkdir /home/project && chgrp team /home/project && chmod 2775 /home/project"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir documents && cd documents && mkdir finance && touch finance/balance.txt && chmod 640 finance/balance.txt && chown john finance/balance.txt"}, "description": "The file /home/john/documents/finance/balance.txt contains sensitive information that should only be accessible to members of the group \"finance\". Ensure that members of this group can read this file, but no one else can, including the owner and others users on the system.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/john/documents/finance/balance.txt | grep 'rw-r-----') && (echo 'test' > /home/john/documents/finance/balance.txt && ({} >/dev/null 2>&1); echo $?) | if [ $(cat -) = '1' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 /home/john/documents/finance/balance.txt && chgrp finance /home/john/documents/finance/balance.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "adduser sam && adduser patrick && adduser jessica && mkdir /home/shared && chgrp -R shared /home/shared && chmod 2775 /home/shared && chmod 750 /home/sam && chmod 750 /home/patrick && chmod 750 /home/jessica"}, "description": "Create three new users: Sam, Patrick, and Jessica. Create a directory called /home/shared that belongs to a group called 'shared'. Set it so that when a new file is created in this directory, it automatically belongs to the 'shared' group. Set Sam, Patrick, and Jessica's home directories so that they can only read, write, and execute files in their home directory, and users of their group, but no one else.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(test -d /home/sam && test -d /home/patrick && test -d /home/jessica && ls -ld /home/shared | grep shared | awk '{if($1~/^drwxrwsr-x/) {exit 0} else {exit 1} }' && ls -ld /home/sam /home/patrick /home/jessica | grep -v shared | awk '{if($1~/^drwxr-x---/) {exit 0} else {exit 1} }' && touch /home/shared/newfile && ls -l /home/shared/newfile | awk '{if($4~/shared/) {exit 0} else {exit 1} }') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 2775 /home/shared && chgrp shared /home/shared && chmod 750 /home/sam && chmod 750 /home/patrick && chmod 750 /home/jessica"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && useradd -s /bin/bash -d /home/jane -m jane && mkdir /app && touch /app/secret.txt && echo 'top secret file' > /app/secret.txt && chmod 640 /app/secret.txt && chown sam:sam /app/secret.txt"}, "description": "Jane needs to access /app/secret.txt, but Sam doesn't want anyone other than them to access it. Grant Jane the required permissions to read the file. Prevent all other users from accessing it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l sam -c 'cat /app/secret.txt' && runuser -l jane -c 'cat /app/secret.txt' && cat /app/secret.txt) | if [ \"$(cat -)\" = \"top secret file\"$'\\n'\"top secret file\"$'\\n'\"cat: /app/secret.txt: Permission denied\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo setfacl -m u:jane:r /app/secret.txt && sudo setfacl -m other::--- /app/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "sudo useradd -s /bin/bash -d /opt/developer -m developer"}, "description": "Create a directory called /opt/projects and make it accessible for the developer user as the owner with full access and the development group also with full access. Set the default permissions for new files created in this directory to rw-r--r-- and for new directories to rwxr-xr-x", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "stat /opt/projects | grep Access | awk '{if ($2~/^[(]075/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "sudo mkdir /opt/projects && sudo chown developer:development /opt/projects && sudo chmod 2775 /opt/projects && sudo chmod g+s /opt/projects && sudo setfacl -m default:user::rw-,default:group::r-x,default:other:r-x /opt/projects && sudo chmod g+s /opt/projects"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/maria -m maria && cd /home/maria && mkdir codes && cd codes && touch code1 && touch code2"}, "description": "Give maria read and write permissions to code1 and read-only permission to code2", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/maria/codes | grep 'code.' | awk '{if (($4!=\"root\" && $4!=\"maria\") || ($1!~/^-..rw./ && $1!~/^-.r.-./)) { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "chmod 640 /home/maria/codes/code2 && chmod 660 /home/maria/codes/code1"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/susan -m susan && useradd -s /bin/bash -d /home/tim -m tim && chmod 777 /testdir && cd /testdir && touch testfile && chown john testfile && chgrp susan testfile && chmod 764 testfile && su - tim"}, "description": "You are Tim, who is trying to read and execute the file /testdir/testfile. How can you achieve this without changing the file or directory permissions?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - tim -c 'cat /testdir/testfile >& /dev/null || exit 1; cd /testdir >& /dev/null || exit 1; ls >& /dev/null' && su - tim -c 'echo \"Success\"'"}, "example": {"type": "command", "data": "sudo chmod o+rx /testdir && chmod g+x /testdir && chgrp susan /testdir && chown tim:john /testdir/testfile && chmod 764 /testdir/testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -m -d /home/john john && mkdir /home/john/test && touch /home/john/test/file && chmod 444 /home/john/test/file && chattr +i /home/john/test/file"}, "description": "Can you modify the file `/home/john/test/file` as user `john`? If so, how?", "evaluation": {"type": "free-form", "answer": "No, the `file` has been set to read-only mode (`chmod 444`) and its attributes have been set to immutable (`chattr +i`). This means that the file cannot be modified, deleted, renamed or even linked to another file. To modify the file as user `john`, the permissions or attributes of the file must be changed first.", "checking": null, "example": null}, "labels": ["permission", "file attributes"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && echo 'secretcode' > /home/jane/gift.txt && chmod 440 /home/jane/gift.txt"}, "description": "As a user with sudo access, grant Tom read-only access to the gift.txt file inside Jane's home directory. Make sure Jane's access to the file remains unchanged.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l jane -c 'cat ~/gift.txt' && runuser -l tom -c 'cat /home/jane/gift.txt') | if [ \"$(cat -)\" = \"secretcode\"$'\\n'\"secretcode\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+r /home/jane/gift.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'testing file permission' > /home/john/testfile && chown john:john /home/john/testfile && chmod 420 /home/john/testfile && su - john"}, "description": "As a new user named `john`, when I execute `cat ~/testfile`, why can't I see the content of the file? Help me fix it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cd ~ && cat testfile | grep 'testing file permission' > /dev/null && echo 0 || echo 1"}, "example": {"type": "command", "data": "chmod 640 ~/testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && cd /home/jack && echo 'test' > test && chmod 600 test && su - jack"}, "description": "execute ~/test and get the output", "evaluation": {"type": "ground-truth", "answer": "test", "checking": null, "example": {"type": "command", "data": "~/test"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/examuser -m examuser && echo 'examuser ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers"}, "description": "How can you add examuser to a new group called \"examgroup\" and make the group the only group that can read/write files in the directory \"/home/examdir\"?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(grep examgroup /etc/group && sudo -u examuser bash -c 'touch /home/examdir/testfile && sudo -g examgroup cat /home/examdir/testfile && echo \"test\" | sudo -u examuser tee /home/examdir/testfile && sudo -u examuser cat /home/examdir/testfile && rm /home/examdir/testfile') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd examgroup && usermod -a -G examgroup examuser && chgrp examgroup /home/examdir && chmod 770 /home/examdir"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && echo 'secret' > /home/mark/.secret && chmod 400 /home/mark/.secret"}, "description": "Only allow the user \"mark\" to access the file /home/mark/.secret", "evaluation": {"type": "ground-truth", "answer": null, "checking": {"type": "command", "data": "(su mark -c 'cat /home/mark/.secret' && (ls -l /home/mark | awk '{print $1}' | grep '^-..------' >/dev/null && echo 'Success') || echo 'Permission error') | tail -n 1"}, "example": {"type": "command", "data": "chmod o-r /home/mark"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && useradd -s /bin/bash -d /home/user3 -m user3 && touch file1 && touch file2 && chown user1 file1 && chown user2 file2 && chmod 777 file1 && chmod 400 file2"}, "description": "Give user3 read and write permission to file1 and no permission to file2", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u user3 cat file1; sudo -u user3 cat file2) | if [ \"$(cat -)\" = \"Hello\\ncat: file2: Permission denied\\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod u+rw file1 && chmod 000 file2 && chown user3 file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "sudo useradd -s /bin/bash -d /home/mark -m mark && cd /home/mark && touch file1 && chmod 444 file1 && chattr +i file1"}, "description": "Add write permission to file1 without changing its immutable attribute", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "lsattr /home/mark/file1 | grep i && chmod +w /home/mark/file1 && lsattr /home/mark/file1 | grep i"}, "example": {"type": "command", "data": "chmod +w /home/mark/file1 && chattr +i /home/mark/file1"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m alice && useradd -m bob && useradd -m charlie && echo 'topsecret' > /home/alice/files && chmod 600 /home/alice/files && chown alice /home/alice/files && su - bob"}, "description": "List the contents of the /home/alice directory without going into that directory.", "evaluation": {"type": "ground-truth", "answer": "files", "checking": null, "example": {"type": "command", "data": "ls /home/alice/"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && echo 'secret_file' > /home/alice/secret_file && chown alice:alice /home/alice/secret_file"}, "description": "Bob wants to read the content of /home/alice/secret_file. He is a member of the group 'bob_group'. Give Bob permission to read the file without giving permissions to others or modifying the owner. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - bob -c 'cat /home/alice/secret_file' | if [ \"$(cat -)\" = \"secret_file\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+r /home/alice/secret_file && chgrp bob_group /home/alice/secret_file"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && touch secret && chmod 600 secret && chown bob:bob secret && su - bob"}, "description": "Bob wants to share the secret file with Alice, but he wants to make sure that only Alice can read it, and no one else can modify or delete it. Help Bob achieve this goal.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo ls -l /home/bob/secret | awk '{if ($1 != \"-rw-------.\") { exit 1; } else { exit 0; } }' && sudo ls -l /home/bob | awk '{if ($3 != \"bob\" || $4 != \"bob\") { exit 1; } else { exit 0; } }' && sudo su -c 'echo \"The secret message\" > /home/bob/secret; chmod 400 /home/bob/secret && chown bob:alice /home/bob/secret' alice && sudo su -c 'echo \"The secret message\" >> /home/bob/secret; rm -f /home/bob/secret' && sudo ls -l /home/bob/secret | awk '{if ($1 != \"-r--------.\") { exit 1; } else { exit 0; } }' && sudo ls -l /home/bob | awk '{if ($3 != \"bob\" || $4 != \"bob\") { exit 1; } else { exit 0; } }' && sudo cat /home/bob/secret | awk '{if ($1 != \"The\" || $2 != \"secret\" || $3 != \"message\") { exit 1; } else { exit 0; } }'"}, "example": {"type": "command", "data": "chmod 400 /home/bob/secret && chown bob:alice /home/bob/secret"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && echo 'allowed ALL=(ALL) NOPASSWD:/bin/ls' >> /etc/sudoers && su - mark"}, "description": "How can I list the contents of root directory (/) using sudo when I don't know the password for it?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo ls / | if [ \"$(cat -)\" = \"bin$'\\n'boot$'\\n'data$'\\n'dev$'\\n'etc$'\\n'home$'\\n'lib$'\\n'lib32$'\\n'lib64$'\\n'libx32$'\\n'media$'\\n'mnt$'\\n'opt$'\\n'proc$'\\n'root$'\\n'run$'\\n'sbin$'\\n'snap$'\\n'srv$'\\n'sys$'\\n'tmp$'\\n'usr$'\\n'var$\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo ls /"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "echo 'test' > /datafile && chmod 770 /datafile && useradd -s /bin/bash -d /home/dave -m dave && useradd -s /bin/bash -d /home/jim -m jim && usermod -a -G dataaccess dave && usermod -a -G dataaccess jim"}, "description": "Make /datafile writable to members of the group 'dataaccess' only", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l dave -c 'echo \"new data\" >> /datafile' && runuser -l jim -c 'echo \"newer data\" >> /datafile' && cat /datafile) | if [ \"$(cat -)\" = \"test\"$'\\n'\"new data\"$'\\n'\"newer data\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+w /datafile && chgrp dataaccess /datafile"}}, "labels": ["permission", "group"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir photos && cd photos && mkdir summer && mkdir winter && touch summer/pic1 && touch summer/pic2 && touch winter/pic3 && chgrp -R jane winter && chmod -R 700 winter && chmod -R o=rwx winter"}, "description": "jane has some photos at her home, ensure that only jane and members of the jane group have access to them and ensure that files can be added, moved and deleted within the photos directory and subdirectories.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo find /home/jane/photos ! -group jane -ls | awk '{print $3}' | uniq && sudo find /home/jane/photos -type f ! -perm 700 -ls && sudo find /home/jane/photos -type d ! -perm 700 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod -R g+rwx,o-rwx /home/jane/photos && chmod -R g+s /home/jane/photos"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/jack -m jack && cd /home && chgrp jack jane && chmod 2770 jane"}, "description": "A new user jamal is added. He must not be able to access jane's home directory, but should be able to access jack's directory. Assign appropriate permissions to achieve this.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo su - jamal -c 'ls /home/jack && ls /home/jane && exit 0' || exit 1"}, "example": {"type": "command", "data": "usermod -aG jack jamal"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "/bin/echo 'Hello, World!' > /home/user/permissions.txt && chmod 0744 /home/user/permissions.txt && chown user:user /home/user/permissions.txt"}, "description": "Create a file named \"permissions.txt\" owned by user \"user\" with permission -rwxr--r--. Print the contents of the file using the cat command.", "evaluation": {"type": "ground-truth", "answer": "Hello, World!", "checking": null, "example": {"type": "command", "data": "cat /home/user/permissions.txt"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /data && useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && groupadd dataaccess && usermod -a -G dataaccess user1 && usermod -a -G dataaccess user2 && chgrp dataaccess /data && chmod 660 /data"}, "description": "Add read and write permission of the /data directory to user1 and user2 respectively, so that they can only access their own files and directories inside the /data directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u user1 bash -c 'touch /data/user1file && chmod 640 /data/user1file && echo \"this is user1's file\" > /data/user1file && echo \"user1's directory\" > /data/user1directory/user1file' && sudo -u user2 bash -c 'touch /data/user2file && chmod 640 /data/user2file && echo \"this is user2's file\" > /data/user2file && echo \"user2's directory\" > /data/user2directory/user2file') && sudo chmod 770 /data && sudo chmod 770 /data/user1directory && sudo chmod 770 /data/user2directory"}, "example": {"type": "command", "data": "sudo chmod 770 /data/user1 && sudo chmod 770 /data/user2"}}, "labels": ["permission", "file system"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir personal && cd personal && touch secret && chmod 400 secret && chown john secret && su - john"}, "description": "Set up a personal directory /home/john/personal and create a file called secret that only the user john can read and edit", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/john/personal/secret | if [ \"$(cat -)\" = \"this is my secret\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 700 /home/john/personal && chmod 600 /home/john/personal/secret && echo 'this is my secret' > /home/john/personal/secret"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /data && chmod 2777 /data && cd /data && touch file1 && touch file2 && chmod 400 file1 && chmod 777 file2 && chattr +i file1"}, "description": "Modify file1 without changing its permissions or modifying file2 using nano or vim", "evaluation": {"type": "ground-truth", "answer": "Sorry, you can't modify this file because it's immutable.", "checking": null, "example": {"type": "command", "data": "nano file2"}}, "labels": ["permission", "file-system"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jim -m jim && touch /home/jim/file1 && chown jim:jim /home/jim/file1 && chmod 622 /home/jim/file1"}, "description": "Give read, write and execute permissions to the owner and the group for file1 without changing its current permissions.", "evaluation": {"type": "ground-truth", "answer": "chmod u+rwx,g+rwx /home/jim/file1", "checking": null, "example": {"type": "command", "data": "chmod u+rwx,g+rwx /home/jim/file1 && ls -l /home/jim/file1 | awk '{if ($1~/^-rwxrwx---/){ exit 0; } else{ exit 1; } }'"}}, "labels": ["permission", "file"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/tina -m tina && cd /home/tina && mkdir work && cd work && touch note.txt && echo 'absolutely confidential' > note.txt && chmod 400 note.txt"}, "description": "As an administrator, you need to add user bob to the group that has access to the /home/tina/work folder including the note.txt file. Make sure bob can read the note.txt file but cannot edit or delete it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u bob ls /home/tina/work/note.txt | if [ \"$(cat -)\" = \"/home/tina/work/note.txt\" ]; then sudo -u bob cat /home/tina/work/note.txt | if [ \"$(cat -)\" = \"absolutely confidential\" ]; then  sudo -u bob sh -c \"echo 'new content' >> /home/tina/work/note.txt 2>/dev/null && exit 1\" || exit 0 ;  else exit 1; fi  ; else exit 1 ; fi"}, "example": {"type": "command", "data": "usermod -aG $(stat -c '%G' /home/tina/work) bob && chown :$(id -gn bob) /home/tina/work/note.txt && chmod 440 /home/tina/work/note.txt"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir testdir && touch testdir/testfile && chmod 740 testdir testdir/testfile"}, "description": "Create a new user called 'testuser' and ensure that the user can read 'testfile' but can't write to it, and can't access 'testdir'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u testuser cat testdir/testfile && sudo -u testuser touch testdir/newfile) | if [ \"$(cat -)\" = \"permission denied\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/testuser -m testuser && chown root:testuser testdir && chmod 740 testdir testdir/testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/mike -m mike && useradd -s /bin/bash -d /home/john -m john && mkdir /home/jane/topsecret && touch /home/jane/topsecret/file.txt && chmod 700 /home/jane/topsecret && chmod 400 /home/jane/topsecret/file.txt && chown jane:jane /home/jane/topsecret/file.txt && echo 'mike ALL=(john) /bin/cat /home/jane/topsecret/file.txt' >> /etc/sudoers && echo 'john ALL=(mike) NOPASSWD:/bin/cat /home/jane/topsecret/file.txt' >> /etc/sudoers"}, "description": "Configure the system so that mike can execute the command `sudo -u john cat /home/jane/topsecret/file.txt` without entering a password, but john cannot execute `sudo -u mike cat /home/jane/topsecret/file.txt`", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u john cat /home/jane/topsecret/file.txt | if [ \"$(cat -)\" = \"TOP SECRET\"$'\\n' ]; then echo 'mike run success and john not run success'; exit 0; else echo 'mike run fail and john run success'; exit 1; fi"}, "example": {"type": "command", "data": ""}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/joe -m joe && chsh -s /bin/bash joe"}, "description": "Change the default login shell of user 'joe' to /bin/bash", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "getent passwd joe | cut -d ':' -f 7 | grep /bin/bash"}, "example": {"type": "command", "data": "chsh -s /bin/bash joe"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && useradd -s /bin/bash -d /home/kate -m kate && useradd -s /bin/bash -d /home/jacob -m jacob && useradd -s /bin/bash -d /home/mike -m mike"}, "description": "Change the group ownership of /home/lisa directory to kate, jacob, and mike only", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "[ $(ls -ld /home/lisa | awk '{print $4}') != \"kate\" ] && [ $(ls -ld /home/lisa | awk '{print $4}') != \"jacob\" ] && [ $(ls -ld /home/lisa | awk '{print $4}') != \"mike\" ]"}, "example": {"type": "command", "data": "chgrp kate /home/lisa && chmod g+rwx /home/lisa && chmod o-rwx /home/lisa"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && echo 'Hello World!' > test && chmod 777 test && chown jane test"}, "description": "As a non-root user, how can you give other users execute permissions to a file you own without giving them write permissions to the file?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l mike -c 'cd /home/jane && test' && runuser -l jack -c 'cd /home/jane && test') | if [ \"$(cat -)\" = \"Hello World!\"$'\\n'\"Hello World!\" ] ; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod +x test && chmod o-rw test"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/sam -m sam && echo 'group qwerty' >> /etc/group && usermod -a -G qwerty john && usermod -a -G qwerty sam"}, "description": "Create a directory called shared under the root directory, which can be accessed by users John and Sam (users must have read, write and execute permissions for this directory). Owners and members of the QWERTY group should have similar permissions, but other users should have no access to this directory or files and directories inside it. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -ld /shared | awk '{if ($1!~/^d..rwxr-xr-x/ || $3!=\"root\" || $4!=\"qwerty\") { exit 1; } else { exit 0; }}' && sudo ls -l / | awk '{if ($NF==\"/shared\" && $1!~/^d..rwxr-xr-x/ || $NF==\"/shared/*\" && $1!~/^-..rwxrwxr-x/) { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "mkdir /shared && chmod 755 /shared && chown root:qwerty /shared && chmod 3770 /shared && touch /shared/f1 && touch /shared/f2 && touch /shared/f3 && chmod 770 /shared/* && chown john:qwerty /shared/f1 && chown sam:qwerty /shared/f2 && chown root:qwerty /shared/f3"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/mike -m mike && cd /home/bob && mkdir files && cd files && touch file1 file2 file3 && chmod 600 file1 && chmod 640 file2 && chmod 644 file3 && cd /home/mike"}, "description": "Bob has a directory called files and there are three files in it. Each file has different permission values as given below: (1) file1: rw------- (2) file2: rw-r----- (3) file3: rw-r--r--. As a mike, add a line 'artificial intelligence' to the end of file2 and file3 without changing the permission values and timestamp of the files", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/bob/files/file2 | tail -n 1 | grep 'artificial intelligence'$; echo $?) && (cat /home/bob/files/file3 | tail -n 1 | grep 'artificial intelligence'$; echo $?) | if [ \"$(cat -)\" = \"0 0\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'artificial intelligence' >> /home/bob/files/file2 && cp --preserve /home/bob/files/file3 file3_tmp && echo 'artificial intelligence' >> file3_tmp && cat file3_tmp > /home/bob/files/file3 && rm file3_tmp"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'top_secret' > /home/john/password.txt && chmod 600 /home/john/password.txt"}, "description": "You need to allow user mike to access /home/john/password.txt, but only give him read permission. Ensure that john's permission on the file is not affected and only mike is added to the file's ACLs.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(getfacl /home/john/password.txt | grep '^user::rw-$' && getfacl /home/john/password.txt | grep '^user:mike:r-$') | if [ \"$(cat -)\" = \"user::rw-\nuser:mike:r-\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "setfacl -m u:mike:r /home/john/password.txt"}}, "labels": ["ACL", "permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && chmod 700 /home/lisa && chown lisa:lisa /home/lisa && su - lisa"}, "description": "lisa is a newly added user, but she can't access her home directory. Why? Fix it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cd ~"}, "example": {"type": "command", "data": "chmod 750 /home/lisa"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir files && cd files && touch doc1 && touch doc2 && touch doc3 && touch ./subdir/doc4 && chown john:john ./subdir && chmod -R 070 ./subdir"}, "description": "John needs to grant read, write and execute permissions to all files and directories inside \"./subdir\" directory for his colleague, Nancy, without giving any other additional permissions. What command should he use?", "evaluation": {"type": "ground-truth", "answer": "chmod -R u+rwx,g+rwx /home/john/files/subdir", "checking": null, "example": {"type": "command", "data": "sudo -u nancy ls /home/john/files/subdir"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/nick -m nick && cd /home/nick && mkdir important && touch important/file.txt && chmod 600 important/file.txt && chown nick important/file.txt &&su - nick"}, "description": "Change the user ownership of /home/nick/important to user 'jim' without changing the group permissions.", "evaluation": {"type": "ground-truth", "answer": null, "checking": {"type": "command", "data": "ls -l /home/nick | grep important | awk '{if ($3==\"jim\" && $4==\"nick\") { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chown jim:nick /home/nick/important"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/tom -m tom && cd /home/tom && echo 'This is a secret message' > message.txt && chmod 0400 message.txt && su - tom"}, "description": "Read the content of the file ~/message.txt without changing its permission or ownership.", "evaluation": {"type": "ground-truth", "answer": "This is a secret message", "checking": null, "example": {"type": "command", "data": "cat ~/message.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/johnny -m johnny && useradd -s /bin/bash -d /home/jane -m jane && cd /home/johnny && mkdir project && cd /home/jane && mkdir backup_project"}, "description": "Give jane access to /home/johnny/project, but not the ability to modify it. Johnny should still have full access to his project folder.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jane ls -l /home/johnny | awk '{if ($1~/^d....../ && $NF~\"project\") { exit 0; } }') && (sudo -u jane ls -l /home/johnny | awk '{if ($1~/^d....../ && $NF~\"project\") { exit 1; } }' && grep 'jane.*project' /etc/group | grep -c jane) | if [ \"$(cat -)\" = \"1\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo chown -R johnny:johnny /home/johnny/project && chmod 755 /home/johnny/project && usermod -a -G johnny jane"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "apt update && apt install sudo -y && useradd -s /bin/bash -d /home/megan -m megan && echo '%sudo   ALL=(ALL:ALL) ALL' >> /etc/sudoers && usermod -aG sudo megan"}, "description": "Create a new user account with the username \"dave\" and a home directory of /home/dave. Make sure that user dave can use sudo, but only if they enter the correct password. Also, create a new file called \"secrets\" in dave's home directory, that only root can read and write to, but dave can execute.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u dave whoami ) 2> /dev/null | if [ \"$(cat -)\" = \"dave\" ]; then echo dave-user-pass | sudo -S id | grep -o 'groups=dave,sudo' && [ -x /home/dave/secrets ] && [[ -r /home/dave/secrets && -w /home/dave/secrets && ! -x /home/dave/secrets ]] && exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/dave -m dave && echo '%sudo   ALL=(ALL:ALL) ALL' >> /etc/sudoers && echo 'dave ALL=(ALL:ALL) ALL' >> /etc/sudoers && mkdir /home/dave && touch /home/dave/secrets && chmod 700 /home/dave/secrets && chown root:root /home/dave/secrets && chmod +x /home/dave && chmod 710 /home/dave"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -g user1 -m user2 && echo 'confidential data' > /home/user1/data && chmod 0600 /home/user1/data && chown user1:user1 /home/user1/data && su - user2"}, "description": "User2 needs access to the confidential data in /home/user1/data, but User1 should not be able to edit the file. Set the appropriate permissions to allow this.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/user1/data && echo 'test' > /home/user1/data && cat /home/user1/data) | if [ \"$(cat -)\" = \"confidential data\"$'\\n'\"test\"$'\\n'\"confidential data\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 0640 /home/user1/data"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && echo 'this is a test' > /home/jane/test && chmod 666 /home/jane/test && su - jane"}, "description": "Change the file permission of /home/jane/test to be executable by all users and get the output of running the file", "evaluation": {"type": "ground-truth", "answer": "this is a test\n", "checking": null, "example": {"type": "command", "data": "chmod a+x /home/jane/test && /home/jane/test"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/tom -m tom && useradd -s /bin/bash -d /home/mike -m mike && groupadd testgroup && usermod -a -G testgroup mike && cd /home/tom && mkdir shared && cd shared && echo 'test' > testfile && chmod 640 testfile && chgrp testgroup testfile"}, "description": "tom have created a directory called shared with a file testfile. mike is also added to the testgroup. mike should be able to access the directory shared and read the file testfile", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - mike -c 'cat /home/tom/shared/testfile' 2> /dev/null | if [ \"$(cat -)\" = \"test\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+r /home/tom/shared && chmod g+r /home/tom/shared/testfile"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'I am John.' > /home/john/note.txt && chmod 444 /home/john/note.txt && chown john:john /home/john/note.txt && su - john"}, "description": "Read the content of /home/john/note.txt file and display it on the terminal.", "evaluation": {"type": "ground-truth", "answer": "I am John.", "checking": null, "example": {"type": "command", "data": "cat /home/john/note.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/mary -m mary && touch /home/john/file && touch /home/mary/file"}, "description": "Set the appropriate permissions so that only mary can read and write to /home/mary/file and only john can read and write /home/john/file. No one else should have any permission to these files.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/john/file | awk '{if ($1~/^-..------/) { exit 0; } else { exit 1; }}'; ls -l /home/mary/file | awk '{if ($1~/^-..------/) { exit 0; } else { exit 1; }}') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 600 /home/john/file && chmod 600 /home/mary/file && chown john /home/john/file && chown mary /home/mary/file"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/mark -m mark && useradd -s /bin/bash -d /home/amy -m amy && mkdir /home/john/files && touch /home/john/files/doc1.txt && touch /home/john/files/doc2.txt && touch /home/john/files/doc3.txt && chown john /home/john/files && chgrp amy /home/john/files && find /home/john/files/ -type f -exec chmod 640 {} + && find /home/john/files/ -type d -exec chmod 750 {} +"}, "description": "There are three users john, mark and amy. john has a directory called files that should only be accessible to him and amy. Ensure that new files and directories created in this directory inherit the group ownership, and that users can only read the files they own.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/files/ | grep -v 'drwxr-x---' | awk '{if ($1~/^-..rw----/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod g+s /home/john/files/ && chmod +t /home/john/files/ && chown john /home/john/files/ && chgrp amy /home/john/files/ && chmod 770 /home/john/files/"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir pictures && touch pictures/pic1 && touch pictures/pic2 && echo 'hello world' > pictures/pic3 && chmod 640 pictures/* && su - john"}, "description": "Change the permission of pictures/pic3 so that john, group john and all others have read and write permissions but do not have execution permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "stat -c \"%a\" /home/john/pictures/pic3 | if [ \"$(cat -)\" = \"664\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 664 /home/john/pictures/pic3"}}, "labels": ["permission", "user", "group"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/cory -m cory && useradd -s /bin/bash -d /home/jerry -m jerry && useradd -s /bin/bash -d /home/tommy -m tommy"}, "description": "Give the user \"tommy\" read and write access to all files and directories in the home directories of \"cory\" and \"jerry\"", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - cory -c 'touch /home/cory/test_file' && su - jerry -c 'touch /home/jerry/test_file_2' && su - tommy -c 'cat /home/cory/test_file && cat /home/jerry/test_file_2') | if [ \"$(cat -)\" = \"\"$'\\n'\"\"$'\\n'\"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "setfacl -R -m u:tommy:rwX /home/cory && setfacl -R -m u:tommy:rwX /home/jerry"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && cd /home/mark && mkdir documents && cd documents && touch file1 && touch file2 && touch file3"}, "description": "Give user 'tom' the ability to read, write to the 'documents' directory and execute the files inside the directory, but not able to list the contents of 'documents'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo su tom -c 'ls /home/mark/documents' && chmod o+x /home/mark/documents/* && su - tom -c 'ls -al /home/mark/documents' && su - tom -c 'touch /home/mark/documents/file4' && su - tom -c 'echo test > /home/mark/documents/file1 && cat /home/mark/documents/file1') | if [ \"$(cat -)\" = \"file1\nfile2\nfile3\n\ntest\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+x /home/mark/documents/* && chmod 711 /home/mark/documents"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir test && cd test && touch file1 && touch file2 && chmod 700 /home/john"}, "description": "Give read, write, and execute permission to user john for file1 and only read permission to file2", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/john/test/file1 | grep -q '\\-rwx------') && (ls -l /home/john/test/file2 | grep -q '\\-r--------') && (cd /home/john/test && sudo -u john sh -c '[ -r file2 ] && [ ! -w file2 ] && [ ! -x file2 ] && [ -r file1 ] && [ -w file1 ] && [ -x file1 ]') && echo true"}, "example": {"type": "command", "data": "chmod u=rwx,g=,o= file1 && chmod u=r,g=r,o= file2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "chmod 644 /etc/passwd && chmod 744 /etc && chmod 755 / && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/susan -m susan"}, "description": "Set permission for /, /etc, /etc/passwd in a way that only root can write, but everyone can read. Then allow john to write to /home/john and susan to write to /home/susan but not vice-versa.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -ld / | awk '{if ($1 !~ /drwxr-xr-x/) { exit 1; } else {exit 0; }}') || (ls -ld /etc | awk '{if ($1 !~ /drwxr--r--/) { exit 1; } else {exit 0; }}') || (ls -l /etc/passwd | awk '{if ($1 !~ /-rw-r--r--/) { exit 1; } else {exit 0; }}') || (ls -ld /home/john | awk '{if ($1 !~ /drwxr-xr--/) { exit 1; } else {exit 0; }}') || (ls -ld /home/susan | awk '{if ($1 !~ /drwxr-xr--/) { exit 1; } else {exit 0; }}') || (sudo -u john touch /home/john/test && sudo -u susan touch /home/susan/test 2>&1 >/dev/null && sudo -u john touch /home/susan/fail 2>&1 >/dev/null && sudo -u susan touch /home/john/fail 2>&1 >/dev/null && (ls -l /home/john | awk '{if ($1 !~ /-rw-r--r--|[d-].*r-x.*|drwx------/) { exit 1; } else {exit 0; }}')  && (ls -l /home/susan | awk '{if ($1 !~ /-rw-r--r--|[d-].*r-x.*|drwx------/) { exit 1; } else {exit 0; }}')) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 644 /etc/passwd && chmod 744 /etc && chmod 755 / && chmod 744 /home/john && chmod 744 /home/susan && chown john /home/john && chown susan /home/susan"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir documents && cd documents && touch file1 && touch file2 && echo 'hello world' > file1 && echo 'goodbye world' > file2 && chmod -R 700 /home/john/documents && chown -R john:john /home/john/documents && su - john"}, "description": "Change the permissions of file2 so that only the owner can read and write to it, while still having the owner and group have full permissions to the rest of the directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/documents/file1 /home/john/documents/file2 | awk '{if ($1!~/^-rwx------/) { exit 1; }}"}, "example": {"type": "command", "data": "chmod 600 /home/john/documents/file2"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/anna -m anna && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/carl -m carl && touch /file && chown anna:bob /file && chmod 640 /file"}, "description": "Anna can read and write to /file, while Bob and Carl can only read it. How can you make it so that Anna can still read and write to /file, while Bob and Carl cannot read it at all? ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l anna -c 'echo test > /file' && runuser -l anna -c 'cat /file') | if [ \"$(cat -)\" = \"test\"$'\\n'\"test\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o-r /file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m jenny && useradd -m john && useradd -m james && echo 'secret file content' > /home/jenny/secret.txt && echo 'check this out' > /home/john/notes.txt && echo 'locked file' > /home/james/locked.txt && chattr +i /home/james/locked.txt && chown james /home/james/locked.txt"}, "description": "Ensure that only the user who created the file can delete or rename it. Hide one file so it won't be readily visible to most users.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "[[ -w /home/jenny/secret.txt ]] && [[ $(lsattr /home/james/locked.txt) == '----i--------e-' ]] && [[ $(ls /home/john/) != 'notes.txt' ]] && [[ $(ls /home/jenny/) == 'secret.txt' ]]"}, "example": {"type": "command", "data": "chmod 600 /home/jenny/secret.txt && chattr +i /home/james/locked.txt && chattr +a /home/john/notes.txt && mv /home/john/notes.txt /home/john/.notes"}}, "labels": ["permission", "security"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/employee -m employee && useradd -s /bin/bash -d /home/manager -m manager && chown manager:manager /home/manager && mkdir /shared_folder && chgrp manager /shared_folder && chmod g+rwx /shared_folder"}, "description": "Create a file inside /shared_folder and ensure that both 'employee' and 'manager' can read the file, but only 'manager' can write to the file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "echo 'test123' > /shared_folder/new_file && su - employee -c 'cat /shared_folder/new_file' | if [ \"$(cat -)\" = \"test123\" ]; then exit 0; else exit 1; fi && su - manager -c 'echo \"write\" >> /shared_folder/new_file' && su - employee -c 'echo \"no_write\" >> /shared_folder/new_file' && su - employee -c 'cat /shared_folder/new_file' | if [ \"$(cat -)\" = \"test123\\nno_write\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 664 /shared_folder/new_file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && useradd -s /bin/bash -d /home/john -m john && echo 'mike ALL=(john) NOPASSWD:/usr/bin/find' >> /etc/sudoers && echo 'mike' > /home/mike/mikefile && echo 'john' > /home/john/johnfile && chown root /home/mike/mikefile && chmod 600 /home/mike/mikefile"}, "description": "As mike, execute `find` command as john and get the list of files inside /home/john", "evaluation": {"type": "ground-truth", "answer": "/home/john/johnfile", "checking": null, "example": {"type": "command", "data": "sudo -u john /usr/bin/find /home/john"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/ben -m ben && echo \"secret data\" > /home/ben/secret.txt && chmod 600 /home/ben/secret.txt"}, "description": "Allow group members to only read and execute /home/ben directory and its contents. But the members should not be able to delete, rename or modify the secret.txt file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "( ls /home/ben/secret.txt && touch /tmp/test && rm -f /home/ben/test && mv /home/ben/secret.txt /home/ben/secret2.txt && echo \"new data\" > /home/ben/secret.txt && cat /home/ben/secret.txt && echo \"test\" > /home/ben/test && cat /home/ben/test ) | if [ \"$(cat -)\" = \"secret data\"$'\\\n''\\\n''\\\n''new data''test' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "(chgrp -R somegroup /home/ben && chmod -R 570 /home/ben && chmod -R 700 /home/ben/secret.txt && chmod 750 /home/ben)"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && cd /home/jack && echo 'hello, world!' > test.txt && chmod 777 test.txt && chown jack test.txt && su - jack"}, "description": "Read the contents of ~/test.txt and output it to the terminal", "evaluation": {"type": "ground-truth", "answer": "hello, world!", "checking": null, "example": {"type": "command", "data": "cat ~/test.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jenny -m jenny && useradd -s /bin/bash -d /home/mark -m mark && useradd -s /bin/bash -d /home/matt -m matt && mkdir /secret && cd /secret && touch financial.txt && echo 'TOP SECRET FINANCIAL REPORT' > financial.txt && chmod 640 financial.txt && touch personal.txt && echo 'JENNY\u2019S PERSONAL NOTES' > personal.txt && chown jenny:jenny personal.txt && chmod 600 personal.txt && touch login.txt && echo 'LOGIN CREDENTIALS' > login.txt && chown mark:mark login.txt && chmod 700 login.txt && su - jenny"}, "description": "Read the contents of /secret/financial.txt and write it to a new file called /home/jenny/finance.txt", "evaluation": {"type": "output", "answer": "TOP SECRET FINANCIAL REPORT\n", "checking": null, "example": {"type": "command", "data": "cp /secret/financial.txt /home/jenny/finance.txt && cat /home/jenny/finance.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && cd /home/mike && mkdir testdir && cd testdir && touch file.txt && chmod 444 file.txt && chattr +i file.txt"}, "description": "You have the root access of the system. Write a command to delete the file.txt from testdir. However, you cannot modify the file permissions and can only perform this operation by directly accessing the file as mike's home folder.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "[ ! -w /home/mike/testdir/file.txt ] && sudo rm /home/mike/testdir/file.txt && sudo ls -l /home/mike/testdir/file.txt | awk '{if ($1~/^----------/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "sudo -u mike rm /home/mike/testdir/file.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && useradd -s /bin/bash -d /home/jack -m jack && useradd -s /bin/bash -d /home/bill -m bill && useradd -s /bin/bash -d /home/tom -m tom && mkdir /projects && cd /projects && mkdir proj1 && mkdir proj2 && cd proj1 && touch notes && touch readme && cd ../proj2 && touch notes && touch readme && cd /projects && usermod -a -G tom proj1 && usermod -a -G jack proj2 && chmod -R g+w /projects && chgrp -R tom proj1 && chgrp -R jack proj2"}, "description": "There are two projects in /projects, proj1 belongs to group tom and proj2 belongs to group jack. Grant read and write permissions to all members of respective groups on its files. Ensure new files and directories created inherit the group ownership of the parent directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /projects/proj1 -type f ! -perm 664 -ls && find /projects/proj2 -type f ! -perm 664 -ls && find /projects/proj1 -type d ! -perm 2775 -ls && find /projects/proj2 -type d ! -perm 2775 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod -R g+rwX /projects && find /projects -type d -exec chmod g+s {} + && chgrp -R tom /projects/proj1 && chgrp -R jack /projects/proj2"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /protected && echo 'store secret data' > /protected/secret && touch /protected/coverup && chmod 777 /protected && chmod 766 /protected/secret && chown root:root /protected/secret && chmod 400 /protected/coverup"}, "description": "Create a symlink at /coverup that points to the secret file inside /protected directory. Ensure that the symlink does not expose the content of the secret file to normal users and is only accessible by members of a group 'managers'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /coverup || true) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi; (stat /coverup || true) | grep -q 'Access: (0660' && stat /coverup | grep -q 'Uid: ( 0/' && stat /coverup | grep -q 'Gid: ( 1001/'"}, "example": {"type": "command", "data": "ln -sf /protected/secret /coverup && chown :managers /coverup && chmod 660 /coverup"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/jenny && chmod 777 /home/jenny && useradd -s /bin/bash -d /home/jenny -m jenny"}, "description": "Grant permissions for jenny to create and delete files in the /home/jenny directory, but not to delete or rename the directory itself. Also, make sure that the permissions are set properly so that the files and directories within it cannot be accessed by other users or groups", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -ld /home/jenny | awk '{if ($1~/drwxrwx---/) { exit 0; } else { exit 1; }}' && (runuser -l jenny -c 'touch /home/jenny/test_file && rm /home/jenny/test_file' && touch /home/jenny/outsider_test && runuser -l jenny -c 'rm /home/jenny/outsider_test' && runuser -l jenny -c 'mkdir /home/jenny/new_dir && rm -r /home/jenny/new_dir' && mkdir /home/jenny/outsider_dir && runuser -l jenny -c 'rm -r /home/jenny/outsider_dir') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 700 /home/jenny && chmod +t /home/jenny"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && cd /home/mark && mkdir files && cd files && touch file1 && touch file2 && touch file3 && chmod 600 file1 && chmod 640 file2 && chmod 644 file3"}, "description": "What are the permissions for the files in /home/mark/files/ directory? Also, explain the difference between them.", "evaluation": {"type": "ground-truth", "answer": "600 for file1, 640 for file2, and 644 for file3. The first digit denotes the owner's permission, the second digit denotes the group's permission, and the last digit denotes everyone else's permission.", "checking": null, "example": {"type": "command", "data": "ls -l /home/mark/files/"}}, "labels": ["permission", "user", "group"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -d /home/richard -s /bin/bash richard && mkdir /home/richard/test && cd /home/richard/test && touch testfile && chown richard:richard testfile && chmod g+w testfile && chmod o-r testfile && chmod +t ."}, "description": "Set 'richard' as the owner of the 'testfile' and grant the group the ability to write to it. Deny anyone outside of the owner and group from reading the file. Set the sticky bit on the directory 'test'.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -lh /home/richard/test | awk '{if ($1~/drwxrwx-wt/ && $3==\"richard\" && $4==\"richard\") { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod o-r /home/richard/test/testfile && chmod g+rwx /home/richard/test/testfile && chmod +t /home/richard/test"}}, "labels": ["permission", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/eric -m eric && touch /var/log/private_log && chmod o-r /var/log/private_log && chown eric /var/log/private_log"}, "description": "Set permissions for /var/log/private_log file so that only the owning user can read and write it, and no one else can access it, not even members of the owning user's group. Create another user and attempt to access the file to make sure the permissions have been correctly set.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo su - testuser -c 'cat /var/log/private_log' | if [ \"$(cat -)\" = \"cat: /var/log/private_log: Permission denied\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 0600 /var/log/private_log"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && echo 'alice ALL = (root) NOPASSWD: /usr/bin/passwd' >> /etc/sudoers && su - alice"}, "description": "Alice wants to change her password without giving her admin password. Add her to the sudoers list so that she can run `sudo passwd` but no other command with sudo.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(echo newpassword && echo newpassword) | sudo passwd alice && sudo whoami | if [ \"$(cat -)\" = \"root\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": ""}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/david -m david && useradd -s /bin/bash -d /home/anna -m anna && mkdir /data && chmod 770 /data && chown :dataaccess /data"}, "description": "There is a directory called /data that contains sensitive files that should only be accessible to members of the group \"dataaccess\". You want to allow david and anna to access the directory as if it was their own home directory. Set the appropriate permissions so that david and anna can view, modify and delete files in the /data directory as if they own them.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u david touch /data/david_test.txt && sudo -u anna touch /data/anna_test.txt && cat /data/david_test.txt && cat /data/anna_test.txt) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+s /data && chown :dataaccess /data && setfacl -Rm u:david:rwx,u:anna:rwx /data"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/sam -m sam && useradd -s /bin/bash -d /home/mike -m mike"}, "description": "Set permissions on /home/sam to allow john and mike to read and write, but not execute, and disallow any access to other users including root.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l john -c 'ls /home/sam' && runuser -l mike -c 'ls /home/sam' && ls /home | grep 'drwx------ sam' && ls -ld /home/sam | awk '{if ($1~/^drwx------/ && $3==\"sam\" && $4==\"sam\") { exit 0; } else { exit 1; }}') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 660 /home/sam && chown sam:sam /home/sam && chmod 700 /home/sam"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/hannah -m hannah && useradd -s /bin/bash -d /home/deborah -m deborah && echo 'hannah ALL=(deborah) NOPASSWD:/bin/chmod' >> /etc/sudoers"}, "description": "Allow hannah to execute /bin/chmod commands as deborah without using a password. Then, ensure that hannah has write permissions to a file owned by deborah without changing ownership.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u deborah touch /home/deborah/test && touch /home/hannah/test && sudo -u deborah chmod 644 /home/deborah/test && sudo -u deborah ls -l /home/deborah/test | awk '{if ($1~/^-rw-r--r--/ && $3~/^deborah$/ && $4~/^hannah$/) { exit 0; } else { exit 1; } }')"}, "example": {"type": "command", "data": "sudo chmod u+s /bin/chmod && sudo -u deborah touch /home/deborah/test && touch /home/hannah/test && sudo chmod g+w /home/deborah/test"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m alice && useradd -m bob && echo 'hello alice!' > alice_file && echo 'hello bob!' > bob_file && chown alice:alice alice_file && chown bob:bob bob_file"}, "description": "Change the Linux permissions so that only the owners can read their respective file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat alice_file | grep 'hello alice!') && (! cat bob_file) && (chmod 600 alice_file && chmod 600 bob_file && su - bob -c 'cat ~/bob_file' | grep 'hello bob!') && (! su - alice -c 'cat ~/alice_file')"}, "example": {"type": "command", "data": "chmod 400 alice_file && su - bob -c 'chmod 400 ~/bob_file'"}}, "labels": ["permission", "ownership"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/kate -m kate && echo 'kate ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && mkdir /var/www && touch /var/www/index.html"}, "description": "Give user 'kate' write permission to index.html file located at /var/www/ directory using chmod command", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u kate echo 'Hello World' > /var/www/index.html && sudo cat /var/www/index.html | if [ \"$(cat -)\" = \"Hello World\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod u+w /var/www/index.html"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'This is a secret message' > /home/john/secret.txt && chmod 400 /home/john/secret.txt"}, "description": "As an administrator, grant read permissions on /home/john/secret.txt to user tom without changing the file ownership", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l john -c 'cat /home/john/secret.txt' && runuser -l tom -c 'cat /home/john/secret.txt') | if [ \"$(cat -)\" = \"This is a secret message\"$'\\n'\"This is a secret message\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "setfacl -m u:tom:r /home/john/secret.txt"}}, "labels": ["permission", "ACL"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && cd /home/alice && mkdir photos && cd photos && touch pic1 && touch pic2 && touch pic3 && chmod 777 ."}, "description": "alice wants to allow only herself and bob to read and execute anything inside of the \"photos\" directory and its subdirectories; any new files added to the \"photos\" directory or its subdirectories should automatically inherit these permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/alice/photos -type d ! -perm 770 -ls && find /home/alice/photos -type f ! -perm 440 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 771 /home/alice/photos && chown alice:bob /home/alice/photos && chmod g+s /home/alice/photos && setfacl -R -m u:bob:r-x /home/alice/photos && setfacl -R -m o::- /home/alice/photos"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && chown user1:user2 /home/user1 && chown user2:user1 /home/user2"}, "description": "Create two users with home directories. Set the home directory of user1 such that user2 can access the directory, but not its contents and vice versa. Test the permissions such that user1 can create a file in user2's directory but not edit the file, and user2 can edit the file but not view its contents. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo su - user1 -c 'echo test1 > /home/user2/testfile && cat /home/user2/testfile' > /dev/null 2>&1 && test -w /home/user2/testfile && ! test -r /home/user2/testfile && sudo su - user2 -c 'echo test2 >> /home/user2/testfile && cat /home/user2/testfile' > /dev/null 2>&1 && test -w /home/user2/testfile && test -r /home/user2/testfile) || (sudo su - user1 -c 'echo test1 > /home/user2/testfile && cat /home/user2/testfile' > /dev/null 2>&1 && test -r /home/user2/testfile && ! test -w /home/user2/testfile && sudo su - user2 -c 'echo test2 >> /home/user2/testfile && cat /home/user2/testfile' > /dev/null 2>&1 && test -w /home/user2/testfile) || (sudo su - user2 -c 'echo test2 > /home/user1/testfile && test -r /home/user1/testfile' > /dev/null 2>&1 && test -w /home/user1 && ! test -r /home/user1/testfile && sudo su - user1 -c 'echo test1 >> /home/user1/testfile && cat /home/user1/testfile' > /dev/null 2>&1 && test -w /home/user1/testfile && test -r /home/user1/testfile) || (sudo su - user2 -c 'echo test2 > /home/user1/testfile && test -r /home/user1/testfile' > /dev/null 2>&1 && ! test -w /home/user1/testfile && test -r /home/user1/testfile && sudo su - user1 -c 'echo test1 >> /home/user1/testfile && cat /home/user1/testfile' > /dev/null 2>&1 && test -w /home/user1/testfile)"}, "example": {"type": "command", "data": "chmod 770 /home/user1 && chmod 770 /home/user2 && setfacl -m user:user2:r-x /home/user1 && setfacl -m user:user1:r-x /home/user2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/susan -m susan && useradd -s /bin/bash -d /home/lucy -m lucy"}, "description": "Create a group called 'techies', and add users john and susan to the group. Then, create a directory called '/techreports' that is owned by lucy and is writable by the 'techies' group, but not by other users.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -ld /techreports | grep '^drwxrws---' >/dev/null 2>&1; echo $?) && (ls -l / | grep techreports | awk '{if ($3==\"lucy\" && $4~/^techies$/) { exit 0; } else { exit 1; }}')"}, "example": {"type": "command", "data": "groupadd techies && usermod -a -G techies john && usermod -a -G techies susan && chmod 2750 /techreports && chown lucy:techies /techreports"}}, "labels": ["group", "permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir documents && cd documents && mkdir public private && touch public/file1 private/file2 && chmod 777 public && chmod 400 private && find . -exec touch -t 202204250830 {} +"}, "description": "John wants to share his public folder with his friend, Robert. However he doesn't want anyone else to access it. Help John to add Robert to the 'johngroup' group and set permissions such that only members of 'johngroup' have read and execute access to the public directory while still ensuring that other users cannot access it. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/john/documents | grep public && ls -l /home/john/documents/public | grep 'drwxr-x---' && grep -q 'johngroup:' /etc/group && groups robert | grep johngroup) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd johngroup && usermod -a -G johngroup robert && chmod 770 /home/john/documents/public && chown john:johngroup /home/john/documents/public"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/user1 && mkdir /home/user2 && mkdir /home/user3 && touch /home/user1/file1 && touch /home/user2/file2 && touch /home/user3/file3"}, "description": "Give user1 permission to access and modify files belonging to user2 and user3. However, user2 and user3 should not have any access to files belonging to user1.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - user2 -c 'echo test > file2 && cat file2' &> /dev/null && su - user3 -c 'echo test > file3 && cat file3' &> /dev/null && su - user1 -c 'cat /home/user2/file2 && echo test1 > /home/user2/file2 && cat /home/user2/file2' &> /dev/null && su - user1 -c 'cat /home/user3/file3 && echo test2 > /home/user3/file3 && cat /home/user3/file3' &> /dev/null) | if [ \"$(cat -)\" = \"test1$'\\n'test2\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod -R 700 /home/user1 && chmod -R 770 /home/user2 && chmod -R 770 /home/user3 && chown -R user2:user2 /home/user2 && chown -R user3:user3 /home/user3"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir ~/data && chmod 770 ~/data && sudo groupadd dataaccess && sudo chgrp dataaccess ~/data && sudo chmod g+s ~/data"}, "description": "Create a new group 'dataaccess' and set group ownership for directory ~/data to the 'dataaccess' group. Ensure that new files and directories created in this directory inherit the group ownership.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -ld ~/data | awk '{if ($1~/^drwxrws--t/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "sudo groupadd dataaccess && sudo chgrp dataaccess ~/data && sudo chmod g+s ~/data"}}, "labels": ["permission", "user", "group"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/mary -m mary && echo 'Groupname: it' >> /etc/group && usermod -a -G it john && chgrp it /home/john && chmod 740 /home/john && chmod 540 /home/mary"}, "description": "John can access all files and directories inside his home directory, but Mary is unable to access files and directories inside John's home directory. Mary should have access to the files and directories inside her own home directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -H -u john ls /home/john && sudo -H -u john ls /home/mary) | if [ \"$(cat -)\" = \"a\ta/new\ttest\tlost+found\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod -R 750 /home/john && chmod -R 750 /home/mary && chmod g+s /home/john && setfacl -R -m u:mary:rx /home/mary"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /opt/myapp && cd /opt/myapp && touch config.ini && touch log.txt && mkdir data && touch data/db.sqlite && chown -R root:www-data /opt/myapp && chmod -R 750 /opt/myapp && chmod 640 /opt/myapp/config.ini && chmod 660 /opt/myapp/log.txt && chmod -R 770 /opt/myapp/data && chmod 660 /opt/myapp/data/db.sqlite"}, "description": "You have a web application installed in /opt/myapp, which is owned by root and should be accessed by the webserver running as www-data. The config.ini file should only be readable by root, and the log.txt file should be readable and writable by root, but not executable. The data directory should be accessible by both root and www-data, but files created in this directory should not be executable. The db.sqlite database file in the data directory should be readable and writable by both root and www-data, but not executable. Set permissions accordingly.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -ld /opt/myapp /opt/myapp/config.ini /opt/myapp/log.txt /opt/myapp/data /opt/myapp/data/db.sqlite | awk '{if ($1~/^-rwxr-x---/) { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "chmod -R g+w /opt/myapp/data && chmod -R g-x /opt/myapp && chmod 640 /opt/myapp/config.ini && chmod 640 /opt/myapp/log.txt && chmod 660 /opt/myapp/data/db.sqlite"}}, "labels": ["permission", "file ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && ln -s /etc/shadow /home/lisa/home_lisa_shadow && chmod 666 /home/lisa/home_lisa_shadow"}, "description": "As a normal user, find a way to read the /etc/shadow file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(grep -q '^lisa:' /home/lisa/home_lisa_shadow && grep '^lisa:' /home/lisa/home_lisa_shadow | sed -n 's/^lisa://p') | if [ \"$(cat -)\" = \"*LK*\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 644 /home/lisa/home_lisa_shadow && ln -sf /etc/passwd /home/lisa/home_lisa_password && chmod 400 /home/lisa/home_lisa_password && su - lisa && cat /home/lisa/home_lisa_password"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jake -m jake && useradd -s /bin/bash -d /home/bill -m bill && usermod -a -G bill jake && cd /home/jake && mkdir finances && cd finances && touch budget.txt && touch expenses.txt"}, "description": "Set permissions to ensure that only the owner, jake, can read/write both files while only the group, bill, can read budget.txt. Other users should have no access to the finances directory or its contents..", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/jake/finances/budget.txt | awk '{if ($1~/^-..r-----/) { exit 0; } else { exit 1; }}' && ls -l /home/jake/finances/expenses.txt | awk '{if ($1!~/^-..------/) { exit 1; } else { exit 0; }}' && (find /home/jake/finances -type f -exec sh -c 'if [[ $(stat -c \"%a %u %g\" \"{}\") != \"600 $(id -u jake) $(id -g bill)\" ]]; then exit 1; fi' \\; 2>/dev/null && find /home/jake/finances -type d -exec sh -c 'if [[ $(stat -c \"%a %u %g\" \"{}\") != \"700 $(id -u jake) $(id -g jake)\" ]]; then exit 1; fi' \\; 2>/dev/null)) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 /home/jake/finances/budget.txt && chmod 600 /home/jake/finances/expenses.txt && chmod 700 /home/jake/finances && chown jake:bill /home/jake/finances/*"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /project && cd /project && touch index.html && chmod 664 index.html"}, "description": "Add a new file, style.css, to the /project directory and ensure that it has read-write permissions for the owner, read-only permissions for the group, and no permissions for others.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /project/style.css | grep -e \"^-rw-r-----\" | wc -l"}, "example": {"type": "command", "data": "cd /project && touch style.css && chmod 640 style.css"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && useradd -d /home/federica -m federica && useradd -d /home/giulia -m giulia && echo 'password' | passwd emma --stdin && mkdir /home/emma/secret && touch /home/emma/secret/file && chmod 400 /home/emma/secret/file && chown emma /home/emma/secret/file"}, "description": "Give user federica permission to read but not write to /home/emma/secret/file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - federica -c 'cat /home/emma/secret/file') | if [ \"$(cat -)\" = \"Permission denied\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod u=r,g=r,o= /home/emma/secret/file"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && echo 'This is a test file.' > /home/jane/test && chmod 444 /home/jane/test && chown jane /home/jane/test && su - jane"}, "description": "Open the file ~/test in read-only mode, append 'new content' to it and save changes", "evaluation": {"type": "ground-truth", "answer": "Permission denied", "checking": null, "example": {"type": "command", "data": "echo 'new content' | sudo tee -a ~/test"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/alex && touch /home/alex/testfile && chmod 700 /home/alex && chmod 600 /home/alex/testfile && chown alex:alex /home/alex/testfile && useradd -s /bin/bash -d /home/jack -m jack"}, "description": "Grant read access to jack for the /home/alex/testfile, and ensure that no one else can access it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jack cat /home/alex/testfile && sudo -u nobody cat /home/alex/testfile) | if [ \"$(cat -)\" = \"test content\"$'\\n'$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 400 /home/alex/testfile && chown alex:jack /home/alex/testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && echo 'jane ALL=(ALL) NOPASSWD: /bin/cat' >> /etc/sudoers && su - jane"}, "description": "Create a file called secret.txt in Jane's home directory, add the text \"This is a secret!\" to the file, and make it readable and writable only by Jane. Use sudo to view the contents of the file without logging in as Jane.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo cat /home/jane/secret.txt | grep -q 'This is a secret!' && sudo ls -l /home/jane/secret.txt | awk '{if ($1 ~ /^-rw-------/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "echo 'This is a secret!' > /home/jane/secret.txt && chmod 600 /home/jane/secret.txt"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/kelly -m kelly && cd /home/kelly && touch file1 && chmod 740 file1 && chown kelly:kelly file1 && useradd -s /bin/bash -d /home/sam -m sam && chsh -s /bin/false sam"}, "description": "How can kelly give read permission to sam for a file that kelly owns, without compromising any other permissions or deleting the file?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo runuser -l sam -c 'cat /home/kelly/file1' | if [ \"$(cat -)\" = \"\" ]; then exit 1; else exit 0; fi"}, "example": {"type": "command", "data": "chmod o+r /home/kelly/file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/ryan -m ryan && useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/sam -m sam && echo 'This is a test file.' > testfile && chown ryan:ryan testfile"}, "description": "Change the ownership of 'testfile' to jane:ryan, but make sure that only jane, ryan, and sam can continue to read and write to the file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(getfacl testfile | awk '{print $1,$3,$4}' | wc -l | if [ \"$(cat -)\" -eq 3 ]; then getfacl testfile | awk '{print $1,$3,$4}' | grep -q 'ryan jane sam' && exit 0; else exit 1; fi) && ls -l testfile | awk '{if ($3==\"jane\" && $4==\"ryan\") { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chown jane:ryan testfile && chmod 760 testfile && setfacl -m u:ryan:rw-,u:jane:rw-,u:sam:rw- testfile"}}, "labels": ["permission", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && cd /home/alex && mkdir projects && cd projects && touch project1 && touch project2 && touch project3 && chmod 770 ."}, "description": "Only allow the user and the group to have access to the files inside /projects directory and no one else should have any access. Also, don't allow deleting the files in the directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo ls -l -R /home/alex/projects | awk '{if (!/^[-d]..[r-][w-]--..[r-][w-]--./) { exit 1; } else { exit 0; }}' && sudo find /home/alex/projects/* -type f -exec test ! -w {} \\; -print | if [ \"$(cat -)\" = \"/home/alex/projects/project1\n/home/alex/projects/project2\n/home/alex/projects/project3\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 770 /home/alex/projects && chown -R alex:alex /home/alex/projects"}}, "labels": ["permission", "security"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/smith -m smith && useradd -s /bin/bash -d /home/rob -m rob && cd /home/john && mkdir dir1 && mkdir dir2 && touch file1.txt && touch file2.txt && chmod 600 file1.txt && chmod 644 file2.txt && chown john file1.txt && chgrp smith file2.txt"}, "description": "In /home/john, make it so that only john can read and change file1.txt. Make it so that only smith can read and change file2.txt. Make it so that no one else can access any of the files. Hint: You may need to add the users into appropriate groups.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - john -c 'echo hello > /home/john/file1.txt && cat /home/john/file1.txt && chmod 400 /home/john/file1.txt && echo hi > /home/john/file1.txt && cat /home/john/file1.txt' && su - smith -c 'echo hello > /home/john/file2.txt && cat /home/john/file2.txt && chmod 400 /home/john/file2.txt && echo hi > /home/john/file2.txt && cat /home/john/file2.txt') | if [ \"$(cat -)\" = \"hello$'\\n'hi\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chown john file1.txt && chgrp smith file2.txt && chmod 600 file1.txt && chmod 600 file2.txt && chmod 700 dir1 && chmod 700 dir2"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/testuser -m testuser && cd /home/testuser && echo 'I have permission' > test && chown root test && chmod 4755 test && su - testuser"}, "description": "What is the output of `./test`?", "evaluation": {"type": "ground-truth", "answer": "I have permission", "checking": null, "example": {"type": "command", "data": "./test"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir myfolder && touch myfolder/myfile && chmod -r myfolder"}, "description": "You have created a folder 'myfolder' inside the home directory of the user 'john'. Also, you have created a file 'myfile' inside that folder. But the folder has lost all its read permissions. Provide a command to recover the read permission on 'myfolder' and display the contents of 'myfile'.", "evaluation": {"type": "ground-truth", "answer": "", "checking": "ls -l /home/john/myfolder | awk '{if($1~/^d[^r-xw]/) { exit 1;}}' && cat /home/john/myfolder/myfile | awk '{if($0~/./) {output=\"Access Denied!\"; exit 1}} END{if(output==\"\"){output=\"$0\"}} END{print output}'", "example": {"type": "command", "data": "chmod +r myfolder && cat myfolder/myfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m alice && useradd -m bob && groupadd shared && usermod -a -G shared alice && usermod -a -G shared bob && mkdir /home/shared && touch /home/shared/file1 && chown root:shared /home/shared/file1 && chmod 640 /home/shared/file1"}, "description": "Alice created a file under /home/shared and Bob wants to delete it, but he gets a permission denied error. Help Bob delete the file without changing the ownership/permission of the file or directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "rm /home/shared/file1 && ls /home/shared | grep file1"}, "example": {"type": "command", "data": "chmod g+w /home/shared && chmod g+s /home/shared"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m bob && echo '123456' > /home/bob/secret.txt && chown bob:bob /home/bob/secret.txt && chmod 400 /home/bob/secret.txt && su - bob"}, "description": "Bob wants to securely share his secret file to Alice, who is also a user in the system. How can Bob achieve this using only file permissions, without compromising the security of other files or users in the system? Note that Alice should only be able to read the file, not modify or delete it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/bob/secret.txt && sudo -u alice cat /home/bob/secret.txt) | if [ \"$(cat -)\" = \"123456\"$'\\n'\"123456\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G bob alice && chmod o-rwx /home/bob && chmod 440 /home/bob/secret.txt"}}, "labels": ["permission", "security"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && useradd -s /bin/bash -d /home/tim -m tim && useradd -s /bin/bash -d /home/larry -m larry && cd /home/sam && echo '1234' >> file1.txt && cd /home/tim && echo '5678' >> file2.txt && cd /home/larry && echo '9632' >> file3.txt && chmod 440 /home/sam/file1.txt && chmod 440 /home/tim/file2.txt && chmod 440 /home/larry/file3.txt"}, "description": "List all files and directories in /home directory, but hide file1.txt, file2.txt and file3.txt from user tim and larry, also sort the list by modification time in chronological order", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo ls -lht -d /home/* | awk '{if ($1~/rw.{4}---/) {exit 1;} else {print $0;}}'"}, "example": {"type": "command", "data": "sudo chmod 550 /home/sam && sudo chmod 550 /home/sam/file1.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'I am John' > test.txt"}, "description": "Give read and write permissions to the file test.txt for the group named 'developers'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "getfacl /home/john/test.txt | grep developers | grep -q 'rw-'; if [ $? -eq 0 ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd developers && chgrp developers /home/john/test.txt && chmod g+rw /home/john/test.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && su - jane"}, "description": "Create a new file called 'my_file.txt' in the home directory of user 'jane'. Give it read and write permissions for the owner and read-only permissions for everyone else.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/jane/my_file.txt | awk '{if ($1~/^-rw-r--r--./) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "touch /home/jane/my_file.txt && chmod 644 /home/jane/my_file.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && touch file1 && touch file2 && chown bob:bob file1 && chmod 660 file1 && chown :bob file2 && chmod 770 file2 && su - bob"}, "description": "How can Bob grant Alice permission to read and write in file1?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u bob cat /home/bob/file1 && sudo -u alice cat /home/bob/file1) | if [ \"$(cat -)\" = \"alicecantsee\"$'\\n'\"alicecantsee\" ]; then sudo -u bob chmod 666 /home/bob/file1 && sudo -u alice cat /home/bob/file1 | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi; else exit 1; fi"}, "example": {"type": "command", "data": "sudo -u bob chmod 664 /home/bob/file1 && sudo -u alice cat /home/bob/file1"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && cd /home/jack && echo 'hello world' > test && chmod 600 test && chown jack test &&su - jack"}, "description": "Execute ~/test and get the output", "evaluation": {"type": "ground-truth", "answer": "hello world", "checking": null, "example": {"type": "command", "data": "~/test"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && touch /home/jack/test && chmod 400 /home/jack/test && chown jack /home/jack/test && su - jack"}, "description": "Create a new file `secret` inside the home directory of user jack, with the contents `this is a secret message`, and make it only readable by jack. Ensure that other users cannot even list the file in the directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/jack | grep -w '^-..--------' | awk '{if ($NF!=\"secret\") { exit 1; } else { exit 0; }}') && (cat /home/jack/secret | grep 'this is a secret message') && (ls -l /home/jack | grep secret) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'this is a secret message' > /home/jack/secret && chmod 400 /home/jack/secret"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jimmy -m jimmy && su - jimmy"}, "description": "What is the default umask value for users in Linux? Set the umask value to 0033. Create a directory called 'secret' inside /home/jimmy with permission 750. Create a file called 'confidential.txt' inside 'secret' with permission 640 and write 'top secret' inside the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(umask | grep -q '0022' && ls -ld /home/jimmy/secret | awk '{ if ($1~/^drwxr-x---/) { exit 0; } else { exit 1; } }' && ls -l /home/jimmy/secret/confidential.txt | awk '{ if ($1~/^-rw-r-----/) { exit 0; } else { exit 1; } }' && grep -q 'top secret' /home/jimmy/secret/confidential.txt) || exit 1;"}, "example": {"type": "command", "data": "umask 0033 && mkdir /home/jimmy/secret && chmod 750 /home/jimmy/secret && touch /home/jimmy/secret/confidential.txt && chmod 640 /home/jimmy/secret/confidential.txt && echo 'top secret' > /home/jimmy/secret/confidential.txt"}}, "labels": ["permission", "umask"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/rachel -m rachel && mkdir /data && touch /data/file1 && touch /data/file2 && touch /data/file3 && chmod 740 /data && chown -R root:dataaccess /data && chmod -R g+rw /data"}, "description": "Add user Rachel to the group dataaccess and make sure she can read and write to /data/file2 but not delete it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l rachel -c 'cat /data/file1' && runuser -l rachel -c 'echo \"test\" >> /data/file2' && runuser -l rachel -c 'rm /data/file2' >& /dev/null && runuser -l rachel -c 'cat /data/file3') | if [ \"$(cat -)\" = \"test\"$'\\n'\"\"$'\\n'\"test\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G dataaccess rachel && chmod 640 /data/file2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && cd /home/jack && echo 'hello world' > test && chmod 400 test && chown jack test && su - jack"}, "description": "Read the contents of the file \"test\" in the home directory of the user with the least permissions (i.e. jack) without changing the permission state of the file itself.", "evaluation": {"type": "ground-truth", "answer": "hello world", "checking": null, "example": {"type": "command", "data": "cat /home/jack/test"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jenny -m jenny && su - jenny"}, "description": "Create a file called 'birthday.txt' in your home directory that only you can read, write, and execute. No other users should be able to access this file in any way.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "[[ -r /home/jenny/birthday.txt ]] && [[ -w /home/jenny/birthday.txt ]] && [[ -x /home/jenny/birthday.txt ]] && (ls -l /home/jenny/birthday.txt | grep -q '^-..------') && (ls -ld /home/jenny/ | grep -q '^drwx------') "}, "example": {"type": "command", "data": "touch /home/jenny/birthday.txt && chmod 700 /home/jenny/birthday.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jenny -m jenny && echo 'Hello World!' > /home/jenny/hello.txt"}, "description": "Set the permission of the hello.txt file to read-only for everyone except jenny, without using chmod", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/jenny/hello.txt | awk '{if ($1==\"-rw-------\") { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chown jenny:jenny /home/jenny/hello.txt && chmod 400 /home/jenny/hello.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && groupadd developers && usermod -a -G developers john && echo 'source ~/venv/bin/activate' >> /home/john/.bashrc"}, "description": "Give group developers write permissions to a directory named app in /opt directory and set so any new files and directories created in that directory will inherit the group ownership. Make sure that john can still read files but can't delete them.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -ld /opt/app && permissionStr=\"$(stat -c \"%A\" /opt/app)\" && group=\"$(stat -c \"%G\" /opt/app)\" && ownerId=\"$(stat -c \"%u\" /opt/app)\" && developerPermission=${permissionStr:4:3} && otherPermission=${permissionStr:7:3}  && if [ \"$developerPermission\" = \"rwx\" ] && [ \"$otherPermission\" = \"---\" ] && [ \"$group\" = \"developers\" ]; then for file in /opt/app/*; do sudo -u john cat \"$file\" > /dev/null; done && sudo -u john touch /opt/app/testfile && sudo -u john echo 'testing' > /opt/app/testfile && ls -ld /opt/app/testfile && echo done; else exit 1; fi) && ((sudo -u john rm /opt/app/testfile && exit 1) || exit 0)"}, "example": {"type": "command", "data": "mkdir /opt/app && chown john:developers /opt/app && chmod 2775 /opt/app"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/julie -m julie && cd /home/julie && touch .secret && chmod 400 .secret && echo 'root:x:0:julie' >> /etc/group && su - julie"}, "description": "Julie wants to be able to execute any command as root without entering a password. Help her by modifying the sudoers file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(whoami && sudo whoami) | if [ \"$(cat -)\" = \"julie\"$'\\n'\"root\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "(echo -e 'julie ALL=(ALL) NOPASSWD: ALL\n' && cat /etc/sudoers) | sudo EDITOR='tee -a' visudo"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/shared && chmod 2770 /home/shared && groupadd file_access && usermod -a -G file_access jack && usermod -a -G file_access bill && usermod -a -G file_access tom && usermod -a -G file_access george"}, "description": "Create a directory `/home/shared` and make sure that only members of the `file_access` group can read and write files in the directory. Additionally, any files created in the directory should inherit the group ownership", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home | grep shared | grep '2770' | awk '{if ($4!=\"file_access\" || $NF!=\"/home/shared\") { exit 1; }}' && touch /home/shared/test.txt && ls -l /home/shared | grep test.txt | awk '{if ($4!=\"file_access\") { exit 1; }}'"}, "example": {"type": "command", "data": "chgrp file_access /home/shared && chmod g+rwxs /home/shared"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && cd /home/sam && mkdir projects && cd projects && mkdir important && mkdir less-important && touch important/file1 && touch less-important/file2 && chmod 640 important/file1 && chmod 755 less-important && find . -exec touch -t 202207011000 {} +"}, "description": "Give 'sam' read and write permissions for file1, and only read permission for less-important. Make sure 'sam' is only allowed to access the important and less-important directories, but not the parent directory 'projects'.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u sam cat /home/sam/projects/important/file1 && sudo -u sam cat /home/sam/projects/less-important/file2 && sudo -u sam ls /home/sam/projects && sudo -u sam ls /home/sam) | if [ \"$(cat -)\" = \"file1$'\\n'file2$'\\n'important$'\\n'less-important$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "setfacl -m u:sam:rw /home/sam/projects/important/file1 && setfacl -m u:sam:r /home/sam/projects/less-important && chmod 750 /home/sam/projects && chmod 751 /home/sam && chown -R sam:sam /home/sam && chmod o-rwx /home/sam"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/john && mkdir /home/jane && touch /home/john/file1 && touch /home/jane/file2"}, "description": "Give user John read and write permissions to his own files but deny any access to user Jane on /home/john/file1", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john cat /home/john/file1 && sudo -u jane cat /home/john/file1 && sudo -u john cat /home/jane/file2 && sudo -u jane cat /home/john/file2) | if [ \"$(cat -)\" = \"file1$'\\n''cat: /home/john/file1: Permission denied'$'\\n'file2$'\\n''cat: /home/john/file2: Permission denied'$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 600 /home/john/file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && useradd -s /bin/bash -d /home/john -m john && touch /testfile && chgrp john /testfile && chmod 750 /testfile"}, "description": "How can user 'mark' edit /testfile without changing its group permissions or ownership?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - mark -c 'echo \"hello world\" >> /testfile && echo \"$(cat /testfile)\"'"}, "example": {"type": "command", "data": "chmod g+s /testfile && chmod o-r /testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/paul -m paul && useradd -s /bin/bash -d /home/ashley -m ashley && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jessica -m jessica && cd /home/john && echo 'this is secret data' > secret.txt && cd /home/jessica && echo 'this is confidential data' > confidential.txt"}, "description": "Give paul and ashley read permissions for john's secret.txt file but deny read permissions to jessica. Give jessica execute permissions for /home/jessica directory but not read permissions. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l paul -c 'cat /home/john/secret.txt' && runuser -l ashley -c 'cat /home/john/secret.txt') | if [ \"$(cat -)\" = \"this is secret data\"$'\\n'\"this is secret data\" ]; then exit 0; else exit 1; fi && (runuser -l jessica -c 'cat /home/john/secret.txt') | if [ $(cat -) != '' ]; then exit 1; else exit 0; fi && (runuser -l jessica -c 'ls -l /home') | if [ \"$(cat -)\" = \"total 12\n-rwx------ 2 jessica jessica 4096 DATE confidential.txt\n-rw-r--r-- 1 john      john       18 DATE secret.txt\n-rwx------ 2 john      john     4096 DATE tmp\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 440 /home/john/secret.txt && chown john:john /home/john/secret.txt && chmod 111 /home/jessica && chmod 000 /home/jessica/confidential.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mary -m mary && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/ringo -m ringo && echo 'mary ALL=(john) NOPASSWD:ALL' >> /etc/sudoers"}, "description": "Mary wants to be able to execute commands as John without providing a password. Help her out!", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u john whoami | if [ \"$(cat -)\" = \"john\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'mary ALL=(john) NOPASSWD: ALL' >> /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/carol -m carol && echo 'password123' | passwd --stdin alice && echo 'password023' | passwd --stdin bob && echo 'password321' | passwd --stdin carol"}, "description": "What is the command to change the password for the user 'carol'? Make the new password 'newpassword321'", "evaluation": {"type": "ground-truth", "answer": "echo 'newpassword321' | passwd --stdin carol", "checking": null, "example": {"type": "command", "data": "echo 'newpassword123' | passwd --stdin alice"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user -m user && useradd -s /bin/bash -d /home/admin -m admin && echo 'supersecret' > /home/user/secret && chown user:user /home/user/secret && chown admin:admin /home/admin && chmod 740 /home/user/secret"}, "description": "User and admin both need to access the secret file in the /home/user directory. However, user does not want to give admin access to his /home/user directory. What is the appropriate way to grant admin access to the secret file without changing the permissions of /home/user or the file itself?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u admin cat /home/user/secret && sudo -u user cat /home/user/secret) | if [ \"$(cat -)\" = \"supersecret\"$'\\n'\"supersecret\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "setfacl -m u:admin:r /home/user/secret"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/tom -m tom && useradd -s /bin/bash -d /home/jane -m jane && cd /home/bob && mkdir pictures && cd pictures && touch pic1 && touch pic2 && touch pic3 && cd .. && chmod 700 pictures && chown bob pictures && cd /home/tom && mkdir documents && cd documents && touch doc1 && touch doc2 && touch doc3 && cd .. && chown tom documents && chmod 740 documents && su - john"}, "description": "You are user john and you need to access a file named doc1 located in /home/tom/documents. What commands will you have to run for you to be able to access the file?", "evaluation": {"type": "ground-truth", "answer": "cd /home/tom && chmod o+x documents && su - john", "checking": null, "example": {"type": "command", "data": "cd /home/tom && chmod o+x documents && su - john"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jack -m jack && chmod 777 /var/www/html"}, "description": "There are three users: bob, john and jack. Set the permission of /var/www/html directory so that bob and john can read and write files, jack can only read the files. You should not change the group ownership of /var/www/html directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l bob -c 'touch /var/www/html/bobfile.txt && echo testbob > /var/www/html/bobfile.txt && cat /var/www/html/bobfile.txt; rm /var/www/html/bobfile.txt') && (runuser -l john -c 'touch /var/www/html/johnfile.txt && echo testjohn > /var/www/html/johnfile.txt && cat /var/www/html/johnfile.txt; rm /var/www/html/johnfile.txt') && (runuser -l jack -c 'cat /var/www/html/johnfile.txt' && runuser -l jack -c 'touch /var/www/html/jackfile.txt && echo testjack > /var/www/html/jackfile.txt && echo trying to write... && cat /var/www/html/jackfile.txt; rm /var/www/html/jackfile.txt' && runuser -l john -c 'cat /var/www/html/johnfile.txt')  | if [ \"$(cat -)\" = \"testbob$'\\n'testjohn$'\\n'testjohn$'\\n'trying to write...$'\\n''$'\\n'testjohn\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 766 /var/www/html && chmod o-w /var/www/html"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "apt update && apt install sudo -y && useradd -s /bin/bash -d /home/jane -m jane && chown -R jane:jane /home/jane && chmod 700 /home/jane && chmod g+s /home/jane && echo 'jane ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers"}, "description": "Create a restricted user named 'jane' with full permissions using sudo, and restrict their access to just their home directory (/home/jane).", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jane -H sh -c 'cd ~' && sudo -u jane -H sh -c 'touch ~/testfile') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'Defaults        env_reset\nDefaults        mail_badpass\nDefaults        secure_path=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin\"\nroot    ALL=(ALL:ALL) ALL\n%admin ALL=(ALL) ALL\n%sudo   ALL=(ALL:ALL:ALL) ALL' > /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/amy -m amy && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/charlie -m charlie && useradd -s /bin/bash -d /home/david -m david && useradd -s /bin/bash -d /home/emma -m emma && useradd -s /bin/bash -d /home/frank -m frank && echo 'emma:x:1003:1003::/home/emma:/bin/bash\nfrank:x:1004:1004::/home/frank:/bin/bash' >> /etc/passwd && echo 'amy:x:1000:1000::/home/amy:/bin/bash\nbob:x:1001:1001::/home/bob:/bin/bash\ncharlie:x:1002:1002::/home/charlie:/bin/bash\ndavid:x:1005:1005::/home/david:/bin/bash' >> /etc/passwd && echo 'dataaccess:x:1006:amy,bob,charlie' >> /etc/group"}, "description": "Create a directory called /data that is owned by the user who created it and can only be accessed and modified by members of the group 'dataaccess', and only members of this group can create new files or directories", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "test -d /data && [ \"$(ls -ld /data | awk '{print $3}')\" = \"root\" ] && [ \"$(ls -ld /data | awk '{print $4}')\" = \"dataaccess\" ] && sudo -H -u amy bash -c 'touch /data/testfile && chmod 650 /data/testfile && echo \"test\" >> /data/testfile && exit' && cat /data/testfile | if [ \"$(cat -)\" = \"test\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "mkdir /data && chown root:dataaccess /data && chmod 2770 /data"}}, "labels": ["permission", "group", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jimmy -m jimmy && useradd -s /bin/bash -d /home/bob -m bob && su - jimmy"}, "description": "Create a file in jimmy's home directory called important.txt and ensure that only jimmy and the user bob can read it, and no other users can access it in any way. Also ensure that jimmy and bob can write to the file, but no other users can.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/jimmy/important.txt && sudo cat /home/jimmy/important.txt && sudo su - bob -c 'cat /home/jimmy/important.txt' && sudo su - alice -c 'cat /home/jimmy/important.txt') | if [ \"$(cat -)\" = \"-rw-rw---- 1 jimmy jimmy 4 Oct 29 00:00 /home/jimmy/important.txt\n1234\n1234\ncat: /home/jimmy/important.txt: Permission denied\ncat: /home/jimmy/important.txt: Permission denied\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "touch /home/jimmy/important.txt && chmod 660 /home/jimmy/important.txt && chown jimmy:bob /home/jimmy/important.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/amy -m amy && useradd -s /bin/bash -d /home/bob -m bob && echo 'hello' > /home/amy/hello.txt && chmod 644 /home/amy/hello.txt && chown amy:amy /home/amy/hello.txt && su - bob"}, "description": "As the user bob, try to read the file /home/amy/hello.txt and explain what error message you get. How can you fix this issue?", "evaluation": {"type": "ground-truth", "answer": "bob will get a \"Permission Denied\" error message when trying to read the file. To fix this issue, the file permissions need to be changed to allow group or other users to read the file.", "checking": null, "example": {"type": "command", "data": "chmod 644 /home/amy/hello.txt && cat /home/amy/hello.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && echo 'This is a test file' > /home/lisa/testfile && chmod 644 /home/lisa/testfile"}, "description": "Change the ownership and group of /home/lisa/testfile to user jack and group developers", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/lisa/testfile | awk '{if ($3~/jack/ && $4~/developers/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chown jack:developers /home/lisa/testfile"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir docs && cd docs && touch file1 && touch file2 && touch file3 && echo 'sensitive info' > file1 && chown jane:jane file1 && chmod 600 file1"}, "description": "Jane has some sensitive documents at her home folder. Set permissions so that only she can access them and no one else, including other users in the 'jane' group, can access them.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jane ls /home/jane/docs | wc -l | xargs echo -n) && (sudo -u jane cat /home/jane/docs/file1 | xargs echo -n) | if [ \"$(cat -)\" = \"1sensitive info\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 700 /home/jane/docs && chmod 600 /home/jane/docs/file1"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/eve -m eve && mkdir /home/data && echo 'A secret message.' > /home/data/secret && chown root:root /home/data && chmod o-rwx /home/data/secret"}, "description": "Alice needs to read the secret message in /home/data but Bob and Eve should not be able to do so. Set appropriate permissions and add Alice to a group that can read /home/data/secret", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l bob -c 'cat /home/data/secret' && runuser -l alice -c 'cat /home/data/secret' && runuser -l eve -c 'cat /home/data/secret' | if [ \"$(cat -)\" = \"cat: /home/data/secret: Permission denied$'\\n'A secret message.$'\\n'cat: /home/data/secret: Permission denied\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd dataaccess && usermod -a -G dataaccess alice && chgrp dataaccess /home/data && chmod 750 /home/data && chmod 640 /home/data/secret"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/max -m max && groupadd engineer && usermod -a -G engineer jane && usermod -a -G engineer max"}, "description": "Create a directory /project which can be accessed and modified by both jane and max. Only users belong to engineer group can read the content of this directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jane touch /project/a.txt && sudo -u max touch /project/b.txt && sudo chmod 770 /project && sudo chown jane:engineer /project/a.txt && sudo chown max:engineer /project/b.txt && sudo chmod 640 /project/*) && (sudo -u jane cat /project/a.txt && sudo -u max cat /project/b.txt && sudo -u jane find /project -maxdepth 0 -exec sudo -u jane test -r {} \\; && sudo -u max find /project -maxdepth 0 -exec sudo -u max test -r {} \\;) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo mkdir /project"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m alice && useradd -m bob && echo 'super secret message' > /home/alice/secret.txt && chmod 640 /home/alice/secret.txt && chown alice:alice /home/alice/secret.txt"}, "description": "Alice wants to share her secret.txt file with Bob. What permissions should be set on the file to allow Bob to read it, but not edit it?", "evaluation": {"type": "ground-truth", "answer": "640", "checking": null, "example": {"type": "command", "data": "chmod 640 /home/alice/secret.txt && su bob -c 'cat /home/alice/secret.txt'"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/karen -m karen && cd /home/karen && mkdir secret && touch secret/file1 && echo 'I am the best!' > secret/file1 && chattr +i secret/file1 && su - karen"}, "description": "Karen has created a file in ~/secret which contains confidential information. Ensure that the file cannot be deleted, even by the owner of the file, without first changing the attributes of the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo rm /home/karen/secret/file1 && if [ $? -eq 1 ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chattr +i /home/karen/secret/file1"}}, "labels": ["permission", "file"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'root_secret_password' > /root/password && chown root:root /root/password && chmod 400 /root/password && echo 'john_secret_password' > /home/john/password && chown john:john /home/john/password && chmod 400 /home/john/password && echo 'file contents: ok' > /home/john/test && chown john:john /home/john/test && chmod 664 /home/john/test && su - john"}, "description": "Change the ownership of /root/password to john and ensure that only john can read it. Then, change the ownership of /home/john/test to root, and ensure that only root can read/write to it. Lastly, give john the ability to use sudo without password and verify it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /root/password > /dev/null && echo ok || echo failed) | if [ \"$(cat -)\" = \"ok\"$'\\n'\"ok\" ]; then exit 0; else exit 1; fi && (cat /home/john/test > /dev/null && echo failed || echo ok) | if [ \"$(cat -)\" = \"ok\"$'\\n'\"ok\" ]; then exit 0; else exit 1; fi && (echo \"john_secret_password\" | sudo -S whoami > /dev/null && sudo cat /root/password > /dev/null && echo ok || echo failed) | if [ \"$(cat -)\" = \"ok\"$'\\n'\"ok\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chown john:john /root/password && chmod 400 /root/password && chown root:root /home/john/test && chmod 600 /home/john/test && echo 'john    ALL=(ALL:ALL) NOPASSWD:ALL' >> /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/kate -m kate && cd /home/kate && mkdir docs && cd docs && touch file1 && touch file2 && chmod 640 file1 && chmod 664 file2 && chown root file1 && chgrp root file1"}, "description": "Give kate full read and write permissions to ~/docs/file2, but only read permission to ~/docs/file1", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l ~/docs/file1 | awk '{if ($1~/^-.....r--/) { exit 0; } else { exit 1; } }') && (ls -l ~/docs/file2 | awk '{if ($1~/^-....rw.r/) { exit 0; } else { exit 1; } }')"}, "example": {"type": "command", "data": "chmod 400 ~/docs/file1 && chmod 660 ~/docs/file2 && chown kate ~/docs/file2"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && echo 'alice  ALL=(bob) NOPASSWD: /bin/cat' >> /etc/sudoers && su - alice"}, "description": "Alice wants to be able to run 'sudo cat /home/bob/sensitive.txt' without typing her password. How can she do this?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u bob cat /home/bob/sensitive.txt | if [ \"$(cat -)\" = \"This file is sensitive\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'alice  ALL=(bob) NOPASSWD: /bin/cat' >> /etc/sudoers"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m alice && cd /home/alice && mkdir work && cd work && echo 'Welcome to my workspace' > readme.txt && chmod 664 readme.txt && chown alice:alice readme.txt && find ~/work -type d -exec chmod 775 {} + && find ~/work -type f -exec chmod 664 {} +"}, "description": "Alice has a workspace with a readme.txt file in it. Change the ownership of the workspace (/home/alice/work) so that it can be accessed by the user 'bob' and the group 'sales'. Then, ensure that new files created in this workspace inherit the group ownership and that users can create and delete files as needed.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo su bob -c 'cd /home/alice/work && pwd && ls -l && touch newfile.txt && rm newfile.txt'"}, "example": {"type": "command", "data": "sudo chown :sales /home/alice/work && sudo chmod g+s /home/alice/work && sudo chmod +t /home/alice/work"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m user1 && useradd -m user2 && useradd -m user3 && echo 'test file' > /home/user1/testfile && chown user1:user1 /home/user1/testfile && chmod 700 /home/user1/testfile && su - user2"}, "description": "Try to read /home/user1/testfile and figure out why you can't and how to fix it without changing file ownership", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/user1/testfile 2>&1 | if grep -i denied >/dev/null ; then exit 1; else exit 0; fi"}, "example": {"type": "command", "data": "chmod 740 /home/user1/testfile"}}, "labels": ["read", "permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && echo 'my secret file' > secret.txt && chmod 400 secret.txt && chown jane:jane secret.txt && su - jane"}, "description": "As a superuser, you need to add your user to the group owning the secret.txt file so that you can access it", "evaluation": {"type": "ground-truth", "answer": "my secret file", "checking": null, "example": {"type": "command", "data": "usermod -aG jane $(whoami) && cat /home/jane/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/carla -m carla && echo 'carla ALL=(root) NOPASSWD:/bin/chmod' >> /etc/sudoers && su - carla"}, "description": "Carla needs to be able to change the permissions of files and directories in /var/log without actually being granted full sudo privileges. Give Carla the required permissions by adding the appropriate entry to the sudoers file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo touch /var/log/test && sudo chmod 600 /var/log/test && sudo chown root:root /var/log/test && sudo runuser -l carla -c \"sudo chmod 777 /var/log/test && echo 'success' > /var/log/test.success\" && sudo chown carla:carla /var/log/test && cat /var/log/test.success && rm /var/log/test /var/log/test.success"}, "example": {"type": "command", "data": "echo 'carla ALL=(root) NOPASSWD:/bin/chmod' >> /etc/sudoers"}}, "labels": ["permission", "sudoers"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir docs && echo 'confidential' > docs/report.txt && chown john:john docs/report.txt && chmod 600 docs/report.txt && su - john"}, "description": "As a normal user, view the content of report.txt without changing the permission of the file or directory", "evaluation": {"type": "ground-truth", "answer": "confidential", "checking": null, "example": {"type": "command", "data": "cat /home/john/docs/report.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/linuxquestions && echo 'linuxquestions' > /home/linuxquestions/info.txt && chattr +a /home/linuxquestions/info.txt"}, "description": "What is the meaning of +a in 'chattr +a /home/linuxquestions/info.txt' command?", "evaluation": {"type": "ground-truth", "answer": "+a means append only. With append only attribute, the file can only be opened in append mode for writing. It cannot be deleted or renamed.", "checking": null, "example": {"type": "command", "data": "echo 'Append to the file' >> /home/linuxquestions/info.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && mkdir /home/mike/testdir && touch /home/mike/testdir/testfile && chmod 777 /home/mike/testdir/testfile"}, "description": "Change the group ownership of the file /home/mike/testdir/testfile to the group 'test', and ensure that the group can only read and modify the file (not execute), but other users can do nothing with the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(stat /home/mike/testdir/testfile | grep 'Access: (' | grep 'Uid') && (ls -l /home/mike/testdir/testfile | awk '{if ($1~/^-..r....w-/) { exit 0; } else { exit 1; }}') && (find /home/mike/testdir/testfile -type d -exec stat -c '%A %G' {} + | grep 'drwxrwx--x.*test')"}, "example": {"type": "command", "data": "chgrp test /home/mike/testdir/testfile && chmod 660 /home/mike/testdir/testfile && chmod g-x /home/mike/testdir"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/amy -m amy && useradd -s /bin/bash -d /home/brad -m brad && echo 'secret file contents' > /topsecret && chmod 640 /topsecret && chown amy /topsecret && chmod u+s /usr/bin/tail"}, "description": "Brad needs to view the contents of /topsecret file, but does not have read access. Help Brad by using 'tail' command with SUID bit set on it to view the file contents, and ensure that the user 'amy' remains the owner of the file. Don't forget to clean up after yourself.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l brad -c 'tail /topsecret' | if [ \"$(cat -)\" = \"secret file contents\" ]; then exit 0; else exit 1; fi ) && (ls -l /topsecret | awk '{if ($1~/^..--.-r--/ && $3~/^amy$/ && $4~/^brad$/) { exit 0; } else { exit 1; } }')"}, "example": {"type": "command", "data": "chmod u+s /usr/bin/tail && runuser -l brad -c 'tail /topsecret' && chown amy /topsecret && rm /usr/bin/tail"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && echo 'a secret message' > /home/sam/secret.txt && chmod 400 /home/sam/secret.txt"}, "description": "View the contents of /home/sam/secret.txt without changing its permissions", "evaluation": {"type": "ground-truth", "answer": "a secret message", "checking": null, "example": {"type": "command", "data": "sudo cat /home/sam/secret.txt"}}, "labels": ["permission", "file"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/gina -m gina && echo 'You shall not pass!' > /home/bob/topsecret && echo 'Welcome to the club' > /home/gina/party && chmod 744 /home/bob/topsecret && chmod 700 /home/gina/party"}, "description": "Only allow Gina and Bob to access their respective files and deny all other users' access.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo runuser -l bob -c 'cat /home/bob/topsecret' && sudo runuser -l gina -c 'cat /home/gina/party' && sudo runuser -l mike -c 'cat /home/bob/topsecret' && sudo runuser -l mike -c 'cat /home/gina/party') | if [ \"$(cat -)\" = \"You shall not pass!$'\\n''Welcome to the club'$'\\n''cat: /home/bob/topsecret: Permission denied'$'\\n''cat: /home/gina/party: Permission denied'$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 700 /home/gina && chmod 700 /home/bob && chown gina /home/gina/party && chown bob /home/bob/topsecret"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jason -m jason && echo 'Hello, World!' > /home/jason/greeting.txt && chmod 777 /home/jason/greeting.txt"}, "description": "Give jason read, write, and execute permissions for /home/jason/greeting.txt and verify that he can access and modify the file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l jason -c 'echo \"Hello, Jason!\" >> /home/jason/greeting.txt && cat /home/jason/greeting.txt' | if [ \"$(cat -)\" = \"Hello, World!$'\\n'Hello, Jason!\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod u+rwx /home/jason/greeting.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && useradd -s /bin/bash -d /home/sara -m sara && useradd -s /bin/bash -d /home/josh -m josh && touch /home/sam/cv.docx && touch /home/sara/cv.docx && touch /home/josh/cv.docx"}, "description": "Set the owner of all cv.docx to their respective owners (sam, sara, josh) and the group to staff.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/sam/cv.docx | awk '{ if ($3==\"sam\" && $4==\"staff\") { exit 0;} else {exit 1;} }') && (ls -l /home/sara/cv.docx | awk '{ if ($3==\"sara\" && $4==\"staff\") { exit 0;} else {exit 1;} }') && (ls -l /home/josh/cv.docx | awk '{ if ($3==\"josh\" && $4==\"staff\") { exit 0;} else {exit 1;} }')"}, "example": {"type": "command", "data": "chown sam:staff /home/sam/cv.docx && chown sara:staff /home/sara/cv.docx && chown josh:staff /home/josh/cv.docx"}}, "labels": ["permission", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/dan -m dan && echo 'jane ALL=(dan) /bin/cat' >> /etc/sudoers"}, "description": "Allow user jane to execute the command 'cat' with sudo and read any file owned by user dan, but not files owned by other users", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u dan touch /tmp/test_jane && sudo -u dan echo 'secret' > /tmp/test_jane && sudo -u dan chmod 600 /tmp/test_jane && sudo -u jane cat /tmp/test_jane && sudo -u alice touch /tmp/test_alice && sudo -u alice echo 'top_secret' > /tmp/test_alice && sudo -u alice chmod 600 /tmp/test_alice && (sudo -u jane cat /tmp/test_alice > /dev/null 2>&1 && echo NOT_OKAY) || (sudo -u alice cat /tmp/test_alice > /dev/null 2>&1 && echo OKAY))"}, "example": {"type": "command", "data": "echo 'jane ALL=(dan) /bin/cat' >> /etc/sudoers"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/jenny -m jenny && echo 'I am the file content' > /home/alice/file && chmod 640 /home/alice/file && chown alice:bob /home/alice/file &&echo 'I am the directory content' > /home/alice/mydir/file && touch /home/alice/mydir/readme && chown -R alice:bob /home/alice/mydir && chmod 770 /home/alice/mydir &&su - alice"}, "description": "using bob's permission to read /home/alice/file, then modify the file to replace 'content' with 'mycontent'(? Not sure which word is appropriate), save and close it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "diff <(cat /home/alice/file) <(echo 'I am the mycontent' ) > /dev/null && echo 'success' "}, "example": {"type": "command", "data": "cp --remove-destination /home/alice/file /home/bob/file && echo \"I am the my\"`cat /home/bob/file | grep content` > /home/bob/file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && useradd -s /bin/bash -d /home/tom -m tom && groupadd dataaccess && usermod -a -G dataaccess mike && usermod -a -G dataaccess tom && chmod o-rwx /home/mike && chmod o-rwx /home/tom && mkdir /data && chgrp dataaccess /data && chmod 2770 /data"}, "description": "Create a file /data/mypic.jpg with 660 permission that can be accessed by only tom and mike but not others", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo ls -l -d /data && sudo ls -l /data | awk '{if ($3$4!~/mikedataaccess|tomdataaccess/) { exit 1; } else { exit 0; }}') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "cd /data && touch mypic.jpg && chmod 660 mypic.jpg && chgrp dataaccess mypic.jpg && chmod g+rwx mypic.jpg && chmod g-x mypic.jpg && chmod o-rwx mypic.jpg && chown tom:mike mypic.jpg"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/sam -m sam && groupadd project && usermod -a -G project john && usermod -a -G project sam && mkdir /home/project && touch /home/project/file && chmod 770 /home/project && chown -R :project /home/project/file"}, "description": "Create a new file in /home/project and make sure that only john and members of the group 'project' have write permissions to the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo su - john -c \"echo 'hello' > /home/project/file\" && sudo su - sam -c \"echo 'world' > /home/project/file\") | if [ \"$(cat -)\" = \"hello$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+w /home/project/file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/testuser -m testuser && su - testuser"}, "description": "Create a new user called `newuser` and set its default shell to `/bin/sh`. Switch to the new user and create a file called `test.txt` in the user's home directory. Then, change the ownership of the file to `root` and the group to `sudo`. Finally, give the user `newuser` write permissions to the file, but deny write permissions to the group `sudo`. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - newuser -c 'test -w ~/test.txt && ! test -w /home/newuser/test.txt' && ls -l /home/newuser/test.txt | awk '{if ($1 != \"-rw-r-----\" || $3 != \"root\" || $4 != \"sudo\") { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "useradd -s /bin/sh -d /home/newuser -m newuser && su - newuser -c 'touch ~/test.txt && chmod o-w ~/test.txt && chown root:sudo ~/test.txt && chmod u+w ~/test.txt'"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'Hello, world!' > file.txt"}, "description": "Give user 'john' read and write permissions to file.txt, but revoke all permissions from all other users.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/john/file.txt | cut -d ' ' -f 1 | egrep '^-rw-------') && (sudo ls -l /home | awk '{if ($1 ~ /^d/ && $9 != \"john\") {printf \"%s/%s\n\", $9, $9}}' | xargs -I {} sudo find {} -type f ! -perm -0600 | wc -l | grep -q '^0$')"}, "example": {"type": "command", "data": "chmod 600 /home/john/file.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && echo 'test' > /testfile && chmod 600 /testfile && chown jane:jane /testfile && su - jane"}, "description": "As user jane, change the owner of /testfile to user joe.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l / | grep testfile | awk '{if ($3 == \"joe\" && $4 == \"joe\") { exit 0; } else {exit 1; }}'"}, "example": {"type": "command", "data": "sudo chown joe:joe /testfile"}}, "labels": ["permission", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/carol -m carol && useradd -s /bin/bash -d /home/dave -m dave"}, "description": "Assign permissions to /home/alice, /home/bob, /home/carol and /home/dave so that alice can't access bob's, carol's or dave's home folder and vice versa for other users. Also, create a directory called /xyz with 701 permission regardless of permission of the parent directory and make sure alice can't access it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l alice -c 'cd /home/bob' && runuser -l alice -c 'cd /home/carol' && runuser -l alice -c 'cd /home/dave') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi && (runuser -l alice -c 'cd /xyz' && runuser -l bob -c 'cd /xyz' && runuser -l carol -c 'cd /xyz' && runuser -l dave -c 'cd /xyz') | if [ \"$(cat -)\" = \"bash: cd: /xyz: Permission denied\"$'\\n'\"bash: cd: /xyz: Permission denied\"$'\\n'\"bash: cd: /xyz: Permission denied\"$'\\n'\"bash: cd: /xyz: Permission denied\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 700 /home/alice && chmod 700 /home/bob && chmod 700 /home/carol && chmod 700 /home/dave && chmod 701 / && mkdir /xyz && chmod 701 /xyz && setfacl -m u:alice:- /xyz"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && useradd -s /bin/bash -d /home/bill -m bill && useradd -s /bin/bash -d /home/tom -m tom && useradd -s /bin/bash -d /home/george -m george && cd /home && mkdir data && cd data && touch sensitive.txt && chown root:root sensitive.txt && chmod 400 sensitive.txt && usermod -a -G dataaccess jack && usermod -a -G dataaccess bill && usermod -a -G dataaccess tom && chgrp dataaccess . && chmod g+s ."}, "description": "Ensure that only members of the group \"dataaccess\" can read the file /home/data/sensitive.txt, but no one except root can modify it. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/data/sensitive.txt && chmod u+w /home/data/sensitive.txt && echo 'test' > /home/data/sensitive.txt && cat /home/data/sensitive.txt) | if [ \"$(cat -)\" = \"This file contains sensitive information.\"$'\\n'\"This file contains sensitive information.\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o-rwx /home/data/sensitive.txt && chmod g+r /home/data/sensitive.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir music && cd music && mkdir rock && mkdir pop && cd rock && touch song1 && touch song2 && cd ../pop && touch song3 && touch song4"}, "description": "Set the permission of the 'pop' directory such that john has full permission while others have only execute permission. Also, set the permission of all files with name starting with 'song' to have 444 permission, and set the permission of the 'music' directory such that no one except john can modify or delete it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "find /home/john/music/ -name 'song*' ! -perm 444 -ls | awk '{if ($0) { exit 1; } else { exit 0; } }' && ls -ld /home/john/music/pop | awk '{if ($1 == \"drwxr-x--x\") { exit 0; } else { exit 1; } }' && ls -ld /home/john/music | awk '{if ($1 == \"drwxr-x---\") { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 744 /home/john/music/pop && find /home/john/music -name 'song*' -exec chmod 444 {} + && chmod 700 /home/john/music"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && touch /home/mark/sometext.txt && chown mark:mark /home/mark/sometext.txt && chmod 666 /home/mark/sometext.txt"}, "description": "Change the permissions for the file /home/mark/sometext.txt so that only the owner can read and write to it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/mark/sometext.txt | awk '{if ($1 ~ /^-rw-------/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 600 /home/mark/sometext.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jim -m jim && useradd -s /bin/bash -d /home/mark -m mark && mkdir /shared && chgrp -R jim /shared && find /shared -type d -exec chmod 2770 {} + && find /shared -type f -exec chmod 660 {} +"}, "description": "Create a directory called 'taxes' in /shared that belongs to the 'jim' group. Both 'jim' and 'mark' should have Read-Write access to the directory and all files within it. While the files within this directory should be group accessible, they should not be world accessible.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /shared | grep taxes | awk '{if ($1~/^d.....rwx/) { exit 0; } else { exit 1; } }') && (find /shared/taxes -type f -exec sh -c 'test $(stat -c \"%a %G\" \"{}\") = \"660 jim\" ' \\; 2>/dev/null | wc -l | awk '{if ($1 == 0) { exit 0; } else { exit 1; }}')"}, "example": {"type": "command", "data": "mkdir /shared/taxes && chgrp jim /shared/taxes && chmod 770 /shared/taxes"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/amy -m amy && useradd -s /bin/bash -d /home/jess -m jess && useradd -s /bin/bash -d /home/matt -m matt && cd /home && mkdir shared && cd shared && touch document1 && touch document2 && touch document3 && touch document4 && touch document5 && touch document6 && chown amy:amy document1 && chgrp jess document2 && chmod 750 document3 && chmod 777 document4 && chmod u+s document5"}, "description": "There are three users: amy, jess, and matt. In the shared directory, amy can read and write everything, jess can only read document2, while matt cannot access anything in the shared directory. Other users cannot access the shared directory or the files in it. Set the permissions accordingly.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u amy cat /home/shared/* && sudo -u jess cat /home/shared/document2 && sudo -u matt cat /home/shared/*) 2>/dev/null | if [ \"$(cat -)\" = \"\nline1\nline2\nline3\nline4\nline5\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 750 /home/shared && chmod 644 /home/shared/document2 && chmod 700 /home/shared && chmod 777 /home/shared/document4 && chmod u+s /home/shared/document5 && setfacl -m u:amy:rw /home/shared/*"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -G ftp -d /home/ftpusers/ftpuser01 ftpuser01 && useradd -s /bin/bash -G ftp -d /home/ftpusers/ftpuser02 ftpuser02 && useradd -s /bin/bash -G ftp -d /home/ftpusers/ftpuser03 ftpuser03 && useradd -s /bin/bash -G ftp -d /home/ftpusers/ftpuser04 ftpuser04 && useradd -s /bin/bash -G ftp -d /home/ftpusers/ftpuser05 ftpuser05"}, "description": "All users are added to group ftp. In directory /ftpdir, set permissions so that all users in the ftp group have read, write and execute permissions, and all others have only read and execute permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /ftpdir -type f ! -perm 664 -ls | grep -v lost+found | wc -l | xargs echo -n && find /ftpdir -type d ! -perm 775 -ls | grep -v lost+found | wc -l | xargs echo -n) | if [ \"$(cat -)\" = \"00\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod -R 775 /ftpdir && chmod -R g+s /ftpdir"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/jane -m jane && touch /home/alice/file1 && chmod 600 /home/alice/file1"}, "description": "Give alice, bob and jane the permission to execute `/home/alice/file1` without changing its permissions", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l alice -c 'cat /home/alice/file1' && runuser -l bob -c 'cat /home/alice/file1' && runuser -l jane -c 'cat /home/alice/file1') | if [ \"$(cat -)\" = \"file content\"$'\\n'\"file content\"$'\\n'\"file content\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+x /home/alice/file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && echo 'secret' > /home/jane/secret.txt && chmod 400 /home/jane/secret.txt"}, "description": "Allow jane to read the contents of the secret.txt file, but do not allow her to modify or delete it. Also, prevent all other users from accessing the file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo ls -l /home/jane/secret.txt | awk '{if ($1~/^-r--------/) { exit 0 ; } else { exit 1 ; }}' && sudo su - jane -c 'cat /home/jane/secret.txt' | grep secret) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 400 /home/jane/secret.txt && chattr +i /home/jane/secret.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && cd /home/alex && mkdir documents && cd documents && touch file1 && touch file2 && touch file3 && chmod -R 700 /home/alex/documents && chown -R alex:alex /home/alex/documents"}, "description": "Give read and execute permissions to user 'sharing' for the 'documents' directory. Also, make sure that any new file created in this directory by 'alex' automatically gives ownership to the group 'sharing'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u sharing ls /home/alex/documents/ && touch /home/alex/documents/newfile && sudo -u sharing ls /home/alex/documents/ | grep newfile"}, "example": {"type": "command", "data": "useradd sharing && usermod -aG alex sharing && chmod g+rx /home/alex/documents && chmod g+s /home/alex/documents && sudo -u alex touch /home/alex/documents/file4"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && cd /home/john && echo 'secret' > /home/john/file1 && echo 'public' > /home/john/file2 && chmod 770 /home/john/file1 && chmod 777 /home/john/file2 && chown john:jane /home/john/file1 && chown john:jane /home/john/file2 && su - john"}, "description": "Explain why jane can access file1 and file2 even though her user doesn't have read permission for those files", "evaluation": {"type": "written-answer", "answer": "Jane has group access to both files because they are owned by the group jane. Since the permission for the group on file2 is 777, Jane is able to read and modify the file even though her user doesn't have read permission. With file1, Jane is only able to modify because the permission for the group is 770 and the group has write permission.", "checking": null, "example": null}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && mkdir documents && touch documents/doc1.txt && touch documents/doc2.txt && chmod 640 documents/doc1.txt && chmod 740 documents/doc2.txt"}, "description": "Change the permission of doc1.txt to be readable and writable by the owner, readable by the group, and not readable by others. Change the permission of doc2.txt to be readable, writable, and executable by the owner, readable and executable by the group, and executable by others.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/bob/documents | awk '{if ($9 == \"doc1.txt\" && $1 != \"-rw-r-----\") { exit 1; } else if ($9 == \"doc2.txt\" && $1 != \"-rwxr-x--x\") { exit 1; } } END { if (NR == 2) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 640 /home/bob/documents/doc1.txt && chmod 750 /home/bob/documents/doc2.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/bob -m bob && echo \"Ali purchased a file, and gave the ownership to john\" > ali_file.txt && chown john:john ali_file.txt && chmod 640 ali_file.txt"}, "description": "Change the ownership of the file to jane and allow only the owner to modify the file. Verify it by changing the file from jane user and then try editing the file from bob user.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u jane touch jane_file.txt && sudo -u jane chmod 600 jane_file.txt && sudo -u jane echo 'Jane edited the file' > jane_file.txt && sudo -u bob echo 'Bob tried to edit jane_file' >> jane_file.txt && cat jane_file.txt | if grep 'Jane edited the file' && ! grep 'Bob tried to edit jane_file'; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chown jane:jane ali_file.txt && chmod 600 ali_file.txt"}}, "labels": ["ownership", "permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/mark -m mark && useradd -s /bin/bash -d /home/sarah -m sarah && cd /home && mkdir data && cd data && touch file1 && touch file2 && chown john:john file1 && chown mark:mark file2 && chmod 640 file1 && chmod 400 file2 && chmod g+s . && echo 'sarah ALL=(john) NOPASSWD:/home/john' >> /etc/sudoers && echo 'john ALL=(ALL) NOPASSWD:/usr/bin/find' >> /etc/sudoers && echo 'mark ALL=(ALL) NOPASSWD:/bin/ls' >> /etc/sudoers"}, "description": "john, sarah and mark have to access the data directory, but as a privileged user they have different sets of permissions. set the permissions so that john and sarah have read/write access to all the files in that directory, while mark can read the content of the file1. Once done, swap files between the users without changing permissions associated with the files.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john cat /home/data/file1 && sudo -u sarah cat /home/data/file1 && sudo -u mark cat /home/data/file2) | if [ \"$(cat -)\" = \"file1$'\\n'file1$'\\n'$'\\n' ]; then exit 0; else exit 1; fi && (sudo -u john cp /home/data/file2 /tmp && sudo -u mark cp /home/data/file1 /tmp && sudo -u sarah cp /home/data/file2 /home/data && sudo -u john cp /tmp/file1 /home/data && sudo -u mark cp /tmp/file2 /home/data) && ((sudo -u mark cat /home/data/file1 && sudo -u sarah cat /home/data/file2 && sudo -u john cat /home/data/file1) | if [ \"$(cat -)\" = \"file1$'\\n'$'\\n'file1$'\\n' ]; then exit 0; else exit 1; fi)"}, "example": {"type": "command", "data": "chmod 664 file1 && chmod 660 file2 && chown john:sarah file1 && chown john:sarah file2 && chmod o-rwx,g+w file1 && chmod o-rwx,g+w file2"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/melissa -m melissa && cd /home/melissa && touch file1 && touch file2 && touch file3 && touch file4 && chmod -x file1 && chmod -w file2 && chmod -r file3 && chmod 000 file4"}, "description": "Create a group called \"fileaccess\" that will have only read permission, add users melissa and mike to it and ensure that members of this group can read file1 and file2, but cannot read file3 and cannot execute file4", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(groups melissa | grep fileaccess) && [ ! -r /home/melissa/file1 ] && [ -r /home/melissa/file2 ] && [ ! -r /home/melissa/file3 ] && [ -x /home/melissa/file4 ]"}, "example": {"type": "command", "data": "groupadd fileaccess && usermod -aG fileaccess melissa && usermod -aG fileaccess mike && chmod g+r file1 file2 && chmod 000 file3 && chmod 755 file4"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'Hello, Linux!' > /home/john/message && touch /home/john/important && touch /home/john/not-so-important && chmod 600 /home/john/important && chmod 644 /home/john/not-so-important"}, "description": "List the files in John's home directory (/home/john) while hiding the files that start with '.' and also use long listing format (permissions, owner, group, size, and modification date).", "evaluation": {"type": "output", "answer": "total 4\n-rw-r--r-- 1 john john 15 Jul  9 21:11 message\n-rw-r--r-- 1 john john  0 Jul  9 21:11 not-so-important\n-rw------- 1 john john  0 Jul  9 21:11 important\n", "checking": null, "example": {"type": "command", "data": "ls -la /home/john"}}, "labels": ["permission", "list"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/tech && mkdir /home/tech/secret && Touch /home/tech/secret/zuyo && chmod 640 /home/tech/secret/zuyo && useradd -s /bin/bash -d /home/linus -m linus"}, "description": "give linus read permissions for the /home/tech/secret/zuyo file, without changing group ownership for the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -la /home/tech/secret/zuyo | awk '{if ($1~/^-r--r-----./) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod o+r /home/tech/secret/zuyo"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jenkins -m jenkins && cd /home/jenkins && mkdir workdir && touch workdir/file.txt"}, "description": "Set the permission of the 'workdir' directory and its contents such that only the owner and the group members can both read and write, but nobody else can. Also set it such that any file or directory created inside 'workdir' automatically gets the same ownership, group ownership, and permission that is set for 'workdir'.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/jenkins/workdir ! -group jenkins -ls && find /home/jenkins/workdir ! -perm 664 -ls && find /home/jenkins/workdir/ ! -user jenkins -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+rwX /home/jenkins/workdir && chmod -R g+s /home/jenkins/workdir"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && useradd -s /bin/bash -d /home/tom -m tom && chmod -R 770 /home && chown -R mike:tom /home/mike && mkdir /home/mike/test && touch /home/mike/test/file.txt && chmod 100 /home/mike/test/file.txt"}, "description": "Mike wants to allow Tom to access his file in /home/mike/test/file.txt. What is the most appropriate way to do this?", "evaluation": {"type": "multiple-choice", "options": ["Change the file ownership to Tom", "Add Tom to Mike's group", "Change the file permission to 777", "Change the file permission to 660", "Copy the file to Tom's home directory"], "answer": "Add Tom to Mike's group", "explanation": "The most appropriate way to do this is to add Tom to Mike's group and give the file permission 664 or 660 so that Tom can read the file. Changing the ownership of the file to Tom is not appropriate because Mike will lose access to the file. Changing the file permission to 777 is not appropriate because it gives everyone full access to the file. Changing the file permission to 660 also works, but it restricts group members from executing the file."}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && useradd -s /bin/bash -d /home/john -m john && echo 'This is a highly confidential file' > /home/alex/secret.txt && chown alex:john /home/alex/secret.txt && find /home/alex/ -type f -exec chmod 440 {} +"}, "description": "Alex wants John to read his secret.txt file but doesn't want him to modify it. Help Alex achieve this goal.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/alex/secret.txt && echo '' && sudo -u john cat /home/alex/secret.txt) | if [ \"$(cat -)\" = \"This is a highly confidential file$'\\n'$'\\n'$'\\n'This is a highly confidential file$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 440 /home/alex/secret.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /shared && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && chgrp john /shared && chmod 2770 /shared && touch /shared/file.txt && chown john /shared/file.txt && chmod 660 /shared/file.txt"}, "description": "Set permissions to allow both john and jane to read and write to the /shared/file.txt file, but not delete it or rename it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -Hu john test -w /shared/file.txt && sudo -Hu john test -r /shared/file.txt && sudo -Hu jane test -w /shared/file.txt && sudo -Hu jane test -r /shared/file.txt && sudo -Hu john rm /shared/file.txt && echo 'success' && exit) || echo 'failed'"}, "example": {"type": "command", "data": "chmod +t /shared && chmod g+rw /shared/file.txt && chattr +a /shared/file.txt"}}, "labels": ["permission", "shared folder"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && mkdir /home/shared && chgrp users /home/shared && chmod g+s /home/shared && touch /home/shared/file1 && touch /home/shared/file2 && chgrp users /home/shared/file1 && chgrp users /home/shared/file2 && chmod g+rw /home/shared/file1 && chmod g+r /home/shared/file2"}, "description": "Create a new group named 'users' and add both 'user1' and 'user2' to this group. Then, assign group ownership of the '/home/shared' directory to 'users' and create two files named 'test1.txt' and 'test2.txt' in the directory. Set read and write permissions for 'test1.txt' for the group 'users' and read permission only for 'test2.txt' for the group 'users'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/shared | grep drwxrwsr-x) && (ls -l /home/shared | grep -w users) && (ls -l /home/shared/file1 | grep -w -- 'rw-rw----') && (ls -l /home/shared/file2 | grep -w -- 'r--r-----')"}, "example": {"type": "command", "data": "groupadd users && usermod -aG users user1 && usermod -aG users user2 && touch /home/shared/test1.txt && touch /home/shared/test2.txt && chgrp users /home/shared/test1.txt && chgrp users /home/shared/test2.txt && chmod g+rw /home/shared/test1.txt && chmod g+r /home/shared/test2.txt"}}, "labels": ["permission", "user", "group"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/alice -m alice && groupadd secret && usermod -a -G secret bob && usermod -a -G secret alice && cd /home/bob && mkdir secret_folder && touch secret_folder/secret_file && echo 'hello' > secret_folder/secret_file && chgrp secret secret_folder/secret_file"}, "description": "Alice and Bob belong to the same group 'secret'. Alice needs to read the file '/home/bob/secret_folder/secret_file'.  How can Alice read the file without changing the permissions of this file?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l alice -c 'cat /home/bob/secret_folder/secret_file' | if [ \"$(cat -)\" = \"hello\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+r /home/bob/secret_folder/secret_file"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/Bob -m Bob && echo 'BobPwd' | passwd Bob --stdin"}, "description": "Set a file to be writable only by the user Bob. Verify that it cannot be written to by another user. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u Bob touch ~/BobPrivilegedFile && echo 'test' > ~/BobPrivilegedFile && cat ~/BobPrivilegedFile && sudo -u Alice sh -c 'echo \"will fail\" > ~/BobPrivilegedFile 2>&1 | grep -q \"Permission denied\"' && sudo rm -f ~/BobPrivilegedFile) | if [ \"$(cat -)\" = \"test\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "touch ~/BobPrivilegedFile && chmod 600 ~/BobPrivilegedFile && echo 'test' > ~/BobPrivilegedFile && sudo -u Alice sh -c 'echo \"will fail\" > ~/BobPrivilegedFile 2>&1 | grep -q \"Permission denied\"' && sudo -u Bob cat ~/BobPrivilegedFile && rm -f ~/BobPrivilegedFile"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && cd /home/alex && mkdir project && cd project && touch file1 && touch file2 && sudo chown alex:alex file1 && sudo chown alex:alex file2"}, "description": "Set the permissions of file1 so that the owner (alex) has read, write, and execute permissions, but group and others can only read the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "stat file1 | grep Access | awk '{if ($2==\"(0774/-rwxrwxr--)\" && $4==\"(0700/-rwx------)\") { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 0744 file1 && chmod 0700 file2"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/steve -m steve && cd /home/steve && echo 'I am the CEO' > company_secret && chmod 600 company_secret"}, "description": "You are a regular employee and can't access the CEO's company_secret file. However, you want to read its contents. Please describe the steps you would take to do so, assuming that you do not have root privileges.", "evaluation": {"type": "free-form", "answer": "One possible solution would be to create a new group, add your user to it, change the ownership of the company_secret file to the new group, set the group permissions to read-only, and then change your user's primary group to the new group with the newgrp command. Alternatively, you could attempt to use a privilege escalation vulnerability to gain access to root privileges, but this is not desirable.", "checking": null, "example": null}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "apt update && apt install sudo -y && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/emma -m emma && useradd -s /bin/bash -d /home/peter -m peter && echo 'john,emma,peter ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers"}, "description": "Add the user 'lucas' to the 'sudo' group so that he has administrative privileges and can use sudo commands without a password.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "groups lucas | grep -o 'sudo' | if grep -q 'sudo'; then echo 'lucas is part of the sudo group'; else echo 'lucas is not part of the sudo group'; fi && sudo -l -U lucas | grep -q 'NOPASSWD: ALL' && echo 'lucas can use sudo without password';"}, "example": {"type": "command", "data": "usermod -aG sudo lucas"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkfs.ext4 /dev/sda1 && mount /dev/sda1 /mnt && touch /mnt/testfile && chcon -t httpd_sys_content_t /mnt/testfile && umount /mnt"}, "description": "You want to create an ext4 filesystem on /dev/sda1, mount it, and ensure that the file /mnt/testfile is labeled with the httpd_sys_content_t context. How would you do this?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "mount -t ext4 | grep /dev/sda1 > /dev/null && ls -Z /mnt/testfile | grep httpd_sys_content_t > /dev/null"}, "example": {"type": "command", "data": "mkfs.ext4 /dev/sda1 && mount /dev/sda1 /mnt && touch /mnt/testfile && chcon -t httpd_sys_content_t /mnt/testfile && umount /mnt"}}, "labels": ["filesystem", "permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /myfolder && touch /myfolder/myfile && chmod ugo-rwx /myfolder && chmod u+rwx /myfolder/myfile"}, "description": "Create a new user named 'user1' and allow them read access to /myfolder/myfile and only execute access to /myfolder", "evaluation": {"type": "ground-truth", "answer": "You can use the command: 'useradd user1' to create a new user named 'user1'. To allow them read access to /myfolder/myfile only, you can grant the user read permission using 'chmod u+r /myfolder/myfile'. To restrict the user's access to /myfolder to only execute, use 'chmod u+x /myfolder'.", "checking": null, "example": {"type": "command", "data": "useradd user1 && chmod u+r /myfolder/myfile && chmod u+x /myfolder"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/susan -m susan && useradd -s /bin/bash -d /home/mike -m mike && useradd -s /bin/bash -d /home/bob -m bob && echo 'susan ALL=(ALL) NOPASSWD:/usr/bin/apt-get' >> /etc/sudoers"}, "description": "Configure sudo for user mike and bob to allow them to run any command as root without password, while susan can only run the apt-get command without password. Make sure to verify the configuration works as expected", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u mike whoami && sudo -u mike -i touch /tmp/test && sudo -u bob whoami && sudo -u bob -i touch /tmp/test && sudo -u susan whoami && sudo -u susan -i apt-get update) | if [ \"$(cat -)\" = \"mike\nbob\nroot\"$'\\n''\nroot' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'mike ALL=(ALL) NOPASSWD: ALL\nbob ALL=(ALL) NOPASSWD: ALL\nsusan ALL=(ALL) NOPASSWD:/usr/bin/apt-get' >> /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jessica -m jessica && echo 'jessica ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers"}, "description": "Grant permission to jessica to run all commands using sudo, without prompting for password", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo whoami | if [ \"$(cat -)\" = \"root\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'jessica ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers"}}, "labels": ["permission", "sudo"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -d /home/user1 -m user1 && groupadd -f admin && usermod -aG admin user1 && chown -R user1 /home/user1 && chmod -R 700 /home/user1 && touch /home/user1/file1 && chown user1:admin /home/user1/file1 && chmod 640 /home/user1/file1 && su - user1"}, "description": "Create a user 'user1' with home directory '/home/user1' and a file 'file1' owned by user 'user1' and group 'admin'. Only allow user 'user1' to access this file, while members of group 'admin' should be able to read it. Also, ensure that the home directory of 'user1' is owned by 'user1' and that only 'user1' has access to it.", "evaluation": {"type": "ground-truth", "answer": "success", "checking": {"type": "command", "data": "grep -q '^admin' /etc/group && [ $(stat -c '%a' /home/user1) == '700' ] && [ $(stat -c '%U' /home/user1) == 'user1' ] && [ $(stat -c '%a' /home/user1/file1) == '640' ] && [ $(stat -c '%U:%G' /home/user1/file1) == 'user1:admin' ] && su - user1 -c '[ -r /home/user1/file1 ]' && su - user1 -c 'touch /home/user1/file1 && [ $? -eq 1 ]' && su - user1 -c 'touch /home/user1/newfile && [ $? -eq 0 ]' && cp /home/user1/file1 /tmp/ && chgrp root /tmp/file1 && su - user1 -c 'rm /home/user1/file1 && [ $? -eq 1 ]' && su - user1 -c 'cat /tmp/file1 && [ $? -eq 0 ]' && su - user1 -c 'echo secret | tee /home/user1/file1 && [ $? -eq 0 ]' && su - user1 -c 'cat /home/user1/file1 | grep secret && [ $? -eq 0 ]'"}, "example": {"type": "command", "data": ""}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && mkdir /var/important && touch /var/important/info && chmod 0640 /var/important/info && chown root:jane /var/important/info"}, "description": "jane needs to read /var/important/info but cannot modify it. Give jane read-only access to the file while keeping it secure from other users.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l jane -c 'cat /var/important/info' | if [ \"$(cat -)\" = \"This information is confidential.\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 0440 /var/important/info"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/pat -m pat && useradd -s /bin/bash -d /home/david -m david && passwd david && cd /home/david && mkdir pics && chown david:pics pics && chmod 771 pics && touch pics/funny.jpg && chown david:david pics/funny.jpg && chmod 740 pics/funny.jpg && touch pics/cool.jpg && chown pat:pics pics/cool.jpg && chmod 660 pics/cool.jpg"}, "description": "List all files in the /home/david directory, showing the permissions and owners of each file", "evaluation": {"type": "output", "answer": "total 0\n-rwxr-xr-x 1 david pics 0 Apr 15 12:34 cool.jpg\n-rw-r----- 1 david david 0 Apr 15 12:33 funny.jpg", "checking": null, "example": {"type": "command", "data": "cd /home/david && ls -l"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/amy -m amy && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/chris -m chris && useradd -s /bin/bash -d /home/david -m david && echo 'amy ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers"}, "description": "Ensure that amy can execute the command /usr/bin/ls with sudo rights, but bob, chris and david cannot. If there is any existing rule that allows them to do so, remove it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u amy sudo /usr/bin/ls && (sudo -u bob sudo /usr/bin/ls || sudo -u chris sudo /usr/bin/ls || sudo -u david sudo /usr/bin/ls) | if [ \"$(cat -)\" = \"/usr/bin/ls\"$'\\n''/usr/bin/ls: command not found' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'amy ALL=(ALL) NOPASSWD:/usr/bin/ls' >> /etc/sudoers"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && cd /home/mike && echo 'secret file' > secret && chmod 400 secret &&chown mike secret"}, "description": "Give group write permissions to the directory but don't let them delete, rename or change the files, to achieve this make use of sticky bits and correct permissions", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cd /home && sudo chmod g+w mike && sudo chmod -R +t mike && sudo ls -l mike | awk '{if ($1!~/drwxr.{2}wt.{2} mike mike/) { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "chmod g+x /home/mike && chmod g+w /home/mike && chmod -R +t /home/mike"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && cd /home/jack && mkdir test && cd test && touch file1 && touch file2"}, "description": "Give read and write permissions to user \"jack\" for file1 and to user \"root\" for file2. Ensure that no other user or group has any permission for these files.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/jack/test | grep \"file1\" | awk '{if ($1~/^-rw-------/) { exit 0; } else { exit 1; } }') && (ls -l /home/jack/test | grep \"file2\" | awk '{if ($1~/^-rw-------/ && $3==\"root\") { exit 0; } else { exit 1; } }')"}, "example": {"type": "command", "data": "chmod 600 file1 && chown jack file1 && chmod 600 file2 && chown root file2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/admin -m admin && echo 'admin ALL=(ALL) ALL' >> /etc/sudoers && echo 'userpassword' | passwd admin --stdin"}, "description": "Create a new administrator user 'admin' with password 'userpassword' and give him sudo access", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -l -U admin | grep -o '\\(ALL\\)\\(\\s\\)*ALL' | if [ \"$(cat -)\" = \"ALL ALL\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/admin -m admin && echo 'admin ALL=(ALL) ALL' >> /etc/sudoers && echo 'userpassword' | passwd admin --stdin"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && cd /home/mark && mkdir documents && touch documents/document1 && touch documents/document2 && chown mark:mark documents/document1 && chown root:root documents/document2 && chmod 640 documents/document1 && chmod 777 documents/document2"}, "description": "Explain the file permission settings for the two files in the /home/mark/documents directory", "evaluation": {"type": "ground-truth", "answer": "document1 is owned by mark and has read and write permissions for the owner, read permission for the group, and no permissions for everyone else. document2 is owned by root and has read, write, and execute permissions for the owner, group, and everyone else.", "checking": null, "example": {"type": "command", "data": ""}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jimmy -m jimmy && cd /home/jimmy && echo 'password123' > important_file && chmod 400 important_file && chown jimmy important_file && su - jimmy"}, "description": "As a user, I need to read ~/important_file but prevent others from reading it. What are the correct permissions to set?", "evaluation": {"type": "ground-truth", "answer": "400", "checking": null, "example": {"type": "command", "data": "cat ~/important_file"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir workdir && cd workdir && touch file1 && touch file2 && chown john:john * && chmod u=rw,g=r,o-rwx * && chmod g+s . && cd .. && mkdir shareddir && cd shareddir && touch sharedfile1 && touch sharedfile2 && chown john:developers * && chmod u=rw,g=rw,o-rwx *"}, "description": "You are a part of developers group. Create a soft link to sharedfile2 in workdir directory as file3. You should also be able to delete the soft link. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/john/workdir -type l ! -exec test -e {} \\; -ls && ls -l /home/john/workdir/file3 && [ ! -e /home/john/workdir/file3 ]) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "ln -s /home/john/shareddir/sharedfile2 /home/john/workdir/file3 && chmod g+w /home/john/workdir/file3"}}, "labels": ["symlink", "soft link", "permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir private && touch private/note.txt && echo 'This is a private note.' > private/note.txt && chmod 400 private/note.txt && chown jane private/note.txt && su - jane"}, "description": "Read the contents of the file ~/private/note.txt without changing the file permissions or ownership and without copying the file or its contents anywhere else.", "evaluation": {"type": "ground-truth", "answer": "This is a private note.", "checking": null, "example": {"type": "command", "data": "cat ~/private/note.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && echo 'hello' > test.txt"}, "description": "Give only the owner read/write permissions to test.txt", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/bob/test.txt | awk '{if ($1!~/^-.rw-------/) {exit 1} else {exit 0}}'"}, "example": {"type": "command", "data": "chmod 600 /home/bob/test.txt"}}, "labels": ["permission", "owner"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'secret-password-for-john' | passwd john --stdin"}, "description": "Change the permission of the file /home/john/myfile to 400", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/myfile | awk '{if ($1~/^-.r--------/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 400 /home/john/myfile"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/anna -m anna && useradd -s /bin/bash -d /home/david -m david && useradd -s /bin/bash -d /home/joan -m joan && echo 'anna ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && echo 'david ALL=NOPASSWD:/usr/bin/find' >> /etc/sudoers && su - anna && mkdir /home/anna/secure && touch /home/anna/secure/testfile && chown anna:root /home/anna/secure/testfile && chmod 740 /home/anna/secure/testfile && echo 'hello' > /home/anna/secure/testfile"}, "description": "anna has a file in a folder named secure, which should not be accessible by anyone other than anna and root. Suppose joan makes an attempt to access the file. Create a command that will log the attempt but not grant joan access to the folder", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "@/var/log/attempt.log && chmod o-rx /home/anna && cd /home/anna && find secure -print0 | xargs -0 chmod o+rx && echo 'unauthorized access attempt in /home/anna/secure made by: ' && whoami >> /var/log/attempt.log && find secure -print0 | xargs -0 chmod o-rx"}, "example": {"type": "command", "data": "touch /var/log/attempt.log && chown root:root /var/log/attempt.log && chmod 640 /var/log/attempt.log"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "adduser frank && adduser john && mkdir /home/my_folder && touch /home/my_folder/my_file && chown frank:john /home/my_folder && chown frank:john /home/my_folder/my_file && chmod 640 /home/my_folder/my_file"}, "description": "Allow frank to read and write /home/my_folder/my_file, allow john to only read it. No one else should have access", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u frank cat /home/my_folder/my_file && sudo -u john cat /home/my_folder/my_file && sudo -u nobody cat /home/my_folder/my_file) | if [ \"$(cat -)\" = \"my secret data\"$'\\n''my secret data'$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 /home/my_folder/my_file && setfacl -m u:frank:rw /home/my_folder/my_file && setfacl -m u:john:r /home/my_folder/my_file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'echo 123' > /home/john/script.sh && chmod 700 /home/john/script.sh"}, "description": "Create a script that will be run by john with root privileges using sudo. The script should display the current time and date in the format 'YYYY.MM.DD - HH:MM:SS'", "evaluation": {"type": "ground-truth", "answer": "YYYY.MM.DD - HH:MM:SS", "checking": null, "example": {"type": "command", "data": "sudo /home/john/script.sh"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir secret && cd secret && touch file1.txt && touch file2.txt && chmod 600 file1.txt && chmod 400 file2.txt && cd ../ && chmod 700 secret && su - john"}, "description": "John has a secret folder in his home directory with two files, file1.txt and file2.txt, file1.txt is only readable by him, and file2.txt is only readable by him and can't be edited or executed by him or others. Given the above scenario, create a group named 'secret_access' and grant the group read permission on both files and execute permission on the secret folder.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - john -c 'groups john' | if [ \"$(cat -)\" = \"john\"$'\\n'\"secret_access\" ]; then find ~/secret -type f ! -perm 460 -ls | wc -l | if [ \"$(cat -)\" = \"0\" ]; then exit 0; else exit 1; fi; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd secret_access && usermod -a -G secret_access john && chgrp secret_access ~/secret/file1.txt && chgrp secret_access ~/secret/file2.txt && chmod 640 ~/secret/file1.txt && chmod 440 ~/secret/file2.txt && chmod 751 ~/secret"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && echo 'secret message for user jack' > /home/jack/message && chmod 600 /home/jack/message"}, "description": "Grant read access of the file /home/jack/message to only user tom and group admins and ensure no other users/groups are able to access the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u tom cat /home/jack/message || echo 'no access') && sudo -u admin cat /home/jack/message && (sudo -u george cat /home/jack/message || echo 'no access')"}, "example": {"type": "command", "data": "chown jack:admins /home/jack/message && chmod 640 /home/jack/message && usermod -a -G admins tom"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/admin -m admin && echo 'admin ALL=(ALL) NOPASSWD:/usr/bin/apt-get install' >> /etc/sudoers"}, "description": "Give admin user permission to only run `apt-get install` without password", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo --non-interactive apt-get install tree | if [ \"$(cat -)\" = \"Reading package lists... Done\"$'\\n'\"Building dependency tree       \" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sed -i 's/^-Defaults.*requiretty/#&/' /etc/sudoers && echo 'Defaults:admin !requiretty' >> /etc/sudoers"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && useradd -s /bin/bash -d /home/bill -m bill && useradd -s /bin/bash -d /home/tom -m tom && chmod 700 /home/bill && chmod 700 /home/tom && echo 'Good job!' > /home/jack/file && chmod 600 /home/jack/file"}, "description": "Allow jack to read the file in his home directory, and prevent tom and bill from accessing it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l jack -c 'cat ~/file' && runuser -l bill -c 'cat ~/file' && runuser -l tom -c 'cat ~/file') | if [ \"$(cat -)\" = \"Good job!\"$'\\n'$'(Permission denied)'$'\\n'$'(Permission denied)' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 /home/jack/file && chown jack /home/jack/file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /protected_folder && touch /protected_folder/secrets && chmod 600 /protected_folder/secrets"}, "description": "Create a group called secret_access and add yourself and two other users to the group. Allow the group to read the /protected_folder/secrets file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(groups $USER | grep -q secret_access) && (ls -l /protected_folder/secrets | awk '{if ($1~/^..-..------/) { exit 0; } else { exit 1; } }')"}, "example": {"type": "command", "data": "groupadd secret_access && usermod -a -G secret_access $USER && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && usermod -a -G secret_access john && usermod -a -G secret_access jane && chmod g+r /protected_folder/secrets"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "adduser user1 && adduser user2 && adduser user3 && mkdir /home/shared_folder && chgrp -R users /home/shared_folder && chmod g+s /home/shared_folder && echo 'This is a shared file' > /home/shared_folder/shared_file && chmod g+rw /home/shared_folder/shared_file"}, "description": "Create 3 users 'user1', 'user2', and 'user3'. Create a shared folder '/home/shared_folder'. Add all 3 users to the 'users' group. Make sure the 3 users can all read and write to the shared folder and the shared file inside, while ensuring no files created by the users inside the shared folder can be modified by users outside the group. ", "evaluation": {"type": "ground-truth", "answer": "user1, user2, and user3 should be able to create files in /home/shared_folder and edit the shared_file, but no user outside the 'users' group should be able to modify any files created by the users.", "checking": null, "example": {"type": "command", "data": ""}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && touch /home/user1/file1 && touch /home/user2/file2"}, "description": "Give user2 permission to read file1 without changing its owner or group.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l user2 -c 'cat /home/user1/file1' | if [ \"$(cat -)\" = \"\" ]; then exit 1; else exit 0; fi"}, "example": {"type": "command", "data": "chmod o+r /home/user1/file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && echo 'final exam is tough!' > test && chmod 700 test && chown jane test && su - jane"}, "description": "execute ~/test as jane and get the output", "evaluation": {"type": "ground-truth", "answer": "final exam is tough!", "checking": null, "example": {"type": "command", "data": "~/test"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && useradd -s /bin/bash -d /home/bill -m bill && echo 'content' > /etc/file.txt && chown jack /etc/file.txt && chmod 400 /etc/file.txt"}, "description": "Set permissions such that only the user \"jack\" can read the file \"/etc/file.txt\" but \"bill\" cannot read or modify the file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u bill cat /etc/file.txt && sudo -u jack cat /etc/file.txt | if [ \"$(cat -)\" = \"content\"$'\\n'\"content\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 400 /etc/file.txt && chown jack /etc/file.txt && chgrp jack /etc/file.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir books && cd books && echo 'my secret book.' > secret && chmod 400 secret"}, "description": "Grant read permission to john's friend samuel on the secret book in john's directory without changing the permission on john's directory or the file for anyone else.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/john/books/secret | awk '{if ($1!=/^-r--------/) { exit 1; } } {if ($3==\"john\" && $4==\"john\") {exit 1;}} {if ($3==\"samuel\" && $4!=\"samuel\") {exit 1;}} {if ($3==\"samuel\" && $4==\"samuel\" && $1!=/^-r--------/) {exit 1;}};')"}, "example": {"type": "command", "data": "setfacl -m user:samuel:r /home/john/books/secret"}}, "labels": ["permission", "ACL"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir files && cd files && touch file1 && touch file2 && chmod 733 . && su - jane"}, "description": "Jane has a directory /home/jane/files with two files file1 and file2. Give user 'joe' read-write access to both files but keep the directory permissions intact. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u joe cat /home/jane/files/file1 && sudo -u joe cat /home/jane/files/file2) | if [ \"$(cat -)\" = \"janejane\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo usermod -aG jane joe && sudo chmod 722 /home/jane/files/file1 /home/jane/files/file2"}}, "labels": ["permission", "access rights"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && cd /home/jack && echo 'hello world' > test.txt"}, "description": "Change permissions of test.txt so that only owner can read and write to the file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/jack/test.txt | awk '{print $1}' | grep '^-.rw-------$'"}, "example": {"type": "command", "data": "chmod 600 /home/jack/test.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/david -m david && useradd -s /bin/bash -d /home/mark -m mark && groupadd finance && usermod -a -G finance john && usermod -a -G finance jane && touch /finance-report.csv && chgrp -R finance /finance-report.csv && chmod -R g+r /finance-report.csv"}, "description": "A group named \"finance\" has access to a file called '/finance-report.csv', with group permissions set to read-only. Allow only group owners to create, modify, or delete files and directories within '/finance-report.csv'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cd / && touch /finance-report.csv && chown root:finance /finance-report.csv && chmod 640 /finance-report.csv && gpasswd -a john finance && gpasswd -a jane finance && su - john && echo 'finance report for July' > /finance-report.csv/test && cd /finance-report.csv && touch testfile && chown john:finance testfile && chmod 660 testfile && rm -rf testfile && su - jane && touch testfile && chmod 660 testfile && rm -rf testfile && su - david && touch /finance-report.csv/testfile && chown david:finance /finance-report.csv/testfile && chmod 660 /finance-report.csv/testfile && rm -rf /finance-report.csv/testfile && echo 'data' > /finance-report.csv/testfile && echo 'john ALL=(john:finance) /bin/*' | tee -a /etc/sudoers"}, "example": {"type": "command", "data": "chmod g+s /finance-report.csv"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/jane -m jane && cd /home/bob && touch bobfile.txt && chown bob:bob bobfile.txt && chmod 600 bobfile.txt"}, "description": "Give Alice and Jane read access to bobfile.txt. Don't give write or execute access to any of the users", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(getfacl /home/bob/bobfile.txt | grep 'user::rw-' | grep 'group::r--' | grep 'other::---' | grep 'user:alice:r--' | grep 'user:jane:r--') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 /home/bob/bobfile.txt && setfacl -m u:alice:r,u:jane:r /home/bob/bobfile.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m john && echo 'secretpassword' | passwd --stdin john"}, "description": "Create a group named 'secure' and add john to this group. Change the permissions of the home directory of john so that only the owner can read or modify the files, and members of the 'secure' group can only read the files", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - john -c '[ -r ~ ]' && su - john -c '[ -w ~ ]' && su - john -c 'groups | grep secure') | if [ \"$(cat -)\" = \"true$'\\n'true$'\\n'secure\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd secure && usermod -aG secure john && chmod 700 /home/john"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /var/logs && touch /var/logs/app.log && touch /var/logs/sys.log && chgrp root /var/logs && chmod g+w /var/logs && chown john /var/logs/app.log && chown root /var/logs/sys.log"}, "description": "Create a directory '/var/logs' and two files 'app.log' and 'sys.log' inside it. The 'app.log' should be owned by user 'john' and the 'sys.log' should be owned by the user 'root'. All users that belong to the 'root' group should have write permission to the '/var/logs' directory, but only the user 'john' should have read and write permissions to the 'app.log'.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -ld /var/logs && ls -l /var/logs/app.log && ls -l /var/logs/sys.log"}, "example": {"type": "command", "data": "chmod g+w /var/logs && chown john /var/logs/app.log && chown root /var/logs/sys.log && chmod 770 /var/logs"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'hello world' > /home/john/test.txt && chmod 400 /home/john/test.txt"}, "description": "How can you prevent john from reading his own file /home/john/test.txt?", "evaluation": {"type": "ground-truth", "answer": "By removing read permission for john on /home/john/test.txt", "checking": null, "example": {"type": "command", "data": "chmod o-r /home/john/test.txt && su john -c 'cat /home/john/test.txt'"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob"}, "description": "Give only read permission to the owner of file.txt and no permissions to anyone else.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/bob/file.txt | awk '{if ($1~/^-r......../ && $3~/^bob$/ && $4~/^bob$/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 400 /home/bob/file.txt"}}, "labels": ["permission", "owner"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && touch testfile && chown bob:admin testfile && chmod u=rwx,g=rx,o= testfile && useradd -s /bin/bash -d /home/alice -m alice"}, "description": "Alice needs to access the file /home/bob/testfile, but she is not a member of the group admin. Add her to the group and make sure she can access the file but cannot modify it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(groups alice | grep -o admin; stat /home/bob/testfile | grep 'Access: (0664/' | grep 'Uid: ( 1001/' | grep 'Gid: ( 1005/' | grep -o admin) | if [ \"$(cat -)\" = \"admin$\\nadmin\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G admin alice && chmod g=r testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && su - john"}, "description": "Create a new file called 'hello' in the home directory of user 'john' and set it to be readable, writable, and executable by the owner only.", "evaluation": {"type": "ground-truth", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/hello | awk '{if ($1~/^-rwx------/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "touch /home/john/hello && chmod 700 /home/john/hello"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && useradd -s /bin/bash -d /home/user3 -m user3 && echo 'user1 ALL=(ALL) NOPASSWD:/bin/ls' > /etc/sudoers.d/user1 && echo 'user2 ALL=(ALL) NOPASSWD:/usr/bin/whoami' > /etc/sudoers.d/user2 && echo 'user3 ALL=(ALL) NOPASSWD:/usr/bin/printf' > /etc/sudoers.d/user3"}, "description": "There are three users: user1, user2 and user3. user1 can only run `ls` with sudo, user2 can only run `whoami` with sudo, and user3 can only run `printf` with sudo. Help user2 execute `whoami` with sudo and get the output.", "evaluation": {"type": "ground-truth", "answer": "root", "checking": null, "example": {"type": "command", "data": "sudo -u user2 whoami"}}, "labels": ["permission", "sudo", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'secret_password' > password.txt && chmod 400 password.txt"}, "description": "Change the permission of the password.txt file so that everyone in the 'guests' group can read it but cannot modify/delete it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "touch /home/guest/password.txt && sudo chmod 444 /home/guest/password.txt && sudo cat /home/john/password.txt > /home/guest/password.txt && cmp --silent /home/john/password.txt /home/guest/password.txt || exit 1"}, "example": {"type": "command", "data": "groupadd guests && usermod -a -G guests john && chmod g+r /home/john/password.txt && chown john:guests /home/john/password.txt"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && find /home -type f -name '*.txt' -exec chmod u=rw,g=r,o= {} + && find /home -type d -exec chmod u=rwx,g=rx,o= {} + && chown alice:alice /home/alice && chown bob:bob /home/bob"}, "description": "Alice has a file named 'secret.txt' in her home directory, but Bob is not allowed to read it. Please modify the permissions so that only Alice can read and write to the file, and no one else can access the file in any way.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(chmod u=rw,g=,o= /home/alice/secret.txt && su - bob -c 'cat /home/alice/secret.txt' && echo 'Unauthorized access!' || echo 'Access denied.') | if [ \"$(cat -)\" = \"Access denied.\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod u=r,g=,o= /home/alice/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user -m user && cd /home/user && mkdir project && cd project && touch file1.txt && touch file2.txt && touch file3.txt"}, "description": "Give read and write access to user2 and user3 for file1.txt and file2.txt. User2 should also have execute permission for file1.txt", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l file1.txt | awk '{print $1,$3,$4}' | grep -q '^-rw-rw---- user2 user3' && ls -l file2.txt | awk '{print $1,$3,$4}' | grep -q '^-rw-rw---- user2 user3' && ls -l file1.txt | awk '{print $1,$3,$4}' | grep -q '^-rwxr----x user2 user user' ) && (! ls -l file3.txt | awk '{print $1,$3,$4}' | grep -q '^-rw-rw---- user2 user3') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod u+x file1.txt && chmod 660 file1.txt file2.txt && chown user2:user3 file1.txt file2.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && useradd -s /bin/bash -d /home/nathan -m nathan && cd /home/emma && mkdir docs && touch docs/notes.txt && chown emma:emma docs/notes.txt && chown nathan:nathan ."}, "description": "emma and nathan are two different users who use the same machine. Give read/write access of the file 'notes.txt' in the directory 'docs' to both emma and nathan.", "evaluation": {"type": "ground-truth", "answer": null, "checking": null, "example": {"type": "command", "data": "chmod 660 /home/emma/docs/notes.txt && chmod g+rw /home/emma/docs/notes.txt && sudo usermod -a -G emma nathan"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'hello world' > greeting.txt"}, "description": "Change the owner of greeting.txt to mary", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/greeting.txt | awk '{if ($3 == \"mary\") { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chown mary /home/john/greeting.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/james -m james && cd /home/james && mkdir -p folder1/folder2 && touch folder1/file1 && touch folder1/folder2/file2 && chmod -R u=rwX,g=rX,o= folder1/ && chown james: folder1/ -R && su - james"}, "description": "navigate to /home/james/folder1/folder2 and rename file2 to newFile without using sudo", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "[ ! -f /home/james/folder1/folder2/file2 ] && [ -f /home/james/folder1/folder2/newFile ]"}, "example": {"type": "command", "data": "cd /home/james/folder1/folder2 && mv file2 newFile"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/Alice -m Alice && useradd -s /bin/bash -d /home/Bob -m Bob && chown Alice /home/Alice && chown Bob /home/Bob && usermod -aG adm Alice && chmod g+w /home/Alice"}, "description": "Alice and Bob share a computer. However, Alice needs to access the files on her home directory and Bob is not allowed to access them. Update the permissions to enforce this rule given that Alice is a member of the adm group.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo ls -ld /home/Alice | awk '{print $1,$3,$4}' | grep '^drwxrwx--x Alice adm$' && sudo ls -ld /home/Bob|awk '{print $1,$3,$4}' | grep '^drwxr-xr-x Bob Bob$') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 750 /home/Alice && chmod 755 /home/Bob"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && useradd -s /bin/bash -d /home/bob -m bob && touch file && chmod 644 file"}, "description": "Set file permission such that both users: 'alex' and 'bob' can read the file but only 'alex' can write to it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su -c 'cat file' alex && su -c 'cat file' bob && su -c 'echo hi > file' alex && su -c 'echo hi > file' bob && cat file) | if [ \"$(cat -)\" = \"file\\nfile\\necho: write error: Permission denied\\necho: write error: Permission denied\\nfile\\nhi\\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 664 file && chown alex file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd john && useradd peter && useradd mike && mkdir /var/data && touch /var/data/file.txt && chown root:john /var/data/file.txt && chmod 640 /var/data/file.txt"}, "description": "Make sure that only users in the group `john` can read and write to /var/data/file.txt.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su peter -c 'echo hello > /var/data/file.txt && echo world >> /var/data/file.txt && cat /var/data/file.txt' | if [ \"$(cat -)\" = \"hello$'\\n'world$'\\n'\" ]; then exit 0; else exit 1; fi && su mike -c 'echo secret > /var/data/file.txt' 2>/dev/null; if [ $? -eq 1 ]; then exit 0; else exit 1; fi && su john -c 'echo confidential >> /var/data/file.txt && cat /var/data/file.txt' | if [ \"$(cat -)\" = \"hello$'\\n'world$'\\n'confidential$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 660 /var/data/file.txt && chgrp john /var/data/file.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /usr/sbin/nologin -d /home/eve -m eve && echo 'alice:'$(openssl passwd -crypt 'password') | chpasswd && echo 'eve:'$(openssl passwd -crypt 'password') | chpasswd && su - alice"}, "description": "Create a directory called \"shared\" under your home directory. Set its permission to be 770 and group ownership to be \"dataaccess\". Add user \"eve\" to the group \"dataaccess\". Then create a file called \"secret.txt\" in the shared directory and make sure only user \"alice\" and members of the group \"dataaccess\" can read the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -ld ~/shared | awk '{if ($1~/^drwxrwx---/) { exit 0; } else { exit 1; } }') && (ls -l ~/shared/secret.txt | awk '{if ($1~/^-rwxr-----/) { exit 0; } else { exit 1; } }') && (id -Gn eve | grep -q dataaccess)"}, "example": {"type": "command", "data": "mkdir ~/shared && chmod 770 ~/shared && chgrp dataaccess ~/shared && usermod -a -G dataaccess eve && touch ~/shared/secret.txt && chmod 640 ~/shared/secret.txt && chown alice:dataaccess ~/shared/secret.txt"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m bob && mkdir /home/bob/test && touch /home/bob/test/file && chmod 640 /home/bob/test/file && chown bob:root /home/bob/test/file && su - bob"}, "description": "As Bob, try to append 'world' to file. What happens?", "evaluation": {"type": "ground-truth", "answer": "Permission denied", "checking": null, "example": {"type": "command", "data": "echo 'hello' >> /home/bob/test/file && cat /home/bob/test/file"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && echo 'mike:p@ssword1' | chpasswd && useradd -s /bin/bash -d /home/jack -m jack && echo 'jack:p@ssword2' | chpasswd && useradd -s /bin/bash -d /home/eve -m eve && echo 'eve:p@ssword3' | chpasswd"}, "description": "Create a new user called adam, set his password to 'p@ssword4' and make him a member of the group 'users'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "id adam | if grep -q 'users'; then if echo 'p@ssword4' | su - adam -c 'sudo -S echo 1 >/dev/null 2>&1'; then exit 0; else exit 1; fi; else exit 1; fi"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/adam -m adam && echo 'adam:p@ssword4' | chpasswd && usermod -a -G users adam"}}, "labels": ["user", "password"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "cd /var/www && mkdir website && cd website && touch index.html && chown www-data:www-data index.html"}, "description": "Set permissions such that Apache web server can access the index.html file at /var/www/website/index.html, but other users cannot read or write to the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /var/www/website/index.html | grep -q 'rw-------.' && sudo -u www-data cat /var/www/website/index.html | grep -q 'Apache' && ! sudo -u <your_username> cat /var/www/website/index.html | grep -q 'Apache'"}, "example": {"type": "command", "data": "chmod 600 /var/www/website/index.html && chown www-data /var/www/website/index.html"}}, "labels": ["permission", "web server"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && useradd -s /bin/bash -d /home/brian -m brian && touch /mnt/file && chown alex /mnt/file"}, "description": "Give alex and brian read and write access to /mnt/file, but only give brian the power to modify or delete the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /mnt/file | awk '{if ($1~/^-rw-rw----./) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 660 /mnt/file && chown brian /mnt/file && chmod +t /mnt/file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/joe -m joe && mkdir /shared && cd /shared && touch file1 && touch file2 && chmod 777 /shared"}, "description": "Grant jane and john read and write permissions to /shared/file1, but only grant joe read permission to it. Grant all three users read and write permissions to /shared/file2", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /shared/file* | awk '{if (($1!~/rw.rw.r--./ && NR==1)||(NR>1 && $1!~/rw-rw-r--./)) { exit 1; }} END {if (NR!=3) { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "chmod 664 /shared/file1 && chown jane: /shared/file1 && chown john: /shared/file1 && chmod 444 /shared/file1 && chmod 666 /shared/file2"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jeremy -m jeremy && cd /home/jeremy && touch file1 && echo 'I am jeremy' > file1 && chmod u=rw,g=r,o=r file1"}, "description": "Create a new user named john and grant him read/write access to the file1 belonging to jeremy. Other users should not have any access to this file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(echo 'hello world' >> /home/jeremy/file1 && runuser -l john -c 'cat /home/jeremy/file1') | if [ \"$(cat -)\" = \"I am jeremy\nhello world\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && setfacl -m u:john:rw /home/jeremy/file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && mkdir testdir && cd testdir && touch testfile && chown bob testfile && chmod 660 testfile && ls -l"}, "description": "What are the permissions on 'testfile' and who owns it? Why can't another user see the file?", "evaluation": {"type": "written-answer", "answer": "The file permissions are set to 660, which means that the owner (bob) can read and write to the file, and the members of the group that the file belongs to can also read and write to the file. The file is owned by 'bob'. Another user may not be able to see the file because they are not a member of the group that the file belongs to, and do not have read permission.", "checking": null, "example": null}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sara -m sara && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/gina -m gina && mkdir /sharedfolder && chown john:gina /sharedfolder && chmod 770 /sharedfolder"}, "description": "Create a shared folder readable and writable by both John and Gina but not by Sara, and ensure that new files and directories created in that folder inherit group ownership and permissions", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john touch /sharedfolder/test1 && sudo -u gina touch /sharedfolder/test2 && sudo -u sara touch /sharedfolder/test3 && ls -l /sharedfolder | egrep '(^-..rw|drwxrwx)' | awk '{if ($3 !~ /sara/ && $4 !~ /sara/) { exit 0; } else { exit 1; } }') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+s /sharedfolder"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "echo 'top secret' > /home/jane/documents && useradd -s /bin/bash -d /home/bob -m bob && usermod -aG sudo bob"}, "description": "Bob has recently been added to the `sudo` group. He has been granted permission to use `sudo` to read the file `/home/jane/documents`. Demonstrate that Bob can indeed read the contents of the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - bob -c 'sudo cat /home/jane/documents'"}, "example": {"type": "command", "data": "echo 'bob ALL=(ALL) NOPASSWD: cat /home/jane/documents' >> /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && echo 'SECRET_ENV_VAR=12345' >> /home/alex/.bashrc"}, "description": "How can a user see the value of SECRET_ENV_VAR set by other user in .bashrc file?", "evaluation": {"type": "ground-truth", "answer": "source /home/alex/.bashrc; echo $SECRET_ENV_VAR", "checking": null, "example": {"type": "command", "data": "su - alex -c 'echo $SECRET_ENV_VAR'"}}, "labels": ["environment variables", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sharon -m sharon && useradd -s /bin/bash -d /home/admin -m admin && echo 'test' > /home/admin/file && chown admin:admin /home/admin/file && chmod 600 /home/admin/file"}, "description": "Sharon wants to be able to read the file /home/admin/file, but doesn't want to give her sudo access. How can she do this using file permissions?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - sharon -c 'cat /home/admin/file' | if [ \"$(cat -)\" = \"test\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+r /home/admin/file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "groupadd developers && useradd -m -s /bin/bash -G developers john && echo 'John123' | passwd --stdin john"}, "description": "Grant permission to a user to access a specific directory and its subdirectories only. John should have read, write and execute permission on /home/john/secret folder and all its subdirectories.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u john find /home/john/secret -type d -not -perm -700 -exec echo {} \\; -type f -not -perm -600 -exec echo {} \\; | wc -l | xargs test 0 -eq"}, "example": {"type": "command", "data": "sudo -u john chmod -R 700 /home/john/secret && sudo -u john chmod -R u+rwX,g-rwX,o-rwX /home/john/secret"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/joe -m joe && cd /home/joe && mkdir secret && touch secret/file && chmod 660 secret/file && chown joe:joe secret/file && su - joe"}, "description": "give a user named john access to secret/file without affecting other permissions or owners", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/joe/secret/file && sudo -u john cat /home/joe/secret/file && (ls -l /home/joe/secret/file | awk '{print $1}') | if [ \"$(cat -)\" = \"-rw-rw----\"$'\\n'\"-rw-rw----\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G joe john"}}, "labels": ["permission", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && cd /home/sam && mkdir top && cd top && touch file1.txt && touch file2.txt && touch file3.txt && chmod u-r file2.txt && chmod g-r file3.txt"}, "description": "List all files in the directory hierarchy /home/sam/top that sam can access. Also, list their permissions in octal form (e.g. 755, 644).", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "find /home/sam/top -readable ! -executable -ls | awk '{print $3\" \"$1}'"}, "example": {"type": "command", "data": "find /home/sam/top -readable ! -executable -ls | awk '{print $3\" \"$1}'"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'cvJl9GgvCu' > /home/john/password && chmod 600 /home/john/password &&chown john:john /home/john/password &&su - john"}, "description": "Change the file permission of ~/password so that only the owner can read and write to it. The group and others cannot access it. Then verify that it's the case. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/john/password | awk '{print $1}' | grep -qE '^.{6}-.--.--')&& (echo 'test' > /home/john/password && cat /home/john/password) | if [ \"$(cat -)\" = \"test\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 600 /home/john/password && chown john:john /home/john/password"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -u 1001 -g www-data -d /var/www -s /bin/bash -m www-user && mkdir /var/www/html && touch /var/www/html/index.html && echo 'Hello World!' >> /var/www/html/index.html && chmod -R 750 /var/www && chown -R www-user:www-data /var/www"}, "description": "Create a new user 'www-user' with the UID of 1001, belonging to the group 'www-data'. Create a new directory 'html' under '/var/www/' and create a new file 'index.html' in it with the content 'Hello World!'. Set the permissions of '/var/www/' and all its contents to 750 and the owner of all the files and directories inside to 'www-user:www-data'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "find /var/www -type f -exec ls -l {} + | awk '{if ($1~/^-rwxr-x---/ && $3==\"www-user\" && $4==\"www-data\") { status=0 } else { status=1 } } END { exit status }' && find /var/www -type d -exec ls -ld {} + | awk '{if ($1~/^drwxr-x---/ && $3==\"www-user\" && $4==\"www-data\") { status=0 } else { status=1 } } END { exit status }'"}, "example": {"type": "command", "data": "useradd -u 1001 -g www-data -d /var/www -s /bin/bash -m www-user && mkdir /var/www/html && touch /var/www/html/index.html && echo 'Hello World!' >> /var/www/html/index.html && chmod -R 750 /var/www && chown -R www-user:www-data /var/www"}}, "labels": ["permission", "user", "directory", "file"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && echo 'This is a test file' > /home/testfile && chown user1:user1 /home/testfile && chmod 0456 /home/testfile"}, "description": "Create a new group called \"testers\" and add both user1 and user2 to it. Give this new group read and execute permissions to /home/testfile.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u user1 -g testers cat /home/testfile && sudo -u user2 -g testers cat /home/testfile) | if [ \"$(cat -)\" = \"This is a test file$'\\n'This is a test file\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd testers && usermod -a -G testers user1 && usermod -a -G testers user2 && chmod 0450 /home/testfile && chgrp testers /home/testfile"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && usermod -a -G sudo emma && echo 'emma ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers"}, "description": "Give user emma no password access to run only the '/sbin/ifconfig' command with sudo.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u emma sh -c 'sudo /sbin/ifconfig' && sudo -u emma sh -c 'sudo ls /etc/shadow' | if [ \"$(cat -)\" = \"Sorry, user emma is not allowed to execute '/sbin/ifconfig' as root.$'\\n'Sorry, user emma is not allowed to execute '/bin/ls /etc/shadow' as root.\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'emma ALL=(ALL) NOPASSWD:/sbin/ifconfig' >> /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && touch /home/john/newfile && chmod 777 /home/john/newfile && chown john /home/john/newfile && chmod u+s /bin/cat"}, "description": "Allow a user to read a file they do not have permission to using the `cat` command and also explain how it works. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - john -c 'cat /home/jane/secretfile' | grep 'the secret password' || true"}, "example": {"type": "command", "data": "chmod o+r /home/jane/secretfile"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": ""}, "description": "What is the meaning of the numbers in the permission bits of a file or directory?", "evaluation": {"type": "ground-truth", "answer": "The permission bits are divided into three groups of three bits each, representing the permissions of the owner, the group, and other users, respectively. The first bit of each group indicates read (4), the second write (2), and the third execute (1). A zero in any position indicates that the corresponding permission is not granted.", "checking": null, "example": {"type": "command", "data": ""}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && touch /home/mark/sensitive_file && chown mark:mark /home/mark/sensitive_file && chmod 600 /home/mark/sensitive_file && useradd -s /bin/bash -d /home/jane -m jane"}, "description": "How can Jane access the sensitive file located in Mark's home directory without changing the file's permissions or ownership?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - jane -c 'cat /home/mark/sensitive_file' | if [ \"$(cat -)\" = \"This is a sensitive file\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo usermod -a -G mark jane && chmod g+r /home/mark/sensitive_file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "su - && cd /root && echo 'top secret info' > secret && chmod 400 secret && chattr +i secret"}, "description": "You are logged in as a non-root user. There's a file /root/secret that you need to read, which can only be read by root. How do you read it without compromising system integrity?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo lsattr /root/secret | grep '\\-i\\-' && sudo cat /root/secret | if [ \"$(cat -)\" = \"top secret info\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo chattr -i /root/secret && sudo cat /root/secret && sudo chattr +i /root/secret"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'secret message' > /home/john/secret_file && chmod 400 /home/john/secret_file && chown john /home/john/secret_file && su - john"}, "description": "Read the content of the file /home/john/secret_file without changing its permissions or ownership", "evaluation": {"type": "ground-truth", "answer": "secret message", "checking": null, "example": {"type": "command", "data": "cat /home/john/secret_file"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "apt update && apt install sudo -y && useradd -s /bin/bash -d /home/john -m john && echo 'john ALL=(root) /bin/cat' >> /etc/sudoers"}, "description": "Create a file called \"secret.txt\" owned by root with permissions 600. Use sudo to read the contents of the file as user john.", "evaluation": {"type": "ground-truth", "answer": null, "checking": null, "example": {"type": "command", "data": "echo 'top secret information' | sudo tee /root/secret.txt > /dev/null && sudo -u john sudo cat /root/secret.txt"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/ravi -m ravi && cd /home/ravi && mkdir secret_files && touch secret_files/{file1,file2} && chmod 600 secret_files/* && chown ravi:ravi secret_files/* && su - ravi"}, "description": "Ravi has two secret files and wants to give read access to Jack and write access to Bill. Help Ravi setup permissions for these files accordingly without changing ownership.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u jack cat /home/ravi/secret_files/file1 && sudo -u jack cat /home/ravi/secret_files/file2 && sudo -u bill touch /home/ravi/secret_files/new_file"}, "example": {"type": "command", "data": "chmod u=r,go-rwx,g+rwx,o+w /home/ravi/secret_files/file1 && chmod u=rx,go-rwx,g+wx,o-w /home/ravi/secret_files/file2"}}, "labels": ["permission", "access"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/ted -m ted && echo 'secret data' > /home/ted/data.txt && chmod 400 /home/ted/data.txt"}, "description": "Read the contents of /home/ted/data.txt without changing the file or its permissions", "evaluation": {"type": "ground-truth", "answer": "secret data", "checking": null, "example": {"type": "command", "data": "cat /home/ted/data.txt"}}, "labels": ["permission", "read"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'test' > testfile && chmod ugo-rwx testfile && su - john"}, "description": "Give permission to john to read testfile without changing the permissions of the file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/john/testfile"}, "example": {"type": "command", "data": "chmod o+r /home/john/testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sara -m sara && cd /home/sara && touch file1 && touch file2"}, "description": "Set read and write permissions for file1 to owner and group, but only read permissions for others. Then, set read, write, and execute permissions for file2 to owner only.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "[[ $(stat -c %a /home/sara/file1) = \"660\" && $(stat -c %a /home/sara/file2) = \"600\" && $(stat -c %A /home/sara/file1) = \"-rw-rw----\" && $(stat -c %A /home/sara/file2) = \"-rw-------\" ]] && exit 0 || exit 1"}, "example": {"type": "command", "data": "chmod 660 /home/sara/file1 && chmod 600 /home/sara/file2 && chmod u+rwx /home/sara/file2"}}, "labels": ["permission", "file"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m john && mkdir /home/john/myfiles && cd /home/john/myfiles && touch file1.txt && touch file2.txt"}, "description": "Give read and write access to the group 'friends' for all files in /home/john/myfiles including the directory 'myfiles'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/john/myfiles/ | tail -n +2 | awk '{print $1,$3,$4}') | if [ \"$(cat -)\" = \"-rw-rw---- john friends\"$'\\n'\"-rw-rw---- john friends\"$'\\n'\"drwxrwx--- john friends\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chgrp friends /home/john/myfiles && chmod 774 /home/john/myfiles && chmod g+s /home/john/myfiles"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'Hello World!' > test && chmod 664 test && chown john:john test"}, "description": "Change the owner and group of test file to root", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "[ $(ls -l /home/john/test | awk '{print $3}') = 'root' ] && [ $(ls -l /home/john/test | awk '{print $4}') = 'root' ] && echo true"}, "example": {"type": "command", "data": "chown root:root /home/john/test"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && echo 'lisa:password' | chpasswd"}, "description": "Add 'lisa' to the 'sudo' group so that she can use sudo. She should be able to execute commands as any user without entering a password, except for the root user", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - lisa -c 'sudo -l' | grep -E '^User lisa may run the following commands on this host:' && su - lisa -c 'sudo whoami' | grep -E '^root$') | if [ \"$(cat -)\" = \"User lisa may run the following commands on this host:\n    (ALL : ALL) ALL\nroot\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G sudo lisa && echo 'lisa ALL=(ALL:ALL) NOPASSWD:ALL' >> /etc/sudoers.d/lisa"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'I love Linux' > test.txt && chmod 777 test.txt"}, "description": "Display the content of the file test.txt as the root user", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo cat /home/john/test.txt | if [ \"$(cat -)\" = \"I love Linux\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo cat /home/john/test.txt"}}, "labels": ["permission", "root user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && echo 'Hello World!' > /testfile && chmod 600 /testfile && chown user1 /testfile && su - user2"}, "description": "As user2, try to read the contents of /testfile. Why can't you read it? Help 'user2' read it without changing the file permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /testfile"}, "example": {"type": "command", "data": "setfacl -m u:user2:r /testfile"}}, "labels": ["permission", "ACL"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/tom -m tom && cd /home/tom && mkdir videos && cd videos && mkdir old && mkdir new && touch vid1 && touch vid2 && touch new/a && touch new/b && touch old/c && find ~/videos -type f -exec chmod 600 {} + && find ~/videos -type d -exec chmod 700 {} +"}, "description": "tom has some videos in his home. He wants mike to help him to copy these videos. Grant mike permission to read these videos only. tom cannot modify or delete the files. mike can modify or delete the files but other users cannot access these files.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - mike -c 'cd ~tom/videos && cp -R . ~/videos_copy' > /dev/null && ls -lR ~/videos_copy && su - mike -c 'echo wow > ~/videos_copy/new/b' && ls -lR ~/videos_copy && (find ~/videos_copy ! -user mike -print | grep . || find ~/videos_copy -type d -perm /o=x -print | grep .)) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod -R 770 ~/videos && chmod -R g+s ~/videos && chattr +i ~/videos/old/c"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir permission_test && touch permission_test/file1 && touch permission_test/file2 && chmod +x permission_test && chmod -x permission_test/file1"}, "description": "Give execute permission to the permission_test directory but not for its contents", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/permission_test | grep ^d | awk '{if ($0~/x/) { exit 0; } else { exit 1; }}' && ls -l /home/john/permission_test/file1 | grep ^- | awk '{if ($0!~/x/) { exit 0; } else { exit 1; }}' && ls -l /home/john/permission_test/file2 | grep ^- | awk '{if ($0!~/x/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod +x /home/john/permission_test"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/kim -m kim && touch /testfile && chmod 750 /testfile && chown kim /testfile && su - kim"}, "description": "What's the output of `ls -l /testfile`? How can you make the file writable by its owner and readable by everyone else?", "evaluation": {"type": "ground-truth", "answer": "-rwxr-x--- 1 kim kim 0 MM DD HH:MM /testfile", "checking": null, "example": {"type": "command", "data": "chmod 644 /testfile"}}, "labels": ["permission", "ownership"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && touch file1 && touch file2 && chmod 660 file1 && chmod 640 file2 && ls -l"}, "description": "Bob cannot read the content of file1 even though he owns it. How can we fix that?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - bob -c 'cat file1' | if [ \"$(cat -)\" = \"This is the content of file1.\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod u+r file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/thomas -m thomas && chown root:thomas /home/thomas && chmod 750 /home/thomas && touch /home/thomas/.bashrc && chown thomas:thomas /home/thomas/.bashrc && chmod 644 /home/thomas/.bashrc"}, "description": "Set up a new user, 'thomas', and ensure that only the user and root can access their home directory and that thomas can't modify their .bashrc file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -ld /home/thomas | awk '{if ($1!~/^drwxr-x---$/) { exit 1; } else { exit 0; }}') && (ls -l /home/thomas/.bashrc | awk '{if ($1!~/^-r--r--r--/) { exit 1; } else { exit 0; }}')"}, "example": {"type": "command", "data": "chown root:thomas /home/thomas && chmod 770 /home/thomas && chmod g-s /home/thomas"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/samantha -m samantha && mkdir /var/app && chown root:john /var/app && chmod 2770 /var/app"}, "description": "Set up a new directory /var/app owned by root and group john, with read, write, and execute permissions for the owner and group, and set any new subdirectories or files to inherit the same permissions and ownership.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /var/app -type d ! -perm 2770 -ls && find /var/app -type f ! -perm 2770 -ls && find /var/app -not -group john -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+s /var/app && setfacl -d -m u::rwx,g::rwx,o::- /var/app && setfacl -m u::rwx,g::rwx,o::- /var/app"}}, "labels": ["permission", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo '12345' > /home/john/password.txt && chmod 400 /home/john/password.txt && chown john /home/john/password.txt && su - john"}, "description": "John has a password stored in the file /home/john/password.txt. Assign read permission of the file to the group 'staff'. Ensure that newly created files in the directory inherit the group ownership. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/ | grep password.txt | awk '{if ($1 ~/^.r......../ && $4 == \"staff\") { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "groupadd staff && usermod -a -G staff john && chmod g+r /home/john/password.txt && chown :staff /home/john && chmod g+s /home/john"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'test' > /home/john/testfile && chmod 640 /home/john/testfile && chown john:john /home/john/testfile && sudo -u john touch /home/john/newfile && sudo -u john mkdir /home/john/newdir && sudo -u john touch /home/john/newdir/newfile && sudo -u john mkdir /home/john/newdir/newdir"}, "description": "Create a new user called 'john' and modify the permissions of '/home/john/testfile' so that the owner and the group can read and write but others can only read. Also, create a new file and directory, 'newfile' and 'newdir', respectively, in '/home/john' and a new file and directory, 'newfile' and 'newdir', again respectively, in '/home/john/newdir', such that only the user 'john' can have read and write access to all of these new files and directories", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/john/testfile | awk '{if ($1~/^..rw.r--/) { exit 0; } else { exit 1; } }') && (ls -ld /home/john/newfile | awk '{if ($1~/^..--w----/) { exit 0; } else { exit 1; } }') && (ls -ld /home/john/newdir | awk '{if ($1~/^..--wx---/) { exit 0; } else { exit 1; } }') && (ls -ld /home/john/newdir/newfile | awk '{if ($1~/^..--w----/) { exit 0; } else { exit 1; } }') && (ls -ld /home/john/newdir/newdir | awk '{if ($1~/^..--wx---/) { exit 0; } else { exit 1; } }')"}, "example": {"type": "command", "data": "chmod 640 /home/john/testfile && chown john:john /home/john/testfile && chmod 600 /home/john/newfile && chmod 700 /home/john/newdir && chmod 600 /home/john/newdir/newfile && chmod 700 /home/john/newdir/newdir"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jake -m jake && echo 'this is a secret' > /home/jake/secret.txt && chmod 600 /home/jake/secret.txt"}, "description": "Only allow user jake to read /home/jake/secret.txt, and nobody can write or execute it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jake cat /home/jake/secret.txt && sudo echo 'hack' > /home/jake/secret.txt && sudo chmod +x /home/jake/secret.txt && sudo -u jake /home/jake/secret.txt) | if [ \"$(cat -)\" = \"this is a secret\"$'\\n'\"\"$'\\n'\"\"$'\\n'\"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 400 /home/jake/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jenny -m jenny && useradd -s /bin/bash -d /home/sam -m sam && mkdir /home/jenny/secret && echo 'secret content' > /home/jenny/secret/file && chmod 400 /home/jenny/secret/file && chown jenny /home/jenny/secret/file"}, "description": "jenny has a secret file in her home directory. Make sure that only jenny and sam can read it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jenny cat /home/jenny/secret/file && sudo -u sam cat /home/jenny/secret/file && sudo -u nobody cat /home/jenny/secret/file) | if [ \"$(cat -)\" = \"secret content\"$'\\n'\"secret content\"$'\\n'\"cat: /home/jenny/secret/file: Permission denied\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chgrp sam /home/jenny/secret/file && chmod 440 /home/jenny/secret/file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'echo hello' > /home/john/test.sh && chmod 700 /home/john/test.sh && su - john"}, "description": "Create a script that outputs the current date and time in this format: \"YYYY-MM-DD HH:MM:SS\". Save it to /usr/local/bin/now and make it executable for all users. Test the script's execution by running it and verifying its output.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "/usr/local/bin/now | if [[ $(cat -) =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}\\ [0-9]{2}:[0-9]{2}:[0-9]{2}$ ]]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo \"date '+%Y-%m-%d %H:%M:%S'\" > /usr/local/bin/now && chmod +x /usr/local/bin/now && /usr/local/bin/now"}}, "labels": ["scripting", "permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && mkdir /home/emma/temp && chmod 777 /home/emma/temp"}, "description": "Allow all users to create, modify and delete files in /home/emma/temp directory without changing the group ownership", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - emma -c 'touch /home/emma/temp/test && echo testcontent > /home/emma/temp/test && rm /home/emma/temp/test') && (su - tom -c 'touch /home/emma/temp/test && echo testcontent > /home/emma/temp/test && rm /home/emma/temp/test') && (su - helen -c 'touch /home/emma/temp/test && echo testcontent > /home/emma/temp/test && rm /home/emma/temp/test')"}, "example": {"type": "command", "data": "chmod 777 /home/emma/temp"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/joe -m joe && echo 'joe ALL=(ALL) NOPASSWD:/bin/cat' >> /etc/sudoers"}, "description": "Give user 'joe' the ability to use sudo to only run 'cat' with elevated privileges and no password prompt.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u joe sudo -l | grep cat | awk '{if ($0~/NOPASSWD: */bin/cat/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "echo 'joe ALL=(ALL) NOPASSWD:/bin/cat' >> /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'Hello World!' > file.txt && chmod 444 file.txt &&su - john"}, "description": "Read the content of the file.txt under the /home/john directory", "evaluation": {"type": "ground-truth", "answer": "Hello World!", "checking": null, "example": {"type": "command", "data": "cat /home/john/file.txt"}}, "labels": ["permission", "file"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/tina -m tina && useradd -s /bin/bash -d /home/john -m john && echo 'tina ALL=(john) ALL' >> /etc/sudoers && su - tina"}, "description": "As a sudo user, copy a file from john's home directory to your home directory. After this operation, john should still be the owner of the original file and you should be the owner of the copied file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l ~john | grep file.txt | awk '{ print $3 }' | grep -q john && ls -l ~tina | grep copied_file.txt | awk '{ print $3 }' | grep -q tina) && (ls -l ~john | grep file.txt | awk '{ print $4 }' | grep -q john && ls -l ~tina | grep copied_file.txt | awk '{ print $4 }' | grep -q tina)"}, "example": {"type": "command", "data": "cp ~john/file.txt ~/copied_file.txt && chown john ~john/file.txt && chown tina ~/copied_file.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'john' | passwd john --stdin && touch /var/log/example.log && chgrp john /var/log/example.log"}, "description": "Give john permission to read /var/log/example.log but prevent him from reading /var/log/syslog", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u john cat /var/log/example.log | if [ \"$(cat -)\" = \"\" ]; then exit 1; else sudo -u john cat /var/log/syslog | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi; fi"}, "example": {"type": "command", "data": "chmod o-r /var/log/syslog && chmod u+r /var/log/example.log"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && touch info && chmod 464 info && chown jane info"}, "description": "Set jane to be able to read and execute info file, but unable to modify it or write to the file. Set the file permission so that the sticky bit is set.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/jane/info | awk '{if ($1~/^..r..r.s../) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 1744 /home/jane/info"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/mike -m mike && echo 'CALCULUS' > /home/lisa/test1 && echo 'DIFFERENTIAL EQUATIONS' > /home/lisa/test2 && echo 'LINEAR ALGEBRA' > /home/john/test1 && echo 'MATHEMATICAL PHYSICS' > /home/mike/test1 && chown lisa:lisa /home/lisa/test* && chown john:john /home/john/test1 && chown mike:mike /home/mike/test1 && chmod 600 /home/*/*"}, "description": "There are three users lisa, john, and mike. lisa can read test1 and test2 of john and mike. john can read his own test1 file and lisa's test2 file. mike cannot read any file. Make sure the users can only access test1 and test2 files, not other files in their respective home directories", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo ls -l /home/*/ | grep test | awk '{if ($1~/^-....--./) { exit 1; } else { exit 0; } }'"}, "example": {"type": "command", "data": "chmod 711 /home/lisa && chmod 711 /home/john && chmod 711 /home/mike && chmod 604 /home/*/test* && chown lisa:lisa /home/*/test2 && chmod 640 /home/*/test2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'password123!' > secret.txt && chmod 400 secret.txt && chown john secret.txt && su - john"}, "description": "You have recently joined your new company as a System Administrator. Your job is to make sure that every user of the system must change their password after logging in for the first time. Help John change his password with a strong one.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "grep john /etc/shadow | awk -F':' '{print $2}' | grep '!' | if [ $(cat -) = '!' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo \"newPassword123!\" | passwd --stdin john && passwd -e john"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/amy -m amy && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/cathy -m cathy && echo 'critical data!' > /home/amy/notes && chown amy:amy /home/amy/notes && chmod 600 /home/amy/notes"}, "description": "Amy has a file called 'notes' in her home directory that has sensitive information. Bob and Cathy need to get access to this file, but without letting other users see or modify the file. How can you grant read access to Bob and Cathy while preserving the existing permissions on the file?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l amy -c 'cat notes' && runuser -l bob -c 'cat /home/amy/notes' && runuser -l cathy -c 'cat /home/amy/notes' && runuser -l frank -c 'cat /home/amy/notes') | if [ \"$(cat -)\" = \"critical data!critical data!critical data!\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o-rwx /home/amy/notes && chmod g+r /home/amy/notes && chgrp amy /home/amy/notes"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir documents && cd documents && mkdir public && mkdir private && touch public/file1 && touch public/file2 && touch private/file3 && touch private/file4 && find . -type f -exec chmod 640 {} + && find . -type d -exec chmod 750 {} + && chown jane: -R /home/jane"}, "description": "Create a new group called `jane'sfriends` and add two users `sarah` and `bob` to that group. Give `jane'sfriends` group read and execute permissions on `public` directory, and write permission on `private` directory. Make sure all new files and directories created in `documents` directory are owned by `jane` and `jane'sfriends` group.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -lR /home/jane/documents | grep -v total | awk '{if ($1 ~ /^d.{0,}r.x-w.{0,}r--/ && $9 == \"public\" || $1 ~ /^d.{0,}[\\-rwx]{1,}.{0,}rwx/{if ($9 == \"private\") {exit 0;} else {exit 1;}}}'"}, "example": {"type": "command", "data": "groupadd jane'sfriends && useradd -s /bin/bash -d /home/sarah -m sarah && useradd -s /bin/bash -d /home/bob -m bob && usermod -a -G jane'sfriends sarah && usermod -a -G jane'sfriends bob && chmod g+s /home/jane/documents && chgrp jane'sfriends /home/jane/documents && chmod g+wx /home/jane/documents/private && chmod g+rx /home/jane/documents/public"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && useradd -s /bin/bash -d /home/bob -m bob"}, "description": "Make sure Alex can read, write and execute a file called main.cpp, while Bob can only read it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su -c 'echo \"This is a test\" > /home/alex/main.cpp' alex && su -c 'echo \"This is a test\" > /home/bob/main.cpp' bob && su -c 'chmod 740 /home/bob/main.cpp' bob && su -c 'chmod 770 /home/alex/main.cpp' alex && (su -c 'cat /home/alex/main.cpp' alex | grep \"This is a test\") && (su -c 'cat /home/bob/main.cpp' bob | grep \"This is a test\") && (su -c 'echo \"This is a test 2\" > /home/alex/main.cpp' alex && su -c 'cat /home/alex/main.cpp' alex | grep \"This is a test 2\") && (su -c 'echo \"This is a test 3\" > /home/bob/main.cpp' bob || true) 2>&1) | if [ \"$(cat -)\" = \"This is a test$'\\n'This is a test$'\\n'This is a test 2$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 740 /home/bob/main.cpp && chmod 770 /home/alex/main.cpp"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && mkdir /home/jane/docs && touch /home/jane/docs/doc1 && touch /home/jane/docs/doc2 && chmod -R 770 /home/jane/docs"}, "description": "John needs to access Jane's documents in /home/jane/docs. Add John to the dataaccess group so he can access Jane's documents", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -al /home/jane/docs | grep doc1 | awk '{if ($1~/^-..rwx---/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "usermod -a -G dataaccess john"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/ubuntu -m ubuntu && su - ubuntu"}, "description": "How can I check the permissions of a file or directory in Linux?", "evaluation": {"type": "ground-truth", "answer": "Use the command `ls -l` to view the permissions for a file or directory.", "checking": null, "example": {"type": "command", "data": "ls -l /var/log"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "sudo apt update && sudo apt install apache2 -y && sudo useradd -s /bin/bash -d /var/www/html -m webuser && echo '<html><head><title>Hello World!</title></head><body><h1>Hello World!</h1></body></html>' > /var/www/html/index.html && sudo chown -R webuser:webuser /var/www/html && sudo chmod -R 750 /var/www/html"}, "description": "You have a web user named webuser. Give this user permission to add new files/directories, modify or delete existing files/directories in the /var/www/html directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo su - webuser -c 'touch /var/www/html/newfile' && sudo su - webuser -c 'mkdir /var/www/html/newdir' && sudo su - webuser -c 'echo \"Insert New Content\" >> /var/www/html/index.html' && sudo su - webuser -c 'rm /var/www/html/index.html'"}, "example": {"type": "command", "data": "sudo chmod -R 770 /var/www/html && sudo chown -R webuser:www-data /var/www/html"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir music && cd music && mkdir old && mkdir new && touch song1 && touch song2 && touch new/a && touch new/b && touch old/c && chmod 400 song1 && chmod 600 song2 && chmod 700 old && chmod 770 new"}, "description": "Set the permissions of the files in ~/music/old to be readable and writable by everyone, but not executable, and set the permissions of the files in ~/music/new to be readable, writable and executable by everyone", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find ~/music/old -type f ! -perm /444 -ls && find ~/music/old -type f -perm /100 -ls && find ~/music/new -type f ! -perm /777 -ls && find ~/music/new -type f -perm /100 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "find ~/music/old -type f -exec chmod 644 {} + && find ~/music/new -type f -exec chmod 777 {} +"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/demo -m demo && cd /home/demo && mkdir files && cd files && touch text1.txt && touch text2.txt"}, "description": "Give user 'demo' read and write permissions to folder 'files' and its contents, but deny any access to 'text2.txt'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l demo -c 'cat files/text1.txt' && runuser -l demo -c 'cat files/text2.txt' && runuser -l demo -c 'echo \"hello\" >> files/new.txt') | if [ \"$(cat -)\" = \"Hello$'\\n'$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 600 files/text2.txt && chmod 660 files/* && chattr +i files/text2.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "touch /file && chmod 000 /file"}, "description": "Make the file writable without changing the permissions of the file. Hint: use ACL.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "[ -w /file ] && stat -c '%a' /file | grep '---' > /dev/null || exit 1"}, "example": {"type": "command", "data": "setfacl -m u:$(whoami):rw- /file"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/timothy -m timothy && useradd -s /bin/bash -d /home/phil -m phil && mkdir /documents && echo 'sensitive data' > /documents/secret.txt && chown root /documents/secret.txt && chgrp phil /documents/secret.txt && chmod 640 /documents/secret.txt && chmod g+s /documents && su - timothy"}, "description": "Timothy needs to read /documents/secret.txt which is owned by root and belongs to the group phil. However, he is not in the phil group. Give Timothy access to /documents/secret.txt without adding him to the group phil.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /documents/secret.txt && echo 'Permission Granted.') | if [  \"$(sudo -u timothy cat /documents/secret.txt)\" = \"sensitive data\"$'\\n'\"Permission Granted.\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "setfacl -m u:timothy:r /documents/secret.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && echo 'alex' > /home/alex/file && chmod a-r /home/alex/file"}, "description": "What permission should be set on /home/alex/file to allow the user `alex` to read the file, but not allow other users to read or write the file?", "evaluation": {"type": "ground-truth", "answer": "400", "checking": null, "example": {"type": "command", "data": "chmod 400 /home/alex/file && su - alex && cat /home/alex/file"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'This is a sample file.' > sample.txt"}, "description": "Give write permission to user john only for the sample.txt file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/sample.txt | awk '{if ($1~/^-..-......./) { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "chmod u+w /home/john/sample.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/jason && cd /home/jason && echo 'secret file content' > secret.txt && chmod 700 secret.txt"}, "description": "Change the permission of secret.txt so that the owner can read and write, but no one else can access the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/jason/secret.txt | awk '{if ($1~/^-..------/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 600 /home/jason/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir test && cd test && touch file1 && chown jane:users file1 && chmod 440 file1 && echo 'Secret content' > file1 && useradd -s /bin/bash -d /home/mike -m mike"}, "description": "Jane has a folder called test that has a file called file1 with confidential information. She wants Mike to review the document but not able to modify it. Grant Mike read access to file1 without modifying any permissions that Jane currently has", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cd /home/mike && cat /home/jane/test/file1) | if [ \"$(cat -)\" = \"Secret content\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G users mike && chmod g+r /home/jane/test/file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": ""}, "description": "What are the three types of Linux permissions and what do they mean?", "evaluation": {"type": "ground-truth", "answer": "The three types of Linux permissions are read (r), write (w), and execute (x). Read permission (r) allows the file to be viewed. Write permission (w) allows the file to be edited. Execute permission (x) allows the file to be run as a program or script.", "checking": null, "example": {"type": "command", "data": ""}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/henry -m henry && useradd -s /bin/bash -d /home/elena -m elena && mkdir /home/henry/shared_folder && touch /home/henry/shared_folder/secret_file && chown henry /home/henry/shared_folder/secret_file && chmod 400 /home/henry/shared_folder/secret_file && cd /home/elena && su - elena"}, "description": "Henrys's secret_file should be confidential and only Henry should be able to read it. However, Elena needs to be able to edit a configuration file in the same shared_folder directory. Give proper permissions to ensure these requirements are met. You should not be able to directly access the contents of secret_file as Elena.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/henry/shared_folder | awk '{print $1,$3,$4,$9}' | grep \"^-.r-------- henry secret_file\" && ls -l /home/henry/shared_folder | awk '{print $1,$3,$4,$9}' | grep \"^-rw-rw-r-- elena config_file\") | if [ \"$(cat -)\" = \"-r-------- henry secret_file\n-rw-rw-r-- elena config_file\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 /home/henry/shared_folder/* && chmod 750 /home/henry/shared_folder && chmod g+s /home/henry/shared_folder"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/tom -m tom && cd /home/tom && touch hello.txt && chmod 444 hello.txt && chattr +i hello.txt && su - tom"}, "description": "Tom created a file 'hello.txt' to give a message to you, but he used chattr to lock this file. Can you find read only value from file's permissions?", "evaluation": {"type": "ground-truth", "answer": "444", "checking": null, "example": {"type": "command", "data": "ls -l hello.txt"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && useradd -s /bin/bash -d /home/tom -m tom && echo 'tom ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && echo 'mike ALL=(ALL) NOPASSWD:/bin/ls' >> /etc/sudoers && chmod +x /home/tom && chmod +x /home/mike"}, "description": "Tom wants to see the files in Mike's home directory but can't. Add necessary permissions without using `chmod` command.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u mike ls /home/mike | if grep -q 'secret_file'; then exit 1; else exit 0; fi) && (sudo -u tom sudo -u mike ls /home/mike | if grep -q 'secret_file'; then exit 0; else exit 1; fi)"}, "example": {"type": "command", "data": "usermod -a -G mike tom"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && mkdir /shared_folder && chgrp -R users /shared_folder && chmod -R 775 /shared_folder && echo 'Hello world!' > /shared_folder/shared_file && chmod 770 /shared_folder/shared_file && chown alice /shared_folder/shared_file"}, "description": "Alice and Bob are both members of the 'users' group. They both should be able to read and modify the file in /shared_folder/shared_file. Fix the permissions and ownership of the file and directory in such a way that both Alice and Bob have write permissions but no other user has write permission.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /shared_folder/shared_file | awk '{print $1,$3,$4}' | grep '^-rw-rw---- alice users' && ls -ld /shared_folder | awk '{print $1,$3,$4}' | grep '^drwxrwxr-x alice users') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+w,o-rwx /shared_folder/shared_file && chown alice /shared_folder/shared_file"}}, "labels": ["permission", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/testuser -m testuser && mkdir /home/testuser/testdir && touch /home/testuser/testfile && chown testuser:testuser /home/testuser/testdir /home/testuser/testfile"}, "description": "Change permissions of testfile to make it executable by owner and group, but not readable by others", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "[ -x /home/testuser/testfile -a ! -r /home/testuser/testfile ] && echo 'success' || echo 'failure'"}, "example": {"type": "command", "data": "chmod ug+x,o-r /home/testuser/testfile"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd john && useradd jerry && mkdir /opt/app && touch /opt/app/test_file && chown john /opt/app/test_file && chmod u+rwx,g+r-w,o-rwx /opt/app/test_file"}, "description": "John is the owner of /opt/app/test_file. Grant Jerry read and execute permission on this file without affecting John's permissions", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo runuser -l john -c 'test -r /opt/app/test_file && test -x /opt/app/test_file' && sudo runuser -l jerry -c 'test -r /opt/app/test_file && test -x /opt/app/test_file'"}, "example": {"type": "command", "data": "sudo chmod g+rx /opt/app/test_file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && echo 'jane:jane_password' | chpasswd && useradd -s /bin/bash -d /home/john -m john && echo 'john:john_password' | chpasswd && useradd -s /bin/bash -d /home/smith -m smith && groupadd dataaccess && usermod -a -G dataaccess jane && usermod -a -G dataaccess john && usermod -a -G dataaccess smith && cd / && touch file1 && touch file2 && touch file3 && chmod 400 file1 && chmod 500 file2 && chmod 600 file3"}, "description": "Create a group called \"dataaccess\" and add jane, john, and smith to it. Change the group ownership of /file1 to dataaccess, and set the permissions on /file2 to 640. The permissions on /file3 should be set to give only the owner full permissions, the group read and write permissions, and no permissions for anyone else.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l / | grep file1 | grep dataaccess && ls -l / | grep file2 | awk '{if ($1!~/^-rw-r-----.*/) { exit 1; }}' && ls -l / | grep file3 | awk '{if ($1!~/^-rw-------.*/) { exit 1; }}') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chgrp dataaccess /file1 && chmod 640 /file2 && chmod 600 /file3"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && useradd -s /bin/bash -d /home/john -m john && echo 'john ALL=(mike) NOPASSWD: /usr/bin/ls' >> /etc/sudoers"}, "description": "Allow user john to execute ls command as mike without password authentication.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u mike ls"}, "example": {"type": "command", "data": "sudo -u mike ls"}}, "labels": ["permission", "sudoers"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && echo 'lisa ALL=(ALL) NOPASSWD:/usr/bin/ping' >> /etc/sudoers && chown root:root /usr/bin/ping && chmod 4755 /usr/bin/ping && su - lisa"}, "description": "Allow user lisa to execute ping command as root using sudo without entering a password", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo ping -c 1 localhost | if [ $? -eq 0 ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'lisa ALL=(ALL) NOPASSWD:/usr/bin/ping' >> /etc/sudoers && chown root:root /usr/bin/ping && chmod 4755 /usr/bin/ping"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emily -m emily && useradd -s /bin/bash -d /home/mark -m mark && touch topsecret && echo 'my secret password is shh' > topsecret && chown root topsecret && chmod 400 topsecret"}, "description": "Make the file 'topsecret' readable by only emily and mark but not by any other user on the system.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u emily cat topsecret && sudo -u mark cat topsecret && sudo -u guestuser cat topsecret ) | if [ \"$(cat -)\" = \"my secret password is shh\"$'\\n'\"my secret password is shh\"$'\\n'$'cat: topsecret: Permission denied\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "setfacl -m u:emily:r,u:mark:r topsecret && setfacl -d -m u:emily:r,u:mark:r,o:- topsecret"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && mkdir important_files && touch important_files/file1 important_files/file2 important_files/file3 important_files/file4 important_files/file5 && chmod -R 740 important_files && chgrpm bob important_files && useradd -s /bin/bash -d /home/alice -m alice && cd /home/alice && mkdir transfers && touch transfers/transfer.txt && chown alice transfers && chgrp bob transfers/transfer.txt && chmod 640 transfers/transfer.txt"}, "description": "Bob and Alice work in the same company. Bob has important files in his home directory that only he and his group should access. Alice has a transfer file that only Bob should be able to read. What commands should Bob and Alice run to set the necessary permissions?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/bob -type f ! -perm -740 -ls && find /home/alice -type d ! -perm -750 -ls && find /home/alice/transfers -type f ! -perm -640 -ls && [ $(ls -ld /home/bob/important_files | awk '{print $NF}') = 'bob' ] && [ $(ls -ld /home/alice/transfers | awk '{print $3}') = 'alice' ] && [ $(ls -ld /home/alice/transfers/transfer.txt | awk '{print $4}') = 'bob' ]) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "text", "data": "Bob:\nchmod -R 740 important_files\nchgrp bob important_files\n\nAlice:\nchown alice transfers\ngpasswd -a bob alice\ntouch transfers/transfer.txt\ngpasswd -a bob alice\ngpasswd -d alice bob\nchmod 640 transfers/transfer.txt\nchgrp bob transfers/transfer.txt"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && touch file1 && touch file2 && touch file3 && chown john:john file1 && chown john:john file2 &&chmod 600 file3"}, "description": "John wants to give read and write permission to file1 and file2 to user Mike. He wants to do it without actually letting other users know that he has done this. Help John achieve this.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/john -maxdepth 1 -type f -ls | grep file1 | awk '{print $3}' | grep 'john' && find /home/john -maxdepth 1 -type f -ls | grep file2 | awk '{print $3}' | grep 'john' && sudo -u mike cat /home/john/file1 && sudo -u mike cat /home/john/file2) | if [ \"$(cat -)\" = \"johnjohntext1text2\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G john mike && chmod 640 /home/john/file1 && chmod 640 /home/john/file2"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/henry -m henry && echo 'Hello World' > /testfile && chmod 700 /testfile && chown henry /testfile && su - henry"}, "description": "As user \"henry\", attempt to read the contents of a file whose permissions are set to 700. What happens? How can you fix this?", "evaluation": {"type": "ground-truth", "answer": "henry is able to read the contents of the file. To fix this, change the permissions on the file using chmod to allow other users to read it, or change the ownership of the file to henry or a group that henry belongs to.", "checking": null, "example": {"type": "command", "data": "chmod 744 /testfile && cat /testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir docs && touch docs/file1 && touch docs/file2 && touch docs/file3"}, "description": "Give read only access for docs directory and all its files to group members only", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "('id john | grep dataaccess') && (ls -l /home/john/docs/file1 | awk '{if ($1~/^-.r.*---.*/) { exit 0; } else { exit 1; } }') && (ls -ld /home/john/docs | awk '{if ($1~/^d.r.*---.*/) { exit 0; } else { exit 1; } }')"}, "example": {"type": "command", "data": "groupadd dataaccess && usermod -a -G dataaccess john && chmod 440 /home/john/docs/* && chmod 550 /home/john/docs && chgrp -R dataaccess /home/john/docs/"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && mkdir photos && cd photos && touch photo1.jpg && touch photo2.jpg && touch photo3.jpg && find . -type f -exec chmod 640 {} + && find . -type d -exec chmod 750 {} +"}, "description": "Add a new user named alice to the 'bob' group, and ensure that she can read all of the files in /home/bob/photos directory, but cannot write or execute any files within that directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l alice -c 'ls -l /home/bob/photos' && runuser -l alice -c 'cat /home/bob/photos/photo1.jpg') | if [ \"$(cat -)\" = \"total 0\n-rw-r----- 1 bob bob 0 Jun 10 12:00 photo1.jpg\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G bob alice"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/alice -m alice && echo 'alice: password123\nbob: password456' | chpasswd && touch /home/alice/file1 && touch /home/bob/file2 && chmod o-rwx /home/alice && chmod o-rwx /home/bob && chmod g+rw /home/alice/file1 && chmod g+rw /home/bob/file2"}, "description": "Alice and Bob are users on the system. Alice has a file /home/alice/file1 and Bob has a file /home/bob/file2. They should be able to read and write to their respective files, but not each other's files. Ensure that this is the case and check that both can read and write their files.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su alice -c 'echo \"hello\" >> /home/alice/file1 && cat /home/alice/file1') | if [ \"$(cat -)\" = \"hello\"$'\\n'\"hello\" ]; then (su bob -c 'echo \"world\" >> /home/bob/file2 && cat /home/bob/file2') | if [ \"$(cat -)\" = \"world\"$'\\n'\"world\" ]; then exit 0; else exit 1; fi; else exit 1; fi"}, "example": {"type": "command", "data": "chgrp alice /home/alice/file1 && chgrp bob /home/bob/file2 && chmod 760 /home/alice/file1 && chmod 760 /home/bob/file2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && touch /home/lisa/info.txt && chmod 600 /home/lisa/info.txt && echo 'Hello, this is Lisa.' > /home/lisa/info.txt && su - lisa"}, "description": "Read the contents of /home/lisa/info.txt without changing the file permissions or ownership", "evaluation": {"type": "ground-truth", "answer": "Hello, this is Lisa.", "checking": null, "example": {"type": "command", "data": "cat /home/lisa/info.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user -m user && cd /home/user && mkdir secret && touch secret/file && chmod 770 secret && chmod 660 secret/file"}, "description": "Change the group ownership of the /home/user/secret directory to admin, and add the user peter to the admin group, ensuring that peter can read, write and execute within the secret directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/user | grep secret | awk '{if ($1~/^d.rwxrwx---/) { exit 0; } else { exit 1; } }' && ls -l /home/user/secret | grep '^-rw-rw----' | wc -l | awk '{if ($1==1) { exit 0; } else { exit 1; } }' && ls -l /home | grep user | awk '{if ($4~/admin/) { exit 0; } else { exit 1; } }' && sudo su - peter -c 'cd /home/user/secret && touch testFile && rm testFile' && rm /home/user/secret/file) | if [ $(cat - | wc -l) = 0 ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chown :admin /home/user/secret && usermod -aG admin peter"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && echo 'user2 ALL=(user1) /bin/chmod' >> /etc/sudoers"}, "description": "Allow user2 to execute chmod command as user1.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - user2 -c 'sudo -u user1 chmod 700 /home/user1'"}, "example": {"type": "command", "data": "su - user2 -c 'sudo -u user1 chmod 700 /home/user1'"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma"}, "description": "Give group 'staff' write permission on ~/emma/file.txt. Ensure that emma and all members of staff can read the file, but other users can't even see it exists.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - emma && ls -l ~/file.txt | awk '{if ($1~/^-rw.-w----/) { exit 0; } else { exit 1; }}' && (sudo su - && sudo chmod -R o-rwx ~/emma && sudo chmod 640 ~/emma/file.txt && sudo chown emma:staff ~/emma/file.txt && sudo chmod g+w ~/emma/file.txt) && ls -l ~/file.txt | awk '{if ($1~/^-rw-r----/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "sudo groupadd staff && sudo usermod -aG staff emma"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && useradd -s /bin/bash -d /home/robert -m robert && useradd -s /bin/bash -d /home/ali -m ali && echo 'lisa ALL=(robert,ali) ALL' >> /etc/sudoers"}, "description": "lisa wants to run a command as ali. Help her to do this.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u ali whoami | if [ \"$(cat -)\" = \"ali\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo -u ali /bin/bash"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir files && cd files && touch file1 && touch file2 && touch file3 && chmod 440 file1 && chmod 660 file2 && chmod 760 file3 && chown john:john file1 && chown john:john file2 && chown john:jane file3"}, "description": "john wants to share file2 with jane, but not file1 or file3. Set file2 permissions such that only john as owner and jane as group member can read and write such file. Any other user cannot access such file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jane test -r /home/john/files/file2 && sudo -u jane test -w /home/john/files/file2 && [ ! -r /home/john/files/file1 ] && [ ! -r /home/john/files/file3 ] && [ ! -w /home/john/files/file3 ]) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 760 /home/john/files/file2 && chown john:jane /home/john/files/file2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/amy -m amy && mkdir /home/amy/private && touch /home/amy/private/file.txt && chmod 400 /home/amy/private/file.txt && chmod 700 /home/amy/private"}, "description": "A user 'amy' has a private file located at /home/amy/private/file.txt. Ensure that ONLY amy's account can read and write to the file and ONLY amy's account can enter the directory that the file exists in. Also set it up so in the future, all files created in the private directory will have the same private permissions as file.txt", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "stat -c %U /home/amy/private/file.txt | if [ \"$(cat -)\" = \"amy\" ]; then exit 0; else exit 1; fi && stat -c %a /home/amy/private | if [ \"$(cat -)\" = \"700\" ]; then exit 0; else exit 1; fi && sudo -u amy touch /home/amy/private/newfile && stat -c %a /home/amy/private/newfile | if [ \"$(cat -)\" = \"400\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chown amy /home/amy/private/file.txt && chmod 700 /home/amy/private && setfacl -d -m u::rwx,g::---,o::--- /home/amy/private && setfacl -m u:amy:rwx /home/amy/private && setfacl -d -m u:amy:rwx /home/amy/private"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && useradd -s /bin/bash -d /home/nico -m nico && useradd -s /bin/bash -d /home/jan -m jan && groupadd class && usermod -aG class alex && usermod -aG class nico && usermod -aG class jan && mkdir /home/classified && chgrp class /home/classified && chmod 2770 /home/classified && touch /home/classified/secret01 && echo 'supersecret' > /home/classified/secret01 && chgrp class /home/classified/secret01 && chmod 440 /home/classified/secret01"}, "description": "Create a new file named secret02 in /home/classified with the content 'ultra_secret', make sure that all users in the 'class' group can read and write the file, other users have no permissions on the file. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -al /home/classified/secret02 | awk '{if ($1 != \"-rw-rw----.\") { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "touch /home/classified/secret02 && chmod 660 /home/classified/secret02 && chown :class /home/classified/secret02 && echo 'ultra_secret' > /home/classified/secret02"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && mkdir /home/emma/files && cd /home/emma/files && touch sensitive && chmod u=rw,go-rwx sensitive && chown emma:emma sensitive"}, "description": "You are a system administrator and you need to add a new user Emma to the system. Emma is supposed to have access to a sensitive file in her own directory but no one else should be able to access it. Set the necessary permissions on the file sensitive and ensure that Emma can access it while other users cannot.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su -c 'cat /home/emma/files/sensitive' emma | if [ \"$(cat -)\" = \"this is a sensitive file\" ]; then exit 0; else exit 1; fi && (ls -l /home/emma/files | grep sensitive | grep -q '^-rw-------' || ls -l /home/emma/files | grep sensitive | grep -q '^-rw-r--r--') && (find /home/emma/files -type d ! -perm 700 | grep -q . || find /home/emma/files -type d ! -perm 700 -ls)"}, "example": {"type": "command", "data": "chmod 700 /home/emma && chmod 700 /home/emma/files && chmod u=rw,go-rwx /home/emma/files/sensitive"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/paul -m paul && echo 'I love programming.' > /home/john/love.txt && echo 'I love Linux.' > /home/paul/love.txt && chmod -R 770 /home/john && chmod -R 440 /home/paul"}, "description": "Give John access to the file 'love.txt' owned by Paul without giving him any other permissions. Once done, copy the contents of Paul's love.txt to John's love.txt file and verify the same.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u john cat /home/john/love.txt | if [ \"$(cat -)\" = \"I love programming.\" ]; then exit 0; else exit 1; fi && sudo -u john cat /home/paul/love.txt | if [ \"$(cat -)\" = \"I love Linux.\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+rx /home/paul && setfacl -m u:john:r-- /home/paul/love.txt && sudo -u john sh -c 'cat /home/paul/love.txt > /home/john/love.txt'"}}, "labels": ["permission", "ACL"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jerry -m jerry && cd /home/jerry && mkdir secrets && touch secrets/important.txt && chmod 600 secrets/important.txt && echo 'confidential information: 123456' > secrets/important.txt && chown jerry:jerry secrets/important.txt && su - jerry"}, "description": "As an administrator, you need to add a new user named Tom to the group jerry. Then you must ensure Tom can read the important.txt file but not make any changes to it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u tom cat /home/jerry/secrets/important.txt | if [ \"$(cat -)\" = \"confidential information: 123456$'\\n'\" ]; then exit 0; else exit 1; fi && sudo -u tom sh -c 'echo \"Tom can't change anything.\" > /home/jerry/secrets/important.txt' && sudo -u jerry cat /home/jerry/secrets/important.txt | if [ \"$(cat -)\" = \"confidential information: 123456$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G jerry tom && chmod g+r /home/jerry/secrets/important.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir data && touch data/file1 && chmod 777 data/file1"}, "description": "Change the group ownership of /home/jane/data to 'adminaccess' and ensure that only the members of that group can access the contents of that directory, then add 'mike' to the 'adminaccess' group. Try accessing data/file1 as user 'mike'.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo ls -l /home/jane/data | awk '{if ($1~/^d.......-./ && $4~/adminaccess/) { exit 0; } else { exit 1; } }' && sudo grep -q mike /etc/group && (runuser -l jane -c 'cat data/file1' && sudo -u mike runuser -l jane -c 'cat data/file1') | if [ \"$(cat -)\" = \"file1\nfile1\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo chgrp adminaccess /home/jane/data && sudo chmod 2770 /home/jane/data && sudo usermod -aG adminaccess mike"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /data"}, "description": "Suppose you have a directory called /data that contains sensitive files that should only be accessible to members of the group \"dataaccess\". Ensure that new files and directories created in this directory inherit the group ownership, and that users can only delete files and directories that they own", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l / | grep data | awk '{if ($1~/^d.....s..t/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod g+s /data && chmod +t /data"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'secret' | passwd --stdin john && chmod o-rx /home/john && chmod g-rx /home/john && chmod 700 /home/john"}, "description": "Create a new user john with the password 'secret'. Set the permissions for john's home directory so that only he can read, write, and execute files/directories within. Additionally, nobody else, including group members of john, can read, write, or execute files/directories within john's home directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su john -c 'echo hello' && runuser -l mike -c 'ls /home/john' && ls -ld /home/john | awk '{if ($1~/^drwx------/) { exit 0; } else { exit 1; } }') | if [ \"$(cat -)\" = \"hello$'\\n'ls: cannot open directory /home/john: Permission denied$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o-rx /home && chmod 700 /home/john"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jen -m jen && cd /home/jen && echo 'hello, world!' > test && chmod 644 test && chattr +i test && su - jen"}, "description": "Try to modify the content of ~/test and explain why it's not allowed, furthermore remove the immutable attribute from the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(echo 'try to modify'; cat ~/test) | if [ \"$(cat -)\" = \"try to modify$'\\n''hello, world!'\" ]; then exit 1; else exit 0; fi && chattr -i ~/test && echo 'new content' > ~/test && cat ~/test | if [ \"$(cat -)\" = \"new content\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chattr -i ~/test"}}, "labels": ["permission", "file attributes"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "cd /home && mkdir group1 && mkdir group2 && cd group1 && touch file1 && touch file2 && cd .. && cd group2 && touch file3 && touch file4 && cd .. && chmod 770 group1 && chmod 777 group2"}, "description": "Set the group owner of all the files in group1 and group2 to be group1, and all users can read and write to group1, but only group members can modify files in group2.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/group1 -type f ! -perm 664 -ls && find /home/group1 -type d ! -perm 2775 -ls && find /home/group2 -type f ! -perm 664 -ls && find /home/group2 -type d ! -perm 2770 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chown -R :group1 /home/group1 && chown -R :group1 /home/group2 && find /home/group1 -type f -exec chmod 664 {} + && find /home/group1 -type d -exec chmod 2775 {} + && find /home/group2 -type f -exec chmod 664 {} + && find /home/group2 -type d -exec chmod 2770 {} + && usermod -a -G group2 user1"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jenkins -m jenkins"}, "description": "Give write access to user jenkins on a directory called /var/log", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u jenkins touch /var/log/jenkins_test && ls -l /var/log/jenkins_test | awk '{if ($1~/^-..w....../ && $3~/^jenkins$/){exit 0;} else {exit 1;}}'"}, "example": {"type": "command", "data": "chmod u+w /var/log"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/peter -m peter && groupadd group1 && usermod -a -G group1 john && usermod -a -G group1 peter && chmod g+rwx /data && chown :group1 /data && chmod g+s /data && su - john"}, "description": "Create a directory called \u2018projectA\u2019 within /data directory and set permissions on it in a way that both john and peter can add files/directory under it but delete only their own. Also, any file/dir within the projectA should not be accessible by any other group or user.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(touch /data/projectA/file_for_john && touch /data/projectA/file_for_peter || touch /data/projectA/file_for_peter && touch /data/projectA/file_for_john) && ls -A -l /data/projectA | awk '{if ($1~/^-rwxr-x---/) { exit 0; } else { exit 1; }}' && ls -A -ld /data/projectA | awk '{if ($1~/^drwxrws---/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "mkdir /data/projectA && chmod g+x /data/projectA && chown :group1 /data/projectA && chmod 2770 /data/projectA && setfacl -d -m g::--- /data/projectA && setfacl -m g::rwx /data/projectA && setfacl -m u:john:rw /data/projectA && setfacl -m u:peter:rw /data/projectA"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && echo '123456' > /home/user1/file1 && echo 'abcdef' > /home/user2/file2 && chown user1:user1 /home/user1/file1 && chown user2:user2 /home/user2/file2"}, "description": "Give user1 read and write access to file2 without changing file ownership", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u user1 cat /home/user2/file2 > /dev/null 2>&1 && sudo -u user1 echo 'testing' >> /home/user2/file2 && sudo -u user1 cat /home/user2/file2 | tail -n 1 | grep 'testing') | if [ \"$(cat -)\" = \"testing\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod a+rw /home/user2/file2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && su - john && cd ~"}, "description": "Create a file called 'my_file' in the home directory of user 'john' with read, write and execute permissions for the owner and the group, but only read permission for others", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john | grep my_file | awk '{if ($1~/^-rwxrw..r/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "touch /home/john/my_file && chmod 764 /home/john/my_file"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && groupadd employees && usermod -a -G employees bob && mkdir /home/shared && chmod 775 /home/shared && chown root:employees /home/shared"}, "description": "Bob is a new employee and he needs to access and modify files in /home/shared directory along with other employees. Set the necessary permissions for the directory and its contents so that all members of the 'employees' group can read, write and execute files, while others can only read the files.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/shared && find /home/shared -type f ! -perm 664 -ls && find /home/shared -type d ! -perm 775 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod -R 664 /home/shared/* && find /home/shared -type d -exec chmod 775 {} +"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && touch file1 && touch file2 && chmod 700 file1 && chmod 400 file2 && su - john"}, "description": "As root user, what commands do you need to execute to make file1 readable and writable by group members while keeping its owner and group owner unchanged, and to make file2 readable and writable by everyone?", "evaluation": {"type": "ground-truth", "answer": "chmod g+rw file1 && chmod a+rw file2", "checking": null, "example": {"type": "command", "data": "chmod g+rw file1 && chmod a+rw file2"}}, "labels": ["permission", "user", "groups"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && mkdir /home/shared && chmod 777 /home/shared && touch /home/shared/file1 && chown user1 /home/shared/file1 && chmod 660 /home/shared/file1 && su - user2"}, "description": "As user2, change the contents of /home/shared/file1 to 'new text' without changing the ownership or permission of file1", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/shared/file1 | if [ \"$(cat -)\" = \"new text\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'new text' > /home/shared/file1"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && echo 'emma:secret' | chpasswd && touch /testfile && chown emma /testfile && chmod 700 /testfile"}, "description": "Emma needs to read the content of /testfile but not modify it. How can you achieve that?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - emma -c 'cat /testfile' && su - emma -c 'echo Test >> /testfile' || [ $(stat -c \"%a\" /testfile) = 700 ]) && su - emma -c 'cat /testfile' | if [ \"$(cat -)\" = \"secret\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod a-rw /testfile && chmod u+r /testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && echo 'jane ALL=(ALL) NOPASSWD: /usr/bin/find' >> /etc/sudoers && su - jane"}, "description": "As user Jane, find and display all files owned by the root user in the /var/log directory", "evaluation": {"type": "output-checking", "answer": ["-rw-r--r-- 1 root  root    15M Jun 28 11:21 anaconda/anaconda.log", "-rw-r--r-- 1 root  root   193K Jun 28 11:20 anaconda/ifcfg.log", "-rw-r--r-- 1 root  root   108K Jun 28 11:20 anaconda/syslog", "-rw-r----- 1 syslog adm     92K Jun 28 07:10 auth.log", "-rw-r----- 1 syslog adm    234K Jun 28 11:20 kern.log", "-rw-r----- 1 syslog adm    483K Jun 28 11:20 messages", "-rw-r----- 1 syslog adm     42K Jun 28 07:10 user.log", "-rw-r--r-- 1 root  root      0 Jun 28 11:20 Xorg.failsafe.log", "-rw-r--r-- 1 root  root      0 Jun 28 11:20 Xorg.failsafe.log.old", "-rw-r--r-- 1 root  root      0 Jun 28 11:20 Xorg.0.log", "-rw-r--r-- 1 root  root    227 Jun 28 11:20 Xorg.0.log.old", "-rw-r--r-- 1 root  root   9.0M Jun 28 11:22 yum.log"], "checking": {"type": "command", "data": "sudo find /var/log -user root -type f -exec ls -l {} + | awk '{print $1, $3, $4, $5, $6, $7, $8, $9}'"}, "example": {"type": "output", "data": ["-rw-r--r--  root  root    15M Jun 28 11:21 anaconda/anaconda.log", "-rw-r--r--  root  root   193K Jun 28 11:20 anaconda/ifcfg.log", "-rw-r--r--  root  root   108K Jun 28 11:20 anaconda/syslog", "-rw-r-----  syslog adm     92K Jun 28 07:10 auth.log", "-rw-r-----  syslog adm    234K Jun 28 11:20 kern.log", "-rw-r-----  syslog adm    483K Jun 28 11:20 messages", "-rw-r-----  syslog adm     42K Jun 28 07:10 user.log", "-rw-r--r--  root  root      0 Jun 28 11:20 Xorg.failsafe.log", "-rw-r--r--  root  root      0 Jun 28 11:20 Xorg.failsafe.log.old", "-rw-r--r--  root  root      0 Jun 28 11:20 Xorg.0.log", "-rw-r--r--  root  root    227 Jun 28 11:20 Xorg.0.log.old", "-rw-r--r--  root  root   9.0M Jun 28 11:22 yum.log"]}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && useradd -s /bin/bash -d /home/deb -m deb"}, "description": "Give 'sam' read permission on '/home/deb' directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l sam -c 'ls /home/deb' > /dev/null && echo 0 || echo 1"}, "example": {"type": "command", "data": "chmod o+rx /home/deb"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir documents && cd documents && mkdir confidential && chmod 700 confidential && touch confidential/secrets.txt && echo 'The password is: 12345' > confidential/secrets.txt && chown john:john confidential/secrets.txt &&chmod 600 confidential/secrets.txt && su - john"}, "description": "John wants all users to be able to access his documents folder, but only he should be able to access the 'confidential' folder and its contents, including the secrets.txt file. Set permissions accordingly.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/documents | awk '{if ($1~/^drwxr--r--/) { exit 0; } else { exit 1; } }' && ls -l /home/john/documents/confidential | awk '{if ($1~/^drwx------/) { exit 0; } else { exit 1; } }' && ls -l /home/john/documents/confidential/secrets.txt | awk '{if ($1~/^-r--------/ && $3~/^john$/ && $4~/^john$/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 755 /home/john/documents/ && chown john:john /home/john/documents/confidential/ &&chmod 700 /home/john/documents/confidential/ && chown john:john /home/john/documents/confidential/secrets.txt && chmod 600 /home/john/documents/confidential/secrets.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && useradd -s /bin/bash -d /home/bill -m bill && echo \"hello, world\" > /home/bill/hello.txt"}, "description": "Give Jack read and write permissions to /home/bill/hello.txt", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - jack -c \"cat /home/bill/hello.txt && echo test >> /home/bill/hello.txt && cat /home/bill/hello.txt\" | if [ \"$(cat -)\" = \"hello, world\"$'\\n'\"hello, world\"$'\\n'\"test\"$'\\n'\"hello, world\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+rw /home/bill/hello.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && cd /home/alex && mkdir documents && touch documents/a.txt && touch documents/b.txt && find /home/alex/documents -type f -exec chmod 600 {} +"}, "description": "Allow the user 'mike' to read 'a.txt' and write to 'b.txt', but deny any access to the 'documents' directory to the user 'guest'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l mike -c 'cat /home/alex/documents/a.txt' && runuser -l mike -c 'echo \"hello world\" > /home/alex/documents/b.txt' && runuser -l guest -c 'ls /home/alex/documents/') | if [ \"$(cat -)\" = \"hello world$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "setfacl -m u:mike:r /home/alex/documents/a.txt && setfacl -m u:mike:rw /home/alex/documents/b.txt && setfacl -m u:guest:0 /home/alex/documents/"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && mkdir /var/www/ && mkdir /var/www/public_html/ && touch /var/www/public_html/file1.txt && chmod 775 /var/www/public_html/ && chmod 664 /var/www/public_html/file1.txt && chown -R root:lisa /var/www/public_html/"}, "description": "Set group ownership to be that of the web server user for the directory /var/www/public_html so that the files are accessible by the web server, and only allow members of the group to modify the files while retaining the current permissions for the rest of the world user. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /var/www/public_html/file1.txt | grep -- 'rw-rw---- 1 root webserver'"}, "example": {"type": "command", "data": "sudo usermod -a -G webserver lisa && chgrp -R webserver /var/www/public_html/ && chmod g+s /var/www/public_html/ && find /var/www/public_html/ -type f -exec chmod 664 {} +"}}, "labels": ["permission", "group ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "adduser alice && adduser bob && adduser charlie && su - alice"}, "description": "Create a directory called 'secret_data' with read and write permissions for user alice, but no other permissions for any other user including the owners of the directory and its contents. Ensure that this setting persists even if the directory is moved or copied to another directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cd / && sudo cp -rp secret_data /tmp/ && sudo chown bob:bob /tmp/secret_data) && sudo -u bob ls -l /tmp/secret_data && [ \"$(sudo -u bob cat /tmp/secret_data/testfile)\" = \"This file is secret\" ] && sudo -u charlie ls -d -- /tmp/secret_data && ! sudo -u charlie ls -- /tmp/secret_data && sudo -u bob touch /tmp/secret_data/testfile2 && sudo -u charlie ls -- /tmp/secret_data && ! sudo -u charlie ls -- /tmp/secret_data/testfile2"}, "example": {"type": "command", "data": "mkdir /home/alice/secret_data && chmod 600 /home/alice/secret_data && chattr +i /home/alice/secret_data"}}, "labels": ["permission", "directory"], "difficulty": 3},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && echo 'permission question' > /home/jane/test.txt && chattr +i /home/jane/test.txt && chmod 777 /home/jane/test.txt"}, "description": "What command can be used to modify a file with the immutable attribute (i) set to prevent deletions and modifications, and what flag needs to be added in order to make the modification?", "evaluation": {"type": "test-case", "question": "What command can be used to modify a file with the immutable attribute (i) set to prevent deletions and modifications, and what flag needs to be added in order to make the modification?", "options": ["cp", "vi", "rm", "chmod"], "answer": "vi -c 'set noreadonly' /home/jane/test.txt", "explanation": "In order to make changes to a file with the immutable attribute (i) set, we need to first remove the attribute. This can be done with the chattr -i command. Once the attribute is removed, we can then make changes to the file using a text editor like vi, or by using a command like echo or printf. Once the changes are made, we can then set the immutable attribute again using the chattr +i command."}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && touch /home/jane/salary.txt && chmod 600 /home/jane/salary.txt && chattr +i /home/jane/salary.txt"}, "description": "Jane has a salary file which she does not want to be modified or deleted by anyone, including root. However, she also wants to be able to read and modify the file herself. Achieve this without using sudo or any other special privileges.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo su - && ls - l /home/jane | awk '{if ($1~/^-.......i./) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 400 /home/jane/salary.txt && chattr +a /home/jane && chattr +u /home/jane/salary.txt"}}, "labels": ["permission"], "difficulty": 3},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/john -m john && touch /home/jane/file1 && touch /home/jane/file2 && touch /home/john/file3 && touch /home/john/file4 && chown john:john /home/john/file3 && chmod 750 /home/john && su - jane"}, "description": "In Jane's home directory, allow only herself and John to have read access to file1 and write access to file2, while allowing only John to have read and write access to file3. Do not allow anyone else to have access to any of the files.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/jane/file* /home/john/file* | awk '{if ($1~/^-..rw----/ || $1~/^-....rw-/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 700 /home/jane && chmod 750 /home/john && setfacl -m u:john:rw /home/john/file3 && setfacl -m u:jane:rw /home/jane/file2 && setfacl -m u:jane:r /home/jane/file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m jane && echo 'file contents' > /home/jane/file && chmod o-rwx /home/jane/file && usermod -G jane jane"}, "description": "Make the file /home/jane/file readable by users in group jane, but not by others", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo su - jane -c 'cat /home/jane/file' | grep 'file contents'"}, "example": {"type": "command", "data": "chmod 640 /home/jane/file"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && touch /home/john/file1 && touch /home/jane/file2 && chmod 777 /home/john/file1 && chmod 400 /home/jane/file2"}, "description": "Give jane read permission to john's file but don't allow john to make any changes to the permissions of the file. (Bonus: Make sure jane can access the file even if it is moved to a different folder with different permissions)", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - jane -c 'cat /home/john/file1' && chmod -w /home/john/file1 && su - john -c 'chmod 444 /home/john/file1' && su - jane -c 'cat /home/john/file1' && touch /home/john/file3 && chmod 777 /home/john/file3 && mv /home/john/file1 /home/john/folder && mv /home/john/file3 /home/john/folder && su - jane -c 'cat /home/john/folder/file1' && su - jane -c 'cat /home/john/folder/file3') | if [ \"$(cat -)\" = \"file1 contents$'\\n'file1 contents$'\\n'file1 contents$'\\n'file3 contents$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod +r /home/john/file1 && chmod g-w /home/john/file1 && chmod o-w /home/john/file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir documents && cd documents && touch doc1 && touch doc2 && echo 'this is a test file' > doc1 && echo 'this is another test file' > doc2 && chmod 750 /home/jane && chgrp jane /home/jane"}, "description": "jane wants to give read-only access to doc2 to the group 'others'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/jane/documents/ | grep doc2 | awk '{if ($1 !~ /^-r.-r---w./) { exit 1; } else { exit 0; }}' && (groups | grep others >/dev/null && cat /home/jane/documents/doc2 2>/dev/null && echo 'success!') || echo 'failure'"}, "example": {"type": "command", "data": "chmod o+r /home/jane/documents/doc2"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd bob && useradd susan && groupadd developers && usermod -a -G developers bob && usermod -a -G developers susan && mkdir /var/www/html && chgrp developers /var/www/html && chmod 2775 /var/www/html && touch /var/www/html/index.html && echo 'Hello world!' > /var/www/html/index.html && chmod 664 /var/www/html/index.html"}, "description": "Create a new file in /var/www/html called info.txt and set its permissions so that only members of the developers group can read and write to it, and everyone else has no access whatsoever.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /var/www/html/info.txt | grep -q '^-.rw-rw----') && (sudo -u susan cat /var/www/html/info.txt | grep -q 'secret information') && (! sudo -u bob cat /var/www/html/info.txt > /dev/null 2>&1) && (! cat /var/www/html/info.txt > /dev/null 2>&1) && sudo -u susan ls /var/www/html | grep -q 'info.txt'"}, "example": {"type": "command", "data": "touch /var/www/html/info.txt && chmod 660 /var/www/html/info.txt && chgrp developers /var/www/html/info.txt"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/john && chown john:john /home/john && chmod 700 /home/john && cd /home/john && touch myfile && chown john:john myfile && chmod 400 myfile"}, "description": "John wants to allow his colleague Bill to read his myfile. What command should he execute?", "evaluation": {"type": "ground-truth", "answer": "chmod 444 /home/john/myfile", "checking": null, "example": {"type": "command", "data": "chmod 444 /home/john/myfile"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && echo 'mark:password' | chpasswd && chmod 640 /etc/shadow"}, "description": "Grant mark sudo permission without asking for password", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -S whoami <<< 'password'; echo $?) | if [ \"$(cat -)\" = \"0\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'mark ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/mark && chmod 440 /etc/sudoers.d/mark"}}, "labels": ["sudo", "permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/martha -m martha && useradd -s /bin/bash -d /home/henry -m henry && echo 'Secret Code' > /home/john/code.txt && touch /home/martha/note.txt && touch /home/henry/note.txt && chown jonh /home/john/code.txt && chmod 600 /home/john/code.txt && chgrp martha /home/martha/note.txt && chmod 640 /home/martha/note.txt && chgrp henry /home/henry/note.txt && chmod 550 /home/henry/note.txt"}, "description": "john, martha and henry are members of the same group, named \"users\". They want to share their files with each other, these permissions should be granted: john must have read and write permissions for /home/john/code.txt, martha must have read permissions for /home/john/code.txt, henry must have execute permissions for /home/john/code.txt. Additionally, all files should be accessible to all members of the group \"users\".", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john cat /home/john/code.txt | if [ \"$(cat -)\" = \"Secret Code\" ]; then exit 0; else exit 1; fi) && (sudo -u martha cat /home/john/code.txt | if [ \"$(cat -)\" = \"Secret Code\" ]; then exit 0; else exit 1; fi) && (sudo -u henry /home/john/code.txt | if [ \"$(cat -)\" = \"Secret Code\" ]; then exit 0; else exit 1; fi) && (ls /home/john/code.txt -l | awk '{if ($1~/^-.rw-------/) { exit 0; } else { exit 1; }}') && (ls /home/martha/note.txt -l | awk '{if ($1~/^-.r..r.../) { exit 0; } else { exit 1; }}') && (ls /home/henry/note.txt -l | awk '{if ($1~/^-.r-x---r-) { exit 0; } else { exit 1; }}')"}, "example": {"type": "command", "data": "chgrp users /home/john/code.txt && chmod 770 /home/john/code.txt && chmod g=r /home/john/code.txt && chmod g+x /home/john/code.txt && chmod g+r /home/martha/note.txt && chmod g+rx /home/henry/note.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd alice && useradd bob && mkdir /shared_folder && chmod 777 /shared_folder"}, "description": "Create a folder '/shared_folder' with permission for all users to read, write, and execute. Set up two users 'alice' and 'bob'. Make alice the owner of '/shared_folder' and grant 'bob' read-write access to the folder.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo ls -l / | grep shared_folder | awk '{if ($1 !~ /^d...rwxrwxr-x$/) {exit 1;}}' && sudo ls -l / | grep shared_folder | awk '{if ($3 !~ /^alice$/) {exit 1;}}' && sudo ls -l / | grep shared_folder | awk '{if ($4 !~ /^bob$/) {exit 1;}}'"}, "example": {"type": "command", "data": "sudo chown alice /shared_folder && sudo chmod 770 /shared_folder && sudo usermod -aG alice bob && sudo su bob"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/carl -m carl && echo '1' > /home/alice/file1 && echo '2' > /home/bob/file2 && echo '3' > /home/carl/file3"}, "description": "Set permissions on files and folders such that Alice can access only her own files and folders, while Bob can access Alice's files and folders in read-only mode. Carl should not have access to any of Alice's files or folders and vice versa. Bob should be able to read Carl's file but not write to or delete it. Set group permissions as necessary.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "getfacl /home/alice/file1 | awk '{if($4~/alice/ && /read/ && !(/write/ || /execute/)){a=1}}; END{if(a==1) exit 0; else exit 1}' && getfacl /home/bob/file2 | awk '{if($4~/alice/ && /read/ && !(/write/ || /execute/)){a=1}}; END{if(a==1) exit 0; else exit 1}' && getfacl /home/bob/file1 | awk '{if($4~/alice/ && /read/ && !(/write/ || /execute/)){a=1}}; END{if(a==1) exit 0; else exit 1}' && getfacl /home/carl/file3 | awk '{if($4~/bob/ && /read/ && !(/write/ || /execute/)){a=1}}; END{if(a==1) exit 0; else exit 1}' && (ls -l /home/alice | awk '{if($3~/^alice$/ && /drwx.{4}--.x.{4}$/ && $NF~/alice/){a=1}}; END{if(a==1) exit 0; else exit 1}') && (ls -l /home/bob | awk '{if($3~/^bob$/ && /drwx.{4}r-x.{4}$/ && $NF~/alice/){a=1}}; END{if(a==1) exit 0; else exit 1}') && (ls -l /home/carl | awk '{if($3~/^carl$/ && /drwx.{4}--.x.{4}$/ && !($NF~/alice/ || $NF~/bob/)){a=1}}; END{if(a==1) exit 0; else exit 1}') && (ls -l /home | awk '{if($3~/^alice$/ && /drwx.{4}r-x.{4}$/ && $4~/alice/ && $9~/^alice/){a=1}}; END{if(a==1) exit 0; else exit 1}') && (ls -l /home | awk '{if($3~/^alice$/ && /drwx.{4}r-x.{4}$/ && $4~/bob/ && $9~/^alice/){a=1}}; END{if(a==1) exit 0; else exit 1}') && (ls -l /home | awk '{if($3~/^bob$/ && /drwx.{4}r-x.{4}$/ && $4~/carl/ && $9~/^carl/){a=1}}; END{if(a==1) exit 0; else exit 1}')"}, "example": {"type": "command", "data": "chmod 700 /home/alice && chmod 755 /home/bob && chmod 700 /home/carl && chown -R alice:alice /home/alice && chmod -R 600 /home/alice/* && chmod -R 400 /home/alice && setfacl -m g:bob:r /home/alice && setfacl -d -m g:bob:r /home/alice && setfacl -m g:carl:r /home/bob/file1 && setfacl -d -m g:carl:r /home/bob/file1 && setfacl -m u:bob:rx /home/carl && setfacl -d -m u:bob:rx /home/carl && setfacl -m g:bob:r /home/carl/file3 && setfacl -d -m g:bob:r /home/carl/file3 && setfacl -m o-rwx /home/carl/file3 && setfacl -d -m o-rwx /home/carl/file3"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sara -m sara && useradd -s /bin/bash -d /home/ali -m ali && useradd -s /bin/bash -d /home/salim -m salim && chgrp ali /home/salim"}, "description": "Let\ufffds say we have users sara, ali, and salim. How can we change so that sara can change files belonging to ali and vice versa, but salim cannot access either\ufffds files?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - sara -c 'touch /home/ali/file1.txt' && su - ali -c 'touch /home/sara/file2.txt' && su - salim -c 'cat /home/ali/file1.txt && cat /home/sara/file2.txt') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 770 /home/sara && chmod 770 /home/ali"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": ""}, "description": "What are the 3 types of Linux permissions and what do they control?", "evaluation": {"type": "ground-truth", "answer": "The 3 types of Linux permissions are read, write and execute. Read controls the ability to view or access the file or directory, write controls the ability to modify or delete the file or directory, and execute controls the ability to run the file or access the directory.", "checking": null, "example": {"type": "command", "data": ""}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/marco -m marco && useradd -s /bin/bash -d /home/polo -m polo && echo 'This is top secret data!' >> /home/marco/secret.txt && chown marco:marco /home/marco/* && chmod 640 /home/marco/* && chown polo:polo /home/polo && chmod 750 /home/polo"}, "description": "marco has a secret file that only he should be able to read, while polo can access the directory that contains the file but not the file itself. Fix the permissions to satisfy these constraints.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u marco cat /home/marco/secret.txt && sudo -u polo ls /home/marco/secret.txt) | if [ \"$(cat -)\" = \"This is top secret data!$'\\n'ls: cannot access '/home/marco/secret.txt': Permission denied$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 600 /home/marco/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/anna -m anna && useradd -s /bin/bash -d /home/tom -m tom && useradd -s /bin/bash -d /home/oliver -m oliver && chgrp tom /home/oliver && chmod 750 /home/oliver"}, "description": "Set permissions on files and directories such that anna can only access her own files, tom can access his and oliver's files, but oliver can only access his own files. All new files and directories created by any of these users should also follow these permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/anna -type f ! -user anna ! -perm 600 -ls && find /home/anna -type d ! -user anna ! -perm 700 -ls && find /home/tom /home/oliver -type f ! -user tom ! -user oliver ! -perm 660 -ls && find /home/tom /home/oliver -type d ! -user tom ! -user oliver ! -perm 750 -ls && find /home -type f ! -user anna ! -user tom ! -user oliver ! -perm 640 -ls && find /home -type d ! -user anna ! -user tom ! -user oliver ! -perm 750 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod -R u=rwX,g=rwX,o= /home/anna && chmod -R u=rwX,g=rwX,o= /home/tom && chmod -R u=rwX,g=rwX,o= /home/oliver && find /home/anna -type d -exec chmod g+s {} + && find /home/tom /home/oliver -type d -exec chmod g+s {} + && chown tom /home/oliver && chmod 750 /home/oliver"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && useradd -s /bin/bash -d /home/john -m john && chown john:john /home/john && chmod 700 /home/john && echo 'I have access' > /home/john/secret.txt && chmod 400 /home/john/secret.txt"}, "description": "Allow lisa to read secret.txt file inside john's home directory without giving lisa permission to access john's home directory directly", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u lisa cat ~john/secret.txt | if [ \"$(cat -)\" = \"I have access\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+x /home/john && chmod o+x /home/john && setfacl -m u:lisa:r /home/john/secret.txt"}}, "labels": ["permission", "access control lists"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && cd /home/jack && echo 'hello world' > test && chmod 777 test && chown jack test && su - jack"}, "description": "Execute ~/test and get the output", "evaluation": {"type": "ground-truth", "answer": "hello world", "checking": null, "example": {"type": "command", "data": "cd /home/jack && ./test"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && mkdir /var/www && chown john:john -R /var/www && chmod 755 /var/www"}, "description": "Give john permissions to read, write, and execute the directory '/var/www' and all of its contents", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /var | grep www | awk '{if ($1~/^d.....rwx/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod -R 777 /var/www"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob"}, "description": "Make Alice the owner of the folder /var/test owned earlier by root such that Alice has full read, write, execute permissions and group membership doesn't matter. Bob should have only read and execute permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /var | grep '^d.rwxr-xr-x.*test$' | cut -c 2- | awk '{if ($1~/^.....r..w./ && $3~/^alice$/ && $4~/^root$/ && $9~/^test$/) { exit 0; } else { exit 1;} }') && (find /var/test/* -type f ! -perm 444 -ls | wc -l | grep '^0$') && (find /var/test/* -type d ! -perm 555 -ls | wc -l | grep '^1$')"}, "example": {"type": "command", "data": "chmod -R +rwx /var/test && chown alice /var/test -R && chmod -R 755 /var/test && chmod -R g-rw,o-rw /var/test"}}, "labels": ["permission", "user", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/amy -m amy && usermod -aG sudo amy && echo 'amy:jkl4#678' | chpasswd"}, "description": "Set up a new user amy with password jkl4#678. Enable amy to execute sudo without password", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - amy -c 'sudo whoami' | if [ \"$(cat -)\" = \"root\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'amy ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m jane && useradd -m josh && echo 'jane:test123' | chpasswd && echo 'josh:test456' | chpasswd && sudo groupadd traders && sudo usermod -aG traders jane && sudo usermod -aG traders josh && sudo chown -R root:traders /home/jane && sudo chown -R root:traders /home/josh && find /home/jane /home/josh -type d -exec chmod 750 {} \\; && find /home/jane /home/josh -type f -exec chmod 640 {} \\;"}, "description": "Create two users - jane and josh. Create a group called 'traders'. Add jane and josh to the 'traders' group. Make all the home directories and files owned by root and the traders group. Give read and write access to the owners and read access to the group. Finally, test the configuration by attempting to execute sudo as jane.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u jane -S bash -c 'sudo whoami' <<< 'test123' && sudo -u josh -S bash -c 'sudo whoami' <<< 'test456'"}, "example": {"type": "command", "data": "sudo su - jane"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /opt/app && touch /opt/app/data.txt && useradd -s /bin/bash -d /home/user1 -m user1 && chgrp -R user1 /opt/app && chmod -R 2770 /opt/app && su - user1"}, "description": "Create a new file under /opt/app directory and ensure that only the user who created it and the members of the group that owns the file can modify the file, but other users cannot read or write the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(echo 'hello' > /opt/app/newfile && chown user1:user1 /opt/app/newfile && chmod 0760 /opt/app/newfile && chmod g+s /opt/app/newfile) && (su - user1 -c 'echo \"new content\" >> /opt/app/data.txt' && su - user2 -c 'echo \"new content\" >> /opt/app/data.txt' && cat /opt/app/data.txt) | if [ \"$(cat -)\" = \"new content\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "touch /opt/app/newfile && chown user1:user1 /opt/app/newfile && chmod 0760 /opt/app/newfile && chmod g+s /opt/app/newfile"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && touch /home/john/file && touch /home/jane/file && chmod g+s /home/jane && chmod 770 /home/jane"}, "description": "Create a new file in /home/jane that is readable, writable, and executable only by the owner (jane) and the group owner (should be jane's primary group, not john's group).", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/jane/file | awk '{if ($1~/^-rwxrwx---/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 770 /home/jane && chmod g+s /home/jane && chown jane:jane /home/jane/file && chmod 070 /home/jane/file"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sarah -m sarah && touch /home/sarah/file1 && touch /home/sarah/file2 && chmod 500 /home/sarah && chown -R sarah:sarah /home/sarah"}, "description": "List the two files inside /home/sarah without changing directory into it", "evaluation": {"type": "ground-truth", "answer": "file1 file2", "checking": null, "example": {"type": "command", "data": "ls /home/sarah"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/timothy -m timothy && echo 'ALL   ALL=(ALL:ALL) ALL' > /etc/sudoers"}, "description": "Give timothy sudo privileges and verify that he can run commands with sudo", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo whoami | if [ \"$(cat -)\" = \"root\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'timothy ALL=(ALL:ALL) ALL' >> /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir reports && touch reports/report1.txt && chmod 770 reports && chmod 750 reports/report1.txt"}, "description": "Jane has created a directory called 'reports' and a file inside called 'report1.txt'. She has already set the permission for the directory and the file. How can she allow her colleagues from the group 'managers' to modify the file but not delete it?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u manager cat /home/jane/reports/report1.txt && sudo -u manager echo 'Appended text' >> /home/jane/reports/report1.txt && sudo -u manager sed -i 's/report/replacement/g' /home/jane/reports/report1.txt && sudo -u manager mv /home/jane/reports/report1.txt /home/jane/reports/updated_report.txt && sudo -u manager rm -rf /home/jane/reports/report1.txt && [ -e '/home/jane/reports/updated_report.txt' ] && [ ! -e '/home/jane/reports/report1.txt' ]) | if [ $(cat -) = 'Report content\nAppended text\nreplacement1.txt\nreplacement2.txt\n' ]; then echo 0; else echo 1; fi"}, "example": {"type": "command", "data": "sudo usermod -a -G managers jane && chmod g+rw reports/report1.txt"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jim -m jim && useradd -s /bin/bash -d /home/kim -m kim && useradd -s /bin/bash -d /home/tim -m tim"}, "description": "Grant read and write permissions to jim, but only read permissions to kim and no access to tim for a file named \"secret_file\" located in your home directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l jim -c 'cat ~/secret_file' && runuser -l kim -c 'cat ~/secret_file' && runuser -l tim -c 'cat ~/secret_file') | if [ \"$(cat -)\" = \"secret\"$'\\n'\"secret\"$'\\n'$'cat: /home/tim/secret_file: Permission denied\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "touch ~/secret_file && chmod 640 ~/secret_file && chown jim ~/secret_file && chgrp tim ~/secret_file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sara -m sara && echo 'sara ALL=(ALL) NOPASSWD: /bin/cat' >> /etc/sudoers && cd /home/sara/ && touch file.txt && echo 'I am a secret file.' >> file.txt && chmod 600 file.txt"}, "description": "Grant sudo access to the user 'sara' to only read the file '/home/sara/file.txt' using 'cat' command. Verify that the user 'sara' is able to only view the content of the file and cannot perform other operations on the file like editing or deleting it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u sara cat /home/sara/file.txt && sudo -u sara touch /home/sara/newFile.txt && sudo -u sara echo 'This is a new file.' > /home/sara/newFile.txt && sudo -u sara rm -f /home/sara/file.txt && checkFile=`sudo -u sara ls /home/sara | grep file.txt` && if [ ! -z \"$checkFile\" ]; then echo 'Error! sara was able to perform other operations on the file.' && exit 1; else exit 0; fi)"}, "example": {"type": "command", "data": "sudo -u sara cat /home/sara/file.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && useradd -s /bin/bash -d /home/trav -m trav && echo 'secret_message' > /home/mark/message && chown mark:mark /home/mark/message && chmod 400 /home/mark/message"}, "description": "Mark wants to share his message with Trav. Help him to do it while keeping the contents of the message confidential and safe. Set the appropriate permissions for the message and validate that only Mark and Trav can access it, but not any other user.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u mark cat /home/mark/message && sudo -u trav cat /home/mark/message && sudo -u nobody cat /home/mark/message) | if [ \"$(cat -)\" = \"secret_message$'\\n'\"secret_message$'\\n'$'cat: /home/mark/message: Permission denied' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 /home/mark/message && chgrp adm /home/mark/message && chmod g+r /home/mark /home/mark/message"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/kate -m kate && echo 'The quick brown fox jumps over the lazy dog.' > /home/john/document.txt && chown john /home/john/document.txt && chgrp kate /home/john/document.txt && chmod 640 /home/john/document.txt"}, "description": "As Kate, read the contents of document.txt without changing its permissions.", "evaluation": {"type": "ground-truth", "answer": "The quick brown fox jumps over the lazy dog.", "checking": null, "example": {"type": "command", "data": "sudo -u kate cat /home/john/document.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && echo 'alien > /home/jane/secret' && chmod o-rwx /home/jane/secret"}, "description": "Suppose you have a file called /home/jane/secret that should only be accessible to members of the group \"secret access\". Create this group, add yourself to it, and ensure that the file can only be read by yourself and members of the group \"secret access\".", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/jane | grep secret | awk '{if ($1~/^-..--....$/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "groupadd secret_access && usermod -a -G secret_access $(whoami) && chown $(whoami):secret_access /home/jane/secret && chmod 640 /home/jane/secret"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && mkdir secret && cd secret && touch file.txt && echo 'a secret message' > file.txt && chmod 400 file.txt && chown bob:root file.txt && su - bob"}, "description": "Bob has a file called file.txt in the secret directory, but he forgot the password to read it. Help him by changing the permissions of file.txt to allow him to read it, without changing ownership or group permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/bob/secret/file.txt | if [ \"$(cat -)\" = \"a secret message\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod u+r file.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/peter -m peter && useradd -s /bin/bash -d /home/paul -m paul && useradd -s /bin/bash -d /home/mary -m mary && useradd -s /bin/bash -d /home/sarah -m sarah && mkdir /prod && chgrp mary /prod"}, "description": "Set permissions so that John, Peter and Sarah can read and write to the /prod directory, but not delete files. Paul can only read from the /prod directory. Mary should have no permission to the /prod directory and its contents.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john touch /prod/test1 && sudo -u peter touch /prod/test2 && sudo -u sarah touch /prod/test3 && sudo -u paul touch /prod/test4 && rm /prod/test1 && sudo -u john rm /prod/test2 && rm /prod/test3 && rm /prod/test4) 2>&1 | if [ \"$(cat -)\" = \"rm: cannot remove '/prod/test1': Operation not permitted\nrm: cannot remove '/prod/test2': Operation not permitted\nrm: cannot remove '/prod/test3': Operation not permitted\nrm: cannot remove '/prod/test4': Operation not permitted\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 774 /prod && chmod g+s /prod && setfacl -m u:john:rwX /prod && setfacl -m u:peter:rwX /prod && setfacl -m u:sarah:rwX /prod && setfacl -m u:paul:rX /prod && setfacl -m u:mary:x /prod"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd jane && useradd bob && mkdir /home/shared && chmod 770 /home/shared && chown root:users /home/shared"}, "description": "Create a shared folder /home/shared for jane and bob. Both jane and bob should be able to read and write files in this shared folder. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo runuser -l jane -c 'echo sync > /home/shared/jane_shared'; sudo runuser -l bob -c 'echo share > /home/shared/bob_shared') && cat /home/shared/*_shared | awk '{if ($1 == \"sync\" && $2 == \"share\") { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "sudo usermod -a -G users jane && sudo usermod -a -G users bob"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /var/www && touch /var/www/index.html && echo 'Welcome to my website!' > /var/www/index.html && useradd -d /var/www user01 && useradd -d /var/www user02"}, "description": "All users in the group \"www-data\" should be able to read the index.html file in /var/www, but only user01 should be able to write to it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(getfacl /var/www/index.html | awk '{if ($1~/^user01:/ && $2~/^owner:/ && $3~/^---/ && $4~/^rwx/){exit 0;} else {exit 1;}}') && (getfacl /var/www/index.html | awk '{if ($1~/^group:www-data:--r$/ && $2~/^owner:/ && $3~/^---/ && $4~/^r-x/){exit 0;} else {exit 1;}}')"}, "example": {"type": "command", "data": "chmod 754 /var/www && setfacl -m u:user01:rwx,g:www-data:r /var/www/index.html"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -g ftp -d /ftp/data -s /bin/false ftpuser && mkdir /ftp/data && chown -R ftpuser:ftp /ftp/data && chmod -R 775 /ftp/data"}, "description": "Create a user called \"ftpuser\" who has permissions to upload and download files to /ftp/data with the ftp protocol.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "echo 'ftp' | sudo tee -a /etc/ftpusers && sudo systemctl restart vsftpd && sudo su - ftpuser -c 'echo test > /ftp/data/test-file.txt' && cat /ftp/data/test-file.txt"}, "example": {"type": "command", "data": "apt-get update && apt-get install vsftpd -y && sed -i 's/#write_enable=YES/write_enable=YES/' /etc/vsftpd.conf && systemctl restart vsftpd"}}, "labels": ["permission", "ftp"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /secure && groupadd secure && useradd -s /bin/bash -m alice && useradd -s /bin/bash -m bob && useradd -s /bin/bash -m carol && chgrp secure /secure && chmod 2770 /secure && cd /secure && echo 'TOP SECRET DOCUMENT' > document && chgrp secure document && chmod 440 document && su - alice"}, "description": "alice, bob and carol are members of group 'secure'. alice creates a new file, bob writes to the file, but carol cannot read or write the file. Ensure the file will operate as such", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(touch /secure/newfile && find /secure -type f -name 'newfile' -ls | awk '{if ($3==\"alice\" && $4==\"secure\") { exit 0; } else { exit 1; } }' && echo \"bob wrote to the new file\" >> /secure/newfile && (sudo -u carol cat /secure/newfile || [ $? -eq 1 ]) ) | if [ \"$(cat -)\" = \"bob wrote to the new file\"$'\\n'\"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "touch /secure/newfile && chgrp secure /secure/newfile && chmod 664 /secure/newfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m alice && echo 'secret password' | passwd --stdin alice && useradd -m bob && echo 'even more secret' | passwd --stdin bob && mkdir /top-secret && touch /top-secret/plans.txt && chown alice /top-secret/plans.txt && chmod 740 /top-secret/plans.txt && cd /home/alice && echo 'echo \"The password to the plans is: acme123\"' > decrypt.sh && chmod +x decrypt.sh"}, "description": "Bob needs access to the top secret plans, but Alice is being stubborn. Help Bob access the file without changing ownership, using the decrypt.sh script created by Alice, but without also giving Alice access to the plans.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cd /home/bob && sudo -u bob /home/alice/decrypt.sh | grep -E 'The password to the plans is: acme123' && sudo cat /top-secret/plans.txt | grep -E 'Top Secret Plans'"}, "example": {"type": "command", "data": "sudo usermod -a -G alice bob && chmod o+x /top-secret && chmod o+r /top-secret/plans.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir folder && touch file && chown jane folder && chown jane file"}, "description": "Give permission to jane to list the contents of folder but not read the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/jane/ | grep folder && cat /home/jane/file && echo 'hacking fail') || echo 'hacking success: jane cannot read the file but can access folder'"}, "example": {"type": "command", "data": "chmod 711 /home/jane/folder && chmod 600 /home/jane/file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && su - jane"}, "description": "Create a file called 'top_secret.txt' in Jane's home directory, and allow only her to read and modify the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -al /home/jane | grep top_secret.txt | awk '{if ($1~/^-..-------/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "touch /home/jane/top_secret.txt && chmod 600 /home/jane/top_secret.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jimmy -m jimmy && echo 'Welcome to Ubuntu!' > /home/jimmy/index.html && chmod 644 /home/jimmy/index.html && find /home/jimmy -type d -exec chmod 755 {} + && chown -R jimmy:jimmy /home/jimmy"}, "description": "Create a new user named 'jimmy', create an index.html file in his home directory displaying 'Welcome to Ubuntu!', and ensure that the file permissions are set correctly so that the website is accessible and secure.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "curl http://localhost/~jimmy/ | grep 'Welcome to Ubuntu!' > /dev/null && curl -I http://localhost/~jimmy/index.html | grep 'HTTP/1.1 200 OK' > /dev/null && ls -ld /home/jimmy/ | awk '{if ($1~/^drwxr-xr-x/) { exit 0; } else { exit 1; } }' && ls -l /home/jimmy/index.html | awk '{if ($1~/^-rw-r--r--/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/jimmy -m jimmy && echo 'Welcome to Ubuntu!' > /home/jimmy/index.html && chmod 644 /home/jimmy/index.html && find /home/jimmy -type d -exec chmod 755 {} + && chown -R jimmy:jimmy /home/jimmy"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jenna -m jenna && cd /home/jenna && mkdir documents && cd documents && touch doc1 && touch doc2 && chmod -r documents"}, "description": "Jenna accidentally made her documents directory not readable. Help her fix it so that she can access her files again.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/jenna/documents/doc2 | if [ \"$(cat -)\" = \"\" ]; then exit 1; else exit 0; fi"}, "example": {"type": "command", "data": "chmod +r /home/jenna/documents"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/testuser -m testuser && echo 'confidential data' > /home/testuser/report.txt"}, "description": "Set permissions to allow user and group to read and write the report.txt file, but prohibit any other access", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/testuser | awk '{if ($1!~/^-...rw..w./) { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "chmod 660 /home/testuser/report.txt && chown testuser:testuser /home/testuser/report.txt"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/smith -m smith && useradd -s /bin/bash -d /home/doe -m doe && useradd -s /bin/bash -d /home/jane -m jane && mkdir /home/john/parents && mkdir /home/smith/parents && mkdir /home/doe/parents && mkdir /home/jane/parents && touch /home/john/parents/will.txt && touch /home/smith/parents/will.txt && touch /home/doe/parents/will.txt && touch /home/jane/parents/will.txt && chmod 600 /home/*/parents/will.txt && chmod 700 /home/*/parents && chown root:root /home/*/parents && echo 'john smith doe jane' > /var/successors && chattr +i /var/successors"}, "description": "There are four users: john, smith, doe and jane. All of them have made a will in their respective directories under ~/parents. You need to ensure that only the root user can modify this directory, and only the owner of the respective directory can modify the will.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -dl /home/*/parents | awk '{if ($1!~/^drwx------/) { exit 1; } else { exit 0; } }' && ls -l /home/*/parents/will.txt | awk '{if ($1!~/^-rw-------/) { exit 1; } else { exit 0; } }') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 600 /home/*/parents/will.txt && chmod 700 /home/*/parents && chown root:root /home/*/parents"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lucy -m lucy && cd /home/lucy && mkdir private && touch private/file1 && chmod 0640 private/file1 && chown lucy:users private/file1 && echo 'alice:x:1001:lucy' >> /etc/group"}, "description": "Allow alice to read file1 but don't allow alice to modify or delete the file1.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u alice cat /home/lucy/private/file1 && sudo -u alice chmod 642 /home/lucy/private/file1 && sudo -u alice echo 'modified' > /home/lucy/private/file1 && sudo -u alice rm /home/lucy/private/file1) | if [ \"$(cat -)\" = \"file1\nlucy\nmodified\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G users alice"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/charlie -m charlie && cd /home/alice && touch file.txt && su - bob"}, "description": "If Alice wants to give Bob permission to read but not modify her file.txt, what permissions should she set on the file, and what command should she use to change the file permissions?", "evaluation": {"type": "writing", "answer": "Alice should set the file permissions to 644 by running the command 'chmod 644 file.txt'. The '6' means that Alice has read and write permissions, the '4' means that the group (which is the same as the user in this case) can read the file, and the '4' means that others can read the file as well. This way, Bob can read the file, but he can't modify it. ", "checking": null, "example": {"type": "command", "data": null}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/phil -m phil && useradd -s /bin/bash -d /home/tom -m tom && useradd -s /bin/bash -d /home/john -m john && echo '' > /etc/sudoers && echo 'phil ALL=(tom) NOPASSWD: /bin/cat /home/tom/secret_files/*, /sbin/ifconfig, /usr/bin/apt-get' >> /etc/sudoers && echo 'john ALL=(tom) NOPASSWD: /bin/cat /home/tom/secret_files/secret1' >> /etc/sudoers"}, "description": "Set up the sudoers file so that phil can run cat on all files in /home/tom/secret_files/, use ifconfig and apt-get without a password. And john can only run cat on /home/tom/secret_files/secret1 with no password.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u tom cat /home/tom/secret_files/secret1 | grep 'TOPSECRET' &> /dev/null && sudo -u phil cat /home/tom/secret_files/secret1 | grep 'TOPSECRET' &> /dev/null && sudo -u phil cat /home/tom/secret_files/secret2 2> /dev/null && sudo ifconfig && sudo apt-get update) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'Defaults        env_reset\nDefaults        mail_badpass\nDefaults        secure_path=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin\"\nroot    ALL=(ALL:ALL) ALL\n%admin ALL=(ALL) ALL\n%sudo   ALL=(ALL:ALL) ALL\n\nphil ALL=(tom) NOPASSWD: /bin/cat /home/tom/secret_files/*, /sbin/ifconfig, /usr/bin/apt-get\njohn ALL=(tom) NOPASSWD: /bin/cat /home/tom/secret_files/secret1' > /etc/sudoers"}}, "labels": ["sudo", "permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && useradd -s /bin/bash -d /home/henry -m henry && echo 'lisa ALL=(henry) NOPASSWD:/bin/cat' >> /etc/sudoers"}, "description": "Allow user lisa to execute only the \"cat\" command as user henry without a password. Test that this works by creating a file as henry, and then attempting to access it as lisa using the command 'sudo -u henry cat /path/to/file'.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u henry sh -c 'echo hello > /home/henry/testfile') && (sudo -u henry cat /home/henry/testfile | if [ \"$(cat -)\" = \"hello\" ]; then exit 0; else exit 1; fi) && (sudo -u henry echo 'top secret' > /home/henry/secretfile && sudo -u henry cat /home/henry/secretfile 2>/dev/null | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi)"}, "example": {"type": "command", "data": "sudo -u henry cat /home/henry/testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && echo 'bananas' > /home/jane/secret.txt && chmod 640 /home/jane/secret.txt && chgrp john /home/jane/secret.txt && su - john"}, "description": "How can John access Jane's secret.txt file without changing its permissions?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/jane/secret.txt | if [ \"$(cat -)\" = \"bananas\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G jane john"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && echo 'user1 ALL=(user2) NOPASSWD:/bin/cat' >> /etc/sudoers"}, "description": "As user1, print the contents of a file owned by user2 without changing permissions or ownership of the file. ", "evaluation": {"type": "ground-truth", "answer": "<contents of the file>", "checking": null, "example": {"type": "command", "data": "sudo -u user2 cat <filepath>"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jon -m jon && echo 'This is a secret file, do not read' > /home/jon/secret.txt && chmod 600 /home/jon/secret.txt"}, "description": "Add group 'secret' and add users jon and alex to it, give group 'secret' read-only access to /home/jon/secret.txt", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(getent group secret | grep secret) && sudo -u alex cat /home/jon/secret.txt | if [ \"$(cat -)\" = \"This is a secret file, do not read\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd secret && usermod -a -G secret jon && usermod -a -G secret alex && chgrp secret /home/jon/secret.txt && chmod 640 /home/jon/secret.txt"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && echo 'Passw0rd!' | passwd --stdin mark && cd /home/mark && mkdir documents && cd documents && touch important.txt && echo 'confidential information' > important.txt && chmod 400 important.txt && chown mark:mark important.txt && su - mark"}, "description": "Mark created a text file with confidential information in his documents directory. Ensure that only he can read the file and prevent any modifications to the file by anyone.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/mark/documents/important.txt | awk '{if ($1~/^-r--------./) { exit 0; } else { exit 1; }}' && echo 'confidential information' | cmp -s /home/mark/documents/important.txt -) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod a-rwx /home/mark/documents/important.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m -s /bin/bash jason && useradd -m -s /bin/bash jack && useradd -m -s /bin/bash jill && chgrp jason /home/jason && chmod g+wx /home/jason && chmod 775 /home/jason && chgrp jack /home/jack && chmod g+wx /home/jack && chmod 775 /home/jack && chgrp jill /home/jill && chmod g+wx /home/jill && chmod 775 /home/jill"}, "description": "You are an administrator. You need to set the correct permissions, so that jason can create files and directories under /home/jason, jack can create files and directories under /home/jack, but cannot delete or rename jason's files or directories and jill should have only read access to jason's directories.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - jason -c 'touch /home/jason/testfile' && su - jack -c 'touch /home/jack/testfile') && (su - jack -c 'rm -f /home/jason/testfile' && su - jason -c 'touch /home/jason/testfile' && su - jill -c 'ls /home/jason/' | if [ \"$(cat -)\" = \"testfile\" ]; then exit 0; else exit 1; fi) && (chmod +t /home/jason && su - jill -c 'ls /home/jason/' | if [ \"$(cat -)\" = \"testfile\" ]; then exit 0; else exit 1; fi) && su - jack -c 'rm -f /home/jason/testfile'"}, "example": {"type": "command", "data": "chown -R jason:jason /home/jason && chown -R jack:jack /home/jack && chown -R jill:jill /home/jill && chmod 770 /home/jason && chmod 770 /home/jack && chmod -R 750 /home/jason/* && chmod -R 750 /home/jack/* && chmod -R 740 /home/jason && chmod -R 740 /home/jack && setfacl -m u::rwx,g::rwx,o::r-x /home/jason -R && setfacl -m u::rwx,g::r-x,o::r-x /home/jack -R"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir documents && cd documents && echo 'testing123' > testfile && chmod 640 testfile && chown john:john testfile"}, "description": "Grant read access of /home/john/documents/testfile to everyone but write access only to john", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo ls -l /home/john/documents/testfile | awk '{print $1,$3,$4,$9;}' && sudo getfacl /home/john/documents/testfile | grep -E '^user::(r|-)w-') | if [ \"$(cat -)\" = \"-rw-r-----. john john testfile\nuser::rw-\nuser:john:-w-\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+r /home/john/documents/testfile && setfacl -m u:john:-w- /home/john/documents/testfile"}}, "labels": ["permission", "file"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && useradd -s /bin/bash -d /home/john -m john && usermod -a -G jack john && cd /home/jack && echo 'testing' > testfile && chmod 640 testfile && chgrp jack testfile"}, "description": "Give john read and write permissions to testfile, but don't allow him execute permission", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - john -c 'cat /home/jack/testfile' && su - john -c 'echo hello > /home/jack/testfile' 2>/dev/null && su - john -c '[ -x /home/jack/testfile ] && echo true' 2>/dev/null) | if [ \"$(cat -)\" = \"testing\"$'\\n'\"\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 testfile && chown jack:john testfile"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && cd /home/alex && mkdir -p files/private && mkdir -p files/public && touch files/private/secret && touch files/public/open && chmod 700 files/private && chmod 755 files/public && chmod 600 files/private/secret && chown alex:alex -R files"}, "description": "Set permissions so that only the owner can write to ~/files/private/secret", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l ~/files/private/secret | awk '{if ($1~/^-rw-------/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 600 ~/files/private/secret"}}, "labels": ["permission", "ownership"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/tom -m tom && useradd -s /bin/bash -d /home/jerry -m jerry && usermod -a -G tom jerry && cd /home/tom && mkdir videos && cd videos && mkdir old && mkdir new && touch vid1 && touch vid2 && touch new/a && touch new/b && touch old/c"}, "description": "jerry should be able to move files between /home/tom/videos/new and /home/tom/videos/old directories, but no other user should be able to do that", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo find /home/tom/videos/new -type f -exec chmod o+t {} + && sudo find /home/tom/videos/old -type f -exec chmod o+t {} +) && (sudo chown tom:tom /home/tom/videos/old && sudo chown tom:jerry /home/tom/videos/new && sudo chmod 1770 /home/tom/videos/old && sudo chmod 2775 /home/tom/videos/new)"}, "example": {"type": "command", "data": "(sudo find /home/tom/videos/new -type f -exec chmod o+t {} + && sudo find /home/tom/videos/old -type f -exec chmod o+t {} +) && (sudo chown tom:tom /home/tom/videos/old && sudo chown tom:jerry /home/tom/videos/new && sudo chmod 1770 /home/tom/videos/old && sudo chmod 2775 /home/tom/videos/new)"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "apt update && apt install sudo -y && echo '%editor ALL=(ALL) NOPASSWD: /usr/bin/vim' > /etc/sudoers.d/editor && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/editor -m editor && usermod -a -G editor john && cd /home/editor && touch testfile && chgrp editor testfile && chmod 640 testfile && su - john"}, "description": "John is a regular user and is not able to edit /home/editor/testfile. Help him to edit the testfile using sudo without providing a password.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u editor vim /home/editor/testfile -c ':wq' && cat /home/editor/testfile | grep -q 'hello world'"}, "example": {"type": "command", "data": "echo 'hello world' | sudo -u editor tee -a /home/editor/testfile > /dev/null && sudo -u editor chmod 660 /home/editor/testfile"}}, "labels": ["permission", "sudo", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jessica -m jessica && useradd -s /bin/bash -d /home/steve -m steve && echo 'secret message' > /home/jessica/secret.txt && chown jessica:jessica /home/jessica/secret.txt && chmod 640 /home/jessica/secret.txt"}, "description": "Jessica wants to share /home/jessica/secret.txt with Steve. What is the best way to do this and maintain security? Provide the command(s) to accomplish this.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u steve cat /home/jessica/secret.txt && sudo -u jessica cat /home/jessica/secret.txt) | if [ \"$(cat -)\" = \"secret messagesecret message\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo usermod -aG jessica steve && chmod 664 /home/jessica/secret.txt"}}, "labels": ["permission", "security"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir documents && cd documents && touch doc1.txt && touch doc2.txt && mkdir sensitive_docs && cd sensitive_docs && touch sdoc1.txt && touch sdoc2.txt && chmod 770 .. && chmod 700 ."}, "description": "Set the permissions for the sensitive_docs directory so that the owner and members of the group have full permissions, but others cannot access the directory. Also, set the default permissions so that any new files or directories created within sensitive_docs will inherit the same restrictions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l | grep sensitive_docs | awk '{if ($1 == \"drwxrwx---\") { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 770 sensitive_docs && chmod g+s sensitive_docs"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && useradd -s /bin/bash -d /home/jason -m jason && useradd -s /bin/bash -d /home/sara -m sara && useradd -s /bin/bash -d /home/tommy -m tommy && echo 'mark ALL=(ALL:ALL) NOPASSWD:/bin/chmod' >> /etc/sudoers && echo 'jason ALL=(ALL:ALL) NOPASSWD:/bin/chmod' >> /etc/sudoers && echo 'sara ALL=(ALL:ALL) NOPASSWD:/bin/chmod' >> /etc/sudoers && echo 'tommy ALL=(ALL:ALL) NOPASSWD:/bin/chmod' >> /etc/sudoers"}, "description": "How can you allow mark, jason, sara and tommy to have access to chmod but restrict them from using other admin commands?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u mark sudo chmod 777 / \n sudo -u mark sudo find / -name passwd -print\nsudo -u jason sudo chmod 777 / \n sudo -u jason sudo find / -name passwd -print\nsudo -u sara sudo chmod 777 / \n sudo -u sara sudo find / -name passwd -print\nsudo -u tommy sudo chmod 777 / \n sudo -u tommy sudo find / -name passwd -print"}, "example": {"type": "command", "data": "echo 'mark ALL=(ALL:ALL) NOPASSWD:/bin/chmod' >> /etc/sudoers && echo 'jason ALL=(ALL:ALL) NOPASSWD:/bin/chmod' >> /etc/sudoers && echo 'sara ALL=(ALL:ALL) NOPASSWD:/bin/chmod' >> /etc/sudoers && echo 'tommy ALL=(ALL:ALL) NOPASSWD:/bin/chmod' >> /etc/sudoers"}}, "labels": ["permission", "security"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir secrets && cd secrets && echo 'uh oh, you found me!' > password.txt && touch secret.txt && chmod 700 /home/john/secrets && chmod 400 /home/john/secrets/*"}, "description": "As a user with root privileges, add user 'jane' to 'john' group, without affecting any other groups that jane is a part of.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(id jane && id jane | grep john) | if [ \"$(cat -)\" = \"uid=1001(jane) gid=1001(jane) groups=1001(jane),1002(anothergroup),1003(yetanothergroup)$'\\n'uid=1001(jane) gid=1001(jane) groups=1001(jane),1002(anothergroup),1003(yetanothergroup),1004(john)$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -aG john jane"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jennifer -m jennifer && useradd -s /bin/bash -d /home/samantha -m samantha && useradd -s /bin/bash -d /home/oliver -m oliver && echo 'secret' > /home/jennifer/secretfile && chmod 600 /home/jennifer/secretfile"}, "description": "Give jennifer and samantha permission to read /home/jennifer/secretfile, but not oliver", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jennifer cat /home/jennifer/secretfile && sudo -u samantha cat /home/jennifer/secretfile && sudo -u oliver cat /home/jennifer/secretfile) | if [ \"$(cat -)\" = \"secret\"$'\\n'\"secret\"$'\\n''cat: /home/jennifer/secretfile: Permission denied'$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 /home/jennifer/secretfile && chown jennifer:dataaccess /home/jennifer/secretfile && chown -R dataaccess /home/jennifer"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && su - john"}, "description": "Create a file called 'secret.txt' in my home directory 'john', and ensure that only I have read and write permissions on the file. No one else should be able to read or write this file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -ld /home/john/secret.txt | awk '{print $1}' | grep '^..-.--.--') && (su - {USER} -c 'test ! -r /home/john/secret.txt && echo unable to read file' || su - {USER} -c 'test ! -w /home/john/secret.txt && echo unable to write to file')"}, "example": {"type": "command", "data": "touch ~/secret.txt && chmod 600 ~/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": ""}, "description": "How can a non-root user add a new user to the system?", "evaluation": {"type": "multiple-choice", "answer": 2, "choices": ["By using the `useradd` command with root privileges", "By modifying the `/etc/passwd` file directly", "By using the `adduser` command with sudo privileges", "By using the `chown` command to change ownership of the `/etc/passwd` file and modifying it"]}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && cd /home/mike && mkdir doc && cd doc && touch doc1.txt && touch doc2.txt"}, "description": "Set ACLs on /home/mike/doc/, so that both mike and the group \"documents\" can read doc1.txt and write to doc2.txt.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "getfacl /home/mike/doc | grep ^user:mike:.-w- && getfacl /home/mike/doc | grep ^group:documents:-rw-"}, "example": {"type": "command", "data": "setfacl -m u:mike:-wx,g:documents:r-x /home/mike/doc && setfacl -d -m u:mike:-wx,g:documents:r-x /home/mike/doc"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && cd /home/emma && mkdir bank && cd bank && touch account1.txt && echo 'this is account1' > account1.txt && touch account2.txt && echo 'this is account2' > account2.txt && chmod 440 account1.txt && chmod 220 account2.txt && chown root:emma account1.txt && chown root:emma account2.txt && su - emma"}, "description": "Emma needs to view the balance of account1 but is unable to do so, specify the appropriate permission for Emma to view account1 balance without being able to modify the file or view account2 details", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/emma/bank/account1.txt && ! (cat /home/emma/bank/account2.txt | grep 'this is account2') && ls -l /home/emma/bank | grep account1.txt | grep '^-r--r-----' && ls -l /home/emma/bank | grep account2.txt | grep '^-w--w----'"}, "example": {"type": "command", "data": "chmod 640 /home/emma/bank/account1.txt && chmod 220 /home/emma/bank/account2.txt && chown emma:emma /home/emma/bank/account1.txt && chown emma:emma /home/emma/bank/account2.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/anna -m anna && cd /home/anna/ && mkdir secret && touch secret/note && chmod 600 secret/note && echo 'I have a secret to tell you' > secret/note"}, "description": "Grant the user bob read access to the 'note' file in anna's secret directory, but don't allow bob to remove the file. Also ensure that anyone who can access the file can only read it but not execute it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/anna/secret/note | if [ \"$(cat -)\" = \"I have a secret to tell you\"$'\\n' ]; then exit 0; else exit 1; fi && (sudo -u bob cat /home/anna/secret/note && sudo -u bob rm /home/anna/secret/note && find /home/anna/secret -type f ! -perm 400 -ls) | if [ \"$(cat -)\" = \"I have a secret to tell you\"$'\\n'\"find: '/home/anna/secret/note': Permission denied\"$'\\n' ]; then exit 0; else exit 1; fi "}, "example": {"type": "command", "data": "chmod 644 /home/anna/secret/note && chattr +a /home/anna/secret/note && sudo usermod -aG anna bob"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && touch /home/alice/myfile && chmod 700 /home/alice/myfile && chown alice /home/alice/myfile && su - alice"}, "description": "Alice has a file named 'myfile' in her home directory. How can Bob (another user on the system) get read access to the file?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l bob -c 'cat /home/alice/myfile' | if [ \"$(cat -)\" = \"This is Alice's file.\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo usermod -aG alice bob"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/test_user -m test_user && cd /home/test_user && mkdir test_dir && touch test_file && chown test_user test_dir test_file && chmod 400 test_file && chmod 500 test_dir"}, "description": "Change the permissions of test_file to 600, and all files and directories inside test_dir to be owned by root, and only accessible by the owner", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l test_file | awk '{if ($1 != \"-rw-------\") {exit 1}}'; ls -l test_dir | awk '{if ($1 != \"dr-x------\") {exit 1}}'; ls -l test_dir/* | awk '{if ($1 != \"-r--------\") {exit 1}}') && (ls -l test_dir/* | awk '{if ($3 != \"root\") {exit 1}}'; ls -l test_dir | awk '{if ($3 != \"root\") {exit 1}}')"}, "example": {"type": "command", "data": "chmod 600 test_file && chown -R root test_dir && chmod -R 700 test_dir"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && useradd -s /bin/bash -d /home/dave -m dave && cd /home/mike && echo 'hello world' > testfile && cd /home/dave && mkdir testdir && touch testfile && chmod g+rw testfile && chown dave:testdir testfile"}, "description": "change the owner of /home/dave/testdir/testfile to mike and assign the group ownership to mike's group without changing other permissions", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/dave/testdir/testfile | awk '{if ($3~/^mike/ && $4~/^mike/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chown mike:mike /home/dave/testdir/testfile"}}, "labels": ["permission", "ownership"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && useradd -s /bin/bash -d /home/bill -m bill && useradd -s /bin/bash -d /home/tom -m tom && useradd -s /bin/bash -d /home/george -m george && echo 'test' > /testfile && chown jack:jack /testfile"}, "description": "set up user groups so that jack, bill and tom can read and write to /testfile, but not george. There should be no other groups with access, and no individual access for any users, except for jack, who should be the owner of the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l jack -c 'cat /testfile' && runuser -l bill -c 'cat /testfile' && runuser -l tom -c 'cat /testfile' && runuser -l george -c 'cat /testfile') | if [ \"$(cat -)\" = \"test\"$'\\n'\"test\"$'\\n'\"test\"$'\\n'\"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chown jack:jack /testfile && chmod 640 /testfile && chgrp jack /testfile && chgrp jack /testfile && chmod g+w /testfile && chmod o-rwx /testfile"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/sarah -m sarah && groupadd dev && usermod -aG dev jane && usermod -aG dev sarah && cd / && mkdir project && chgrp dev project && chmod g+rwx project && cd project && touch index.js && chgrp dev index.js && chmod 660 index.js && ls -l"}, "description": "You have a project folder called 'project' with an index.js file. It is owned by the 'root' user, and the 'dev' group has rwx permission. John, Jane and Sarah are the only users on the system and belong to the 'root', 'dev', and 'dev' groups respectively. How can Jane and Sarah access the index.js file so that they can work together developing the project?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l jane -c 'echo index.js > /home/jane/fav' && runuser -l sarah -c 'cat /home/jane/fav && cp /project/index.js /home/sarah/') | if [ \"$(cat -)\" = \"index.js index.js\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": ""}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/tom -m tom && cd /home/tom && mkdir documents && mkdir music && touch documents/file1 && touch documents/file2 && touch music/song1 && touch music/song2 && find . -type f -exec chmod 664 {} + && find . -type d -exec chmod 755 {} + && chown -R tom:tom /home/tom"}, "description": "Give read permission to group members for all files and directories within /home/tom and its subdirectories, but restrict write permission only to the creator of the file/directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/tom -type f ! -perm -664 -ls && find /home/tom -type d ! -perm -755 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "find /home/tom -type f -exec chmod g+r {} + && find /home/tom -type d -exec chmod g+rx {} + && find /home/tom -type f -exec chmod u+w {} + && find /home/tom -type d -exec chmod u+rwx {} +"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/charlie -m charlie && useradd -s /bin/bash -d /home/dave -m dave && echo 'comment' > /home/bob/bob_file && echo 'comment' > /home/alice/alice_file && echo 'comment' > /home/charlie/charlie_file && echo 'comment' > /home/dave/dave_file && chmod 644 /home/bob/bob_file && chmod 600 /home/alice/alice_file && chmod 610 /home/charlie/charlie_file && chmod 740 /home/dave/dave_file"}, "description": "Set permissions so that only the owner of the file can read and write to the file. However, members of the group that the owner belongs to should be able to only read the file. Others should not have any access to these files. Ignore the files that already have the correct permission set.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(echo \"$(stat -c \"%a %u %g\" /home/bob/bob_file)\" | grep -E \"^600 1000 1000$\") && (echo \"$(stat -c \"%a %u %g\" /home/alice/alice_file)\" | grep -E \"^640 1001 1001$\") && (echo \"$(stat -c \"%a %u %g\" /home/charlie/charlie_file)\" | grep -E \"^610 1002 1002$\") && (echo \"$(stat -c \"%a %u %g\" /home/dave/dave_file)\" | grep -E \"^740 1003 1003$\")"}, "example": {"type": "command", "data": "chmod 600 /home/bob/bob_file && chmod 640 /home/alice/alice_file && chmod 640 /home/charlie/charlie_file && chmod 740 /home/dave/dave_file && chgrp $(id -gn bob) /home/bob/bob_file && chgrp $(id -gn alice) /home/alice/alice_file && chgrp $(id -gn charlie) /home/charlie/charlie_file && chgrp $(id -gn dave) /home/dave/dave_file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": ""}, "description": "What is the difference between chmod and chown?", "evaluation": {"type": "ground-truth", "answer": "chmod is used to change file or directory permissions, whereas chown is used to change the ownership of a file or directory.", "checking": null, "example": {"type": "command", "data": ""}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/sara -m sara && groupadd finance && usermod -a -G finance john && usermod -a -G finance sara && cd /home && su - john"}, "description": "Create a file named expenses.txt in the 'finance' group with read and write permissions for the group members, but only read permission for other users.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/ | grep expenses.txt | awk '{if ($1 !~ /-rw-r-----/) {exit 1;} else {exit 0;}}'"}, "example": {"type": "command", "data": "touch /home/expenses.txt && chgrp finance /home/expenses.txt && chmod 640 /home/expenses.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/dave -m dave && useradd -s /bin/bash -d /home/peter -m peter && useradd -s /bin/bash -d /home/jane -m jane && chgrp mike /home/mike && chgrp john /home/john && chgrp dave /home/dave && chgrp peter /home/peter && chgrp jane /home/jane"}, "description": "Set permissions on /home/mike, /home/john, /home/dave, /home/peter and /home/jane such that the owner can read, write and execute, the group can only read and execute, and others cannot access those directories at all. (Note: make use of the \u2018others\u2019 field and the \u2018setgid\u2019 bit. It is crucial to also set a \u2018umask\u2019 that is suitable for achieving this.)", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/mike -type d ! -perm 750 -ls && find /home/john -type d ! -perm 750 -ls && find /home/dave -type d ! -perm 750 -ls && find /home/peter -type d ! -perm 750 -ls && find /home/jane -type d ! -perm 750 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "umask 007 && find /home/mike /home/john /home/dave /home/peter /home/jane -type d -exec chmod 2770 {} +"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && echo 'jane ALL=(ALL) NOPASSWD:/usr/bin/chmod' >> /etc/sudoers && su - jane"}, "description": "jane wants to be able to change permissions of all files and directories in /home/shared without being the owner of those files. Set the necessary permissions and sudo configuration to allow this to happen without giving jane too much power.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo ls -l /home/shared | awk '{if ($3 == \"jane\" && $1~/^d.rw.---.t/) { exit 0; } else { exit 1; }}' && sudo -u jane chmod g+w /home/shared/testfile && ls -l /home/shared/testfile | awk '{if ($1~/^-..rw.---t/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chgrp -R shared /home/shared && chmod -R 2770 /home/shared && chmod g+s /home/shared && chmod o-rw /home/shared && chown -R user1:user1 /home/shared/testfile"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m johndoe && cd /home/johndoe && touch file1 && touch file2"}, "description": "Give johndoe permission to write to file1 and read from file2", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u johndoe sh -c 'echo \"test\" > /home/johndoe/file1' && sudo -u johndoe cat /home/johndoe/file1 && sudo -u johndoe cat /home/johndoe/file2) | if [ \"$(cat -)\" = \"test$'\\n'$'\\n'cat: /home/johndoe/file2: Permission denied$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo chown johndoe /home/johndoe/file1 && sudo chmod u+w /home/johndoe/file1 && sudo chown root /home/johndoe/file2 && sudo chmod u+r /home/johndoe/file2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m alice && echo 'My name is Alice' > /home/alice/myfile && chmod 644 /home/alice/myfile && chattr +i /home/alice/myfile && su - alice"}, "description": "Alice tries to modify the content of /home/alice/myfile but fails. Help her to modify the file and explain why her initial attempt failed.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/alice/myfile"}, "example": {"type": "command", "data": "chattr -i /home/alice/myfile && chmod 666 /home/alice/myfile # Alice can now modify the file but the immutable attribute was the reason of the initial failure"}}, "labels": ["permission", "file attribute"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && mkdir /home/shared && chmod 777 /home/shared"}, "description": "Set up a shared folder accessible by both john and jane where they can read, write and execute files but other users can only read.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(setfacl -m u:john:rwx /home/shared && setfacl -m u:jane:rwx /home/shared && setfacl -m o:rx /home/shared && touch /home/shared/test_file && chmod o-rwx /home/shared/test_file && runuser -l john -c 'echo \"test file\" > /home/shared/test_file' && runuser -l jane -c 'cat /home/shared/test_file') | if [ \"$(cat -)\" = \"test file\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": ""}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && chmod -x /home/mark && su - mark"}, "description": "Why can't I execute any commands as a newly created user? Help me fix it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls"}, "example": {"type": "command", "data": "chmod +x /home/mark"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && useradd -s /bin/bash -d /home/jill -m jill && groupadd admins && usermod -a -G admins jack && usermod -a -G admins jill"}, "description": "Add a file called `admin-info.txt` to `/var/` that can only be modified and accessed by the admins group, with permissions set to allow admins to modify it but others to only read it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo cat /var/admin-info.txt && sudo sh -c 'echo \"This text should not be read if you are not in the admins group\" > /var/admin-info.txt' && sudo cat /var/admin-info.txt) | if [ \"$(cat -)\" = \"This text should not be read if you are not in the admins group\"$'\\n'\"This text should not be read if you are not in the admins group\"$'\\n'\"This text should not be read if you are not in the admins group\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo touch /var/admin-info.txt && sudo chown root:admins /var/admin-info.txt && sudo chmod 640 /var/admin-info.txt"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/ana -m ana && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/carla -m carla && echo 'This is a secret!' > /home/ana/secrets && chmod 600 /home/ana/secrets && chown ana /home/ana/secrets"}, "description": "Give read access to Bob and Carla for Ana's secret file but make sure Ana is the only one who can execute or modify it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u bob cat /home/ana/secrets && sudo -u carla cat /home/ana/secrets) | if [ \"$(cat -)\" = \"This is a secret!\"$'\\n'\"This is a secret!\" ]; then exit 0; else exit 1; fi && (sudo -u carla echo 'hacked!' > /home/ana/secrets && sudo -u bob echo 'hacked!' > /home/ana/secrets) | if [ \"$(cat /home/ana/secrets)\" = \"This is a secret!\" ]; then exit 0; else exit 1; fi && (sudo -u carla chmod 000 /home/ana/secrets && sudo -u bob chmod 000 /home/ana/secrets) | if [ \"$(ls -l /home/ana/secrets | awk '{print $1}')\" = \"-rw-------\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 /home/ana/secrets && chgrp bob /home/ana/secrets && chgrp carla /home/ana/secrets"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/amy -m amy && cd /home/amy && mkdir documents && cd documents && mkdir work && mkdir personal && touch work/file1 && touch work/file2 && touch personal/file3 && touch personal/file4 && chmod -R 750 /home/amy/documents && chmod 600 /home/amy/documents/personal/*"}, "description": "Amy wants to grant her colleague Bob read access to the 'work' directory and read/write access to 'personal' directory under the 'documents' directory, without giving him access to any other directories or files under her home folder. Help Amy achieve this", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/amy -type d ! -perm 750 -ls && find /home/amy -type f ! -perm 600 -ls) | if [ \"$(cat -)\" = \"\" ]; then sudo -u bob ls /home/amy/documents/work && sudo -u bob touch /home/amy/documents/personal/file5 && exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G amy bob && setfacl -R -m u:bob:rX /home/amy/documents/work && setfacl -R -m u:bob:rwX /home/amy/documents/personal"}}, "labels": ["permission", "user", "access control"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/test -m test && cd /home/test && echo 'public data' > public_file && echo 'my data' > private_file && chmod 755 public_file && chmod 700 private_file && echo 'test' > password && chmod 400 password && chown test: test && su - test"}, "description": "Set the group owner of the private_file to a new group named secretgroup, and add mike to this group without changing the owner of the file. Ensure that mike can read the file, but cannot write to it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/test/private_file | if [ \"$(cat -)\" = \"my data\" ]; then exit 0; else exit 1; fi && ls -l /home/test/private_file | awk '{if ($4!=\"secretgroup\") { exit 1; }}' && (sudo -u mike cat /home/test/private_file && sudo -u mike echo 'cannot write to this file' >> /home/test/private_file 2>/dev/null ; if [ $? -eq 1 ]; then exit 1; else exit 0; fi)"}, "example": {"type": "command", "data": "groupadd secretgroup && usermod -a -G secretgroup mike && chown :secretgroup /home/test/private_file && chmod g+r /home/test/private_file"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jim -m jim && cd /home/jim && touch secret && echo 'this is a secret file. only jim should read/write it' > secret && chmod 400 secret && chown jim:jim secret"}, "description": "Give Tom read-only access to the secret file that Jim owns, without changing the ownership or write permissions. Tom should not be able to modify the file or copy its contents into a new file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u tom sh -c 'echo cannot > /home/jim/secret && grep -q this /home/jim/secret && ! sudo -u tom cp /home/jim/secret /home/jim/new_secret'"}, "example": {"type": "command", "data": "chmod 444 /home/jim/secret"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sarah -m sarah && useradd -s /bin/bash -d /home/matt -m matt && cd /home/sarah && echo 'this is a test file' > testfile && chmod 646 testfile && chown sarah:sarah testfile &&su - matt"}, "description": "Attempt to view and modify the content of the file 'testfile' while logged in as matt.", "evaluation": {"type": "ground-truth", "answer": "You do not have permission to modify the file, but you can view the file's content.", "checking": null, "example": {"type": "command", "data": "cat /home/sarah/testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && touch file1 && chmod 664 file1 && mkdir directory1 && touch directory1/file2 && chmod 264 directory1/file2"}, "description": "Give rwx permission to user and group, and only read permission to others for 'file1' and 'directory1/file2'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/file1 | grep '.rw-rw..-' && ls -l /home/john/directory1/file2 | grep '.rw-rw-r--'"}, "example": {"type": "command", "data": "chmod u+rwx /home/john/file1 /home/john/directory1/file2 && chmod g+rwx /home/john/file1 /home/john/directory1/file2 && chmod o+r /home/john/file1 /home/john/directory1/file2"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/charlie -m charlie && echo 'Alice has rwx permissions to her home directory; Bob has r-x permissions to Alice's home directory; Charlie has --- permissions to both Alice's and Bob's home directories.' > /home/alice/instructions && chmod 600 /home/alice/instructions && chown alice:alice /home/alice/instructions"}, "description": "Based on the instructions in /home/alice/instructions, set the permissions for Alice's and Bob's home directories so that the requirements are met. Then verify that each user can access their own and each other's home directories according to the instructions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - alice -c 'echo hello' && su - bob -c 'echo hello' && su - charlie -c 'echo hello' && su - alice -c 'ls /home/bob' && su - bob -c 'ls /home/alice' && su - charlie -c 'ls /home/alice' && su - charlie -c 'ls /home/bob') | if [ \"$(cat -)\" = \"hello\nhello\nhello\nDocuments\nPictures\nVideos\nhello\nhello\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 771 /home/alice && chmod 755 /home/bob && chmod 000 /home/charlie"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && echo \"user1:pass123\" | chpasswd && touch /home/user1/file1"}, "description": "Give read, write and execute permission to the owner and group of /home/user1/file1. Other users should not be able to execute or read the file, except for the superuser (root).", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/user1/file1 | awk '{if ($1~/^-rwxr-x---/ && $3~/user1/ && $4~/user1/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 750 /home/user1/file1"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/mark && useradd -s /bin/bash -d /home/mark -m mark && touch /home/mark/file && chown mark /home/mark/file"}, "description": "Grant read access to the file '/home/mark/file' only to the user 'mark'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - mark -c 'cat /home/mark/file' || true ; su - randomUser -c 'cat /home/mark/file' &>/dev/null && echo 'Error: Other users except mark can access the file' || exit 0"}, "example": {"type": "command", "data": "chmod 400 /home/mark/file"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jennifer -m jennifer && cd /home/jennifer && mkdir files && cd files && touch file1 && touch file2 && chmod 600 file1 && chmod 640 file2 && chattr +i file1 && su - jennifer"}, "description": "Jennifer is not able to delete file1 due to an immutable attribute set on the file. How can she remove this attribute and delete the file?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "lsattr /home/jennifer/files/file1 | grep 'i' | if [ \"$(cat -)\" = \"\" ]; then exit 1; else exit 0; fi && rm /home/jennifer/files/file1 && ls /home/jennifer/files/ | if [ \"$(grep file1 -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chattr -i /home/jennifer/files/file1 && rm /home/jennifer/files/file1"}}, "labels": ["attributes", "deletion"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /var/log/myapp && touch /var/log/myapp/logfile && chmod -R 750 /var/log/myapp && chown -R myappuser:myappgroup /var/log/myapp && useradd -s /bin/bash -d /home/myappuser -m myappuser"}, "description": "Create a new user called `myappuser`, and give them permission to write to `/var/log/myapp/logfile` without giving them full access to the `/var/log/myapp/` directory. Additionally, make sure the directory and file ownership are set correctly.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u myappuser sh -c 'echo \"this is a test\" >> /var/log/myapp/logfile' && cat /var/log/myapp/logfile | if [ \"$(cat -)\" = \"this is a test\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o=-w /var/log/myapp && chmod g+w /var/log/myapp/logfile"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/dev -m dev && cd /home/dev && mkdir app && cd app && touch index.js && chmod 400 index.js"}, "description": "Change the file permissions for index.js so that the owner and group have read and write access, and nobody else can access it in any way", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/dev/app/index.js | awk '{if ($1~/^-rw-rw----/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 660 index.js && chown dev:dev index.js"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir secret && touch secret/document.txt && echo 'This is a secret document.' > secret/document.txt && chmod 440 secret/document.txt && chown john:john secret/document.txt && su - john"}, "description": "Add user kevin to the group john and allow him to read the secret document. kevin must not be able to delete, modify or execute the document.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(getent group john | grep kevin) && (cat /home/john/secret/document.txt | grep 'This is a secret document.' && ls -l /home/john/secret/document.txt | awk '{if ($1 == \"-r--r-----\") {exit 0;} else {exit 1;}}') && (! (echo 'Hello' > /home/john/secret/document.txt || chmod 400 /home/john/secret/document.txt || rm /home/john/secret/document.txt) 2> /dev/null && cat /home/john/secret/document.txt | grep 'This is a secret document.' && ls -l /home/john/secret/document.txt | awk '{if ($1 == \"-r--r-----\") {exit 0;} else {exit 1;}}')"}, "example": {"type": "command", "data": "usermod -aG john kevin && chmod 440 /home/john/secret/document.txt"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'sudo ALL=(ALL:ALL) ALL' >> /etc/sudoers.d/john && chmod 0440 /etc/sudoers.d/john"}, "description": "Add a new user john and add him to the sudo group. Make sure he can run sudo command without password prompt", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -l -U john &> /dev/null && sudo -U john whoami | if [ \"$(cat -)\" = \"root\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'john ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": ""}, "description": "Explain how the Linux file permissions work", "evaluation": {"type": "ground-truth", "answer": "Linux file permissions consist of three sets of permissions - read, write, and execute - for three different groups of users: the owner of the file, the group that owns the file, and all other users. Each set of permissions is represented by a three-digit number, where each digit corresponds to a permission for a different group (in order - owner, group, others). The read permission allows users to view the contents of a file, the write permission allows users to modify the file, and the execute permission allows users to execute the file as a program or script. Together, these permissions determine how a file can be accessed or modified by users in the system.", "checking": null, "example": {"type": "question", "data": "What is the difference between the 'chmod' and 'chown' commands in Linux?"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && touch /home/jack/file1 && touch /home/jack/file2 && chmod 440 /home/jack/file1 && chmod 400 /home/jack/file2"}, "description": "Give jack read permission to file2 without removing the read permission of group and others on file1.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/jack | grep file1 | awk '{print $1}' | grep -q -- '-r--r-----') && (ls -l /home/jack | grep file2 | awk '{print $1}' | grep -q -- '-r--r-----')"}, "example": {"type": "command", "data": "chmod u+r /home/jack/file2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "(echo 'alice ALL=(ALL) NOPASSWD:/bin/cat' >> /etc/sudoers) && useradd -s /bin/bash -d /home/alice -m alice && cd /home/alice && touch secret.txt && echo 'I love Linux!' > secret.txt && chmod 400 secret.txt"}, "description": "Add a new user named bob and allow him to read alice's secret.txt file as root without password.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u bob cat /home/alice/secret.txt"}, "example": {"type": "command", "data": "(echo 'bob ALL=(ALL) NOPASSWD:/bin/cat' >> /etc/sudoers)"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "apt update && apt install sudo -y && echo 'www-data ALL=(ALL) NOPASSWD: /usr/bin/vim' >> /etc/sudoers && mkdir /var/www/secret && touch /var/www/secret/file.txt"}, "description": "Set up a scenario where the web server user (www-data) can edit the file /var/www/secret/file.txt with superuser privileges using the command vim (without password authentication), and no other files can be edited in the same way by the same user.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(echo 'secret info' | sudo -u www-data /usr/bin/vim /var/www/secret/file.txt - +qall) && (sudo -u www-data /usr/bin/vim /etc/passwd -c 'q!') | if [ \"$(cat /var/www/secret/file.txt)\" = \"secret info\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 740 /var/www/secret && chown root:www-data /var/www/secret && chmod g+s /var/www/secret"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && mkdir /public && cd /public && touch file1 file2 file3 && chmod 666 file* && chown jane file*"}, "description": "Create a new user called john and grant him read and write access to the files located in /public. Additionally, make sure that john can create new files or directories under /public. After that, you will give jane the permission to delete files under /public created by john.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(touch /public/newfile && su - john -c 'touch /public/johnfile' && echo 'example content' > /public/newfile && su - john -c 'echo 'john content' > /public/johnfile' && su - john -c 'mkdir /public/johndir' && rm -f /public/newfile && su - jane -c 'rm -f /public/john*' && ls /public | wc -l | awk '{if ($1==3) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && chmod 767 /public && usermod -a -G jane john && chmod -R u+w,g+s,o-rwx /public && find /public -type d -exec chmod g+ws {} + && chown john /public/file* && setfacl -m u:jane:rw /public/file*"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && touch /logs && chmod o-rwx /logs && chgrp jane /logs && find / -user jane -exec chmod g+r {} \\;"}, "description": "Create a user named jane and make a file /logs that can be read only by jane, not by others. Find all files owned by jane and add read permission to that file for jane's group", "evaluation": {"type": "ground-truth", "answer": "", "checking": null, "example": {"type": "command", "data": "find / -user jane -exec chmod g+r {} \\;"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m joe && useradd -m amy && useradd -m melissa && useradd -m ben && mkdir /salary && touch /salary/report.txt && touch /salary/document.docx && touch /salary/presentation.pptx && chown -R joe:salary /salary && chmod -R 640 /salary"}, "description": "Set the files in /salary directory to be readable and writable only by Joe and the group salary; Amy and Melissa should only be able to read the files; Ben should have no access to the files.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u amy cat /salary/report.txt && sudo -u amy touch /salary/example.txt && sudo -u melissa cat /salary/document.docx) | if [[ ! $(cat -) =~ 'Permission denied' ]]; then exit 1;fi && (sudo -u joe touch /salary/example.txt && sudo -u amy touch /salary/example.txt && sudo -u melissa touch /salary/example.txt && sudo -u ben touch /salary/example.txt) 2>&1 | if [[ ! $(cat -) =~ 'Permission denied' ]]; then exit 1;fi"}, "example": {"type": "command", "data": "chmod 664 /salary/report.txt && chmod 440 /salary/document.docx && chmod 440 /salary/presentation.pptx"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && mkdir /var/post && touch /var/post/file && chown john:root /var/post/file && chmod 620 /var/post/file && su - john"}, "description": "John needs to access the file '/var/post/file'. However, he should not be able to modify or delete the file. Give John the required permissions to read the file.", "evaluation": {"type": "ground-truth", "answer": "John can access the file '/var/post/file' and can view its contents.", "checking": null, "example": {"type": "command", "data": "su - john && cat /var/post/file"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/luke -m luke && useradd -s /bin/bash -d /home/leia -m leia && echo 'DarthVader' > /home/luke/light && echo 'Yoda' > /home/leia/dark && chmod 440 /home/luke/light && chmod 440 /home/leia/dark && chattr +i /home/luke/light && chattr +i /home/leia/dark && su - luke"}, "description": "Luke is trying to modify the file 'light' with his user login. How can he obtain write access to the file without changing the permissions?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo cat /home/luke/light | grep 'use the force luke' | wc -l | if [ \"$(cat -)\" = \"1\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo chattr -i /home/luke/light && echo 'use the force luke' >> /home/luke/light && chattr +i /home/luke/light"}}, "labels": ["file attribute", "permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/asdf -m asdf && echo 'asdf ALL=NOPASSWD: /bin/ls' >> /etc/sudoers && su - asdf"}, "description": "Allow 'asdf' to execute '/bin/ls' with sudo without being prompted for password", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo /bin/ls /root/ | grep -q root && sudo /bin/ls /home/ | grep -q home && sudo /bin/ls /etc/ | grep -q sudoers"}, "example": {"type": "command", "data": "echo 'asdf ALL=NOPASSWD:/bin/ls' >> /etc/sudoers"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/files && touch /home/files/file1.txt && touch /home/files/file2.txt && chmod 760 /home/files && chmod 660 /home/files/* && chmod g+s /home/files"}, "description": "Create a new user named 'user1' and add them to the group 'dataaccess'. Ensure that 'user1' has read and write permissions for the '/home/files' directory and all files within it, but cannot execute them. Additionally, any new files or directories created inside the '/home/files' directory should automatically inherit the group ownership 'dataaccess'. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u user1 ls /home/files/*.txt > /dev/null 2>&1 && sudo -u user1 touch /home/files/file3.txt && sudo -u user1 ls /home/files/file3.txt > /dev/null 2>&1 && ls -ld /home/files | awk '{if ($1==\"drwxrw----\") {exit 0;} else {exit 1;}}') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && usermod -aG dataaccess user1 && chmod 770 /home/files && chmod g+s /home/files && setfacl -R -m u:user1:rwX /home/files"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && cd /home/jack && echo 'hello world' > test && chmod 777 test && su - jack"}, "description": "execute ~/test as jack and get the output", "evaluation": {"type": "ground-truth", "answer": "hello world", "checking": null, "example": {"type": "command", "data": "~/test"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir photos && cd photos && mkdir old && mkdir new && touch photo1 && touch photo2 && touch new/a && touch new/b && touch old/c"}, "description": "set photo1 to be 644 and photo2 to be 600 while the directories have read-write-execute permissions for its owner, and only read and execute permissions for other users. Set new to be owned by jane and old to be owned by root, without changing their permissions. The command should not change the ownership or permissions of any other file or directory in /home/jane/photos", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/jane/photos/photo1 | awk '{if ($1~/^-rw-r--r--/) { exit 0; } else { exit 1; } }' && ls -l /home/jane/photos/photo2 | awk '{if ($1~/^-rw-------/) { exit 0; } else { exit 1; } }' && find /home/jane/photos -type d -not -user jane -exec ls -ld {} +  | awk '{if ($1!~/^drwxr-x---/) { exit 1; } else { exit 0; } }' && find /home/jane/photos -type d -user jane -exec ls -ld {} +  | awk '{if ($1!~/^drwx------/) { exit 1; } else { exit 0; } }') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 644 /home/jane/photos/photo1 && chmod 600 /home/jane/photos/photo2 && find /home/jane/photos -type d -exec chmod 700 {} + && chown jane:new /home/jane/photos/new && chown root:root /home/jane/photos/old"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jason -m jason && cd /home/jason && mkdir secret && cd secret && echo 'topsecret' > file && chmod 400 file && chown jason file && find ~/secret -type d -exec chmod 500 {} +"}, "description": "jason has a secret file under ~/secret/file. Give user mike read access to the file and ensure no one else has access to read or write to it, while keeping the directory inaccessible to anyone except jason", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u mike cat /home/jason/secret/file | if [ \"$(cat -)\" = \"topsecret\" ]; then exit 0; else exit 1; fi) && (ls -l /home/jason/secret | awk '{if ($1!~/^dr-x------/) { exit 1; }}') && find /home/jason/secret -type f -exec chmod 400 {} + && find /home/jason/secret -type d -exec chmod 500 {} +"}, "example": {"type": "command", "data": "chmod o-rwx /home/jason/secret && sudo touch /etc/sudoers.d/jason && sudo chmod 600 /etc/sudoers.d/jason && echo 'mike ALL=(jason) cat /home/jason/secret/file' > /etc/sudoers.d/jason"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/simon -m simon && useradd -s /bin/bash -d /home/stuart -m stuart && useradd -s /bin/bash -d /home/linda -m linda && chgrp simon /usr/bin/cat && chmod g+s /usr/bin/cat && chgrp stuart /usr/bin/less && chmod g+s /usr/bin/less && chgrp linda /usr/bin/tail && chmod g+s /usr/bin/tail"}, "description": "You are a member of all three groups (simon, stuart, linda) and want to view the content of a file called important.txt, but you don't have permission to access it directly. What command(s) can you use to view the contents of this file?", "evaluation": {"type": "ground-truth", "answer": "sudo cat important.txt", "checking": null, "example": {"type": "command", "data": "touch important.txt && echo 'sensitive info' >> important.txt && chown root:root important.txt && chmod 400 important.txt && sudo -u simon cat important.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir files && touch files/file1 && touch files/file2 && chown jane:jane files && chown jane:jane files/* && chmod 770 files"}, "description": "jane wants to allow her colleague, alex, to read and write files in the 'files' directory. What permission changes should she make?", "evaluation": {"type": "ground-truth", "answer": "chmod g+rw files", "checking": null, "example": {"type": "command", "data": "chmod g+rw files"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir data && touch data/file1 && chown john:john data/file1 && chmod 400 data/file1"}, "description": "Give group 'sales' read permission to /home/john/data/file1 using ACL.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "getfacl /home/john/data/file1 | grep -q 'group:sales:r--' && sudo -u sales -s -- getfacl /home/john/data/file1 | grep -q 'group:sales:r--'"}, "example": {"type": "command", "data": "setfacl -m g:sales:r /home/john/data/file1"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sara -m sara && cd /home/sara && mkdir work && cd work && touch file1 && chmod 755 /home/sara/work && chmod 766 /home/sara/work/file1 && useradd -s /bin/bash -d /home/john -m john && usermod -aG sara john && su - john"}, "description": "John wants to create a file inside sara's work folder, but he is unable to do so. Help John by giving him permissions to create a file inside sara's work folder.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "[ -w /home/sara/work ] && echo 'Permission granted'"}, "example": {"type": "command", "data": "chmod o+w /home/sara/work"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "touch secret.txt && chmod 600 secret.txt && echo 'This is a secret message' > secret.txt"}, "description": "Give only read permission of secret.txt to user 'john' and read, write, execute permissions to user 'root'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l secret.txt | awk '{if ($1 != \"-rw-------\") {exit 1;} else if ($3 != \"root\") {exit 1;} else if ($4 != \"john\") {exit 1;} else {exit 0;}}'"}, "example": {"type": "command", "data": "chmod 640 secret.txt && chown root:john secret.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && echo 'mike ALL=(ALL) NOPASSWD: /usr/bin/apt-get' >> /etc/sudoers"}, "description": "Grant mike sudo access that allows him to only use apt-get command, and nothing else. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u mike sudo apt-get update | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi && sudo -u mike sudo say 'I can use apt-get command only' | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'mike ALL=(ALL) NOPASSWD: /usr/bin/apt-get' >> /etc/sudoers"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/guest -m guest && cd /home/guest && mkdir files && touch files/file1 && touch files/file2 && chmod 700 files && chmod 400 files/* && echo 'echo Welcome to the guest account!' >> /etc/bash.bashrc && su - guest"}, "description": "A guest user account has been created with read-only access to a directory called /home/guest/files, but we want to allow the guest account to create new files and modify existing ones within that directory while maintaining the read-only access for the user account. Change the permissions or ownership in a way to achieve this.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(echo 'test content' > /home/guest/files/test_file && cat /home/guest/files/test_file) | if [ \"$(cat -)\" = \"test content\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+s /home/guest/files && chown -R :guest /home/guest/files && chmod 770 /home/guest/files"}}, "labels": ["permission", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/julia -m julia && echo 'julia ALL=(ALL) NOPASSWD: /bin/chown -R * /home/julia/*' >> /etc/sudoers && su - julia"}, "description": "Julia wants to recursively change the ownership of all files and directories in her home directory to be her primary group 'julia'. She wants to use sudo for this task, but it prompts her for a password. Help her modify the sudoers file to be able to run the chown command without a password.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo chown julia:$(id -gn julia) / || echo 'fail') && (sudo chown -R * /home/julia/* || echo 'fail') && (ls -lR /home/julia | grep -v \"total\") | awk '{if ($3 != \"julia\") { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "echo 'julia ALL=(ALL) NOPASSWD: /bin/chown -R * /home/julia/*' >> /etc/sudoers"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && useradd -s /bin/bash -d /home/bill -m bill && useradd -s /bin/bash -d /home/tom -m tom && useradd -s /bin/bash -d /home/george -m george && touch /home/jack/file1 && touch /home/bill/file2 && touch /home/tom/file3 && touch /home/george/file4"}, "description": "Set permissions so that only the owner can read and write their own file in the /home directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jack cat /home/jack/file1; sudo -u bill cat /home/bill/file2; sudo -u tom cat /home/tom/file3; sudo -u george cat /home/george/file4 ) | if [ \"$(cat -)\" = \"cat: /home/bill/file2: Permission denied\"$'\\n''\\'$'\\n''cat: /home/george/file4: Permission denied\\'$'\\n''\\'$'\\n''cat: /home/jack/file1: Permission denied\\'$'\\n''\\'$'\\n''cat: /home/tom/file3: Permission denied\\'$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 600 /home/*/file*"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/carla -m carla && useradd -s /bin/bash -d /home/jason -m jason && echo 'groupadd police && usermod -a -G police jason && chown carla:police /home/carla/investigation.txt' > /tmp/setup.sh && chmod +x /tmp/setup.sh && /tmp/setup.sh"}, "description": "You are Carla, a detective in a special police unit that investigates cyber crimes. One of your colleagues, Jason, needs to access a file called /home/carla/investigation.txt. However, you don't want him to be able to see the content of the file, but you want him to be able to append new information to the end of the file. You also need to ensure that other users on the system cannot read or modify the file. Set the appropriate file permissions to achieve this.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/carla/investigation.txt | grep -q -e '^-.*--w--w-' || echo 'Missing correct permissions for file') && (grep -q -e '^carla.*:police' /etc/group || echo 'Missing correct group assignment for file')"}, "example": {"type": "command", "data": "chmod 116 /home/carla/investigation.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'sensitive_content' > /home/john/file.txt && chmod 400 /home/john/file.txt"}, "description": "As a root user, give only user john read permission on file.txt without changing its ownership or group", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - john -c 'cat /home/john/file.txt' && su - not_john -c 'cat /home/john/file.txt') | if [ \"$(cat -)\" = \"sensitive_content$'\\n'$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "setfacl -m u:john:r /home/john/file.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && cd /home/emma && mkdir private && echo 'summersun' > private/secret.txt && chmod 400 private/secret.txt && chown emma private/secret.txt && su - emma"}, "description": "Create a new user \"john\" and allow him to read but not modify the file located at /home/emma/private/secret.txt", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l john -c 'cat /home/emma/private/secret.txt' | if [ \"$(cat -)\" = \"summersun\" ]; then exit 0; else exit 1; fi && (echo 'hacking_attempt' >/home/emma/private/secret.txt; [ $? -ne 0 ] && exit 0 || exit 1 ) && chmod 640 /home/emma/private/secret.txt && chgrp some_group /home/emma/private/secret.txt"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && usermod -a -G emma john && chown emma /home/emma/private/secret.txt && chmod 440 /home/emma/private/secret.txt && chmod g+r /home/emma/private/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/admin && useradd -s /bin/bash -d /home/admin -m admin && chown -R admin:admin /home/admin && chmod 774 /home/admin && echo 'admin ALL=(ALL) NOPASSWD: /usr/bin/apt-get' >> /etc/sudoers"}, "description": "Create a user named 'admin', grant the user permission to run apt-get without password, and make the user owner of /home/admin and all files and directories under it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo su - admin -c 'apt-get update' | if [[ $? -eq 0 ]]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o-rwx /home/admin"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && echo 'root-only' > file1 && echo 'group-only' > file2 && echo 'world-readable' > file3 && chmod 600 file1 && chmod 640 file2 && chmod 644 file3"}, "description": "Which files can be read by the user bob? List the file names separated by space.", "evaluation": {"type": "ground-truth", "answer": "file1 file2 file3", "checking": null, "example": {"type": "command", "data": "ls -l file* | awk '{if ($3 == \"bob\" || $4 == \"bob\") { print $9; }}'"}}, "labels": ["permission", "user", "security"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jason -m jason && touch /somefile && chown jason:root /somefile && chmod 664 /somefile && chgrp root /"}, "description": "Can the user jason modify the /somefile? Why or why not? If not, explain how to give the necessary permissions to jason.", "evaluation": {"type": "written", "answer": "Yes, jason can modify the /somefile. The file has 664 permissions, which means the owner (jason) has read and write permissions, as well as the group (root) and others. Additionally, the / directory has root as the group owner which allows jason, as a member of the root group, to modify files in the directory.\nIf jason didn't have permission to modify /somefile, we could give jason access by running the command 'chmod g+w /somefile' to allow members of the group to have write access to the file.", "checking": null, "example": null}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && touch test && chown john.jane test"}, "description": "How to change the ownership of the file \"test\" to user \"jane\", without changing the group ownership?", "evaluation": {"type": "ground-truth", "answer": "chown .jane test", "checking": null, "example": {"type": "command", "data": "chown john.jane test && chown .jane test"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && touch /home/user1/file1 && touch /home/user2/file2"}, "description": "Give user1 and user2 all permissions on their own files and no permissions on each other's files", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/user1/file1 | awk '{print $1}' | cut -c 5-10 | grep -q 'rwx' && ls -l /home/user2/file2 | awk '{print $1}' | cut -c 2-4 | grep -q '---') && !(ls -l /home/user1/file1 | awk '{print $1}' | cut -c 2-4 | grep -q '---') && !(ls -l /home/user2/file2 | awk '{print $1}' | cut -c 5-10 | grep -q 'rwx') && !(ls -l /home/user2/file2 | awk '{print $1}' | cut -c 2-4 | grep -q '---') && !(ls -l /home/user1/file1 | awk '{print $1}' | cut -c 5-10 | grep -q 'rwx') && !(ls -l /home/user1/file1 | awk '{print $1}' | cut -c 2-4 | grep -q '---') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 700 /home/user1/file1 && chmod 700 /home/user2/file2 && chown user1:user1 /home/user1/file1 && chown user2:user2 /home/user2/file2"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/mydir && chmod 777 /home/mydir && useradd -s /bin/bash -d /home/mydir -m myuser && echo 'myuser ALL = (root) NOPASSWD: /bin/cat' >> /etc/sudoers && su - myuser"}, "description": "Create a file called test.txt in /home/mydir with 'hello world' as its content. Give the myuser user read-only permission to the file using sudo with the least amount of privileges required.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u myuser cat /home/mydir/test.txt | if [ \"$(cat -)\" = \"hello world\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'hello world' > /home/mydir/test.txt && chmod 640 /home/mydir/test.txt && chown root:myuser /home/mydir/test.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && echo 'Hello World!' > test.txt && chmod 700 test.txt && chattr +i test.txt && su - bob"}, "description": "Bob's test file always keeps on getting deleted. Help Bob to set an un-deleteble file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "[[ $(find /home/bob/test.txt) ]] && [[ $(sudo chown root /home/bob/test.txt && sudo rm /home/bob/test.txt && [[ $(find /home/bob/test.txt) ]]) ]] && exit 0; || exit 1; "}, "example": {"type": "command", "data": "chattr +i /home/bob/test.txt"}}, "labels": ["permission", "security"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/david -m david && cd /home/david && touch file1 && touch file2 && touch file3 && chattr +i file3 && su - david"}, "description": "Why can't I delete file3? Help me fix it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "rm /home/david/file3 && ls /home/david | grep file3 | if [ \"$(cat -)\" = \"file3\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chattr -i /home/david/file3"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && su - mike"}, "description": "What is the difference between chmod 777 and chmod +rwx?", "evaluation": {"type": "ground-truth", "answer": "There is no difference between chmod 777 and chmod +rwx. They both grant read, write, and execute permissions to all users on the file or directory.", "checking": null, "example": {"type": "command", "data": ""}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sarah -m sarah && cd /home/sarah && mkdir photos && cd photos && touch photo1 && touch photo2 && chmod -R 750 /home/sarah && chmod 700 /home/sarah/photos && chown sarah:sarah /home/sarah/photos"}, "description": "Make the photos directory accessible to the user mike who belongs to the group sarah, but not to any other user or group", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/sarah/photos ! -user sarah -print -quit && find /home/sarah/photos ! -group sarah -print -quit && find /home/sarah/photos ! -perm 700 -print -quit) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G sarah mike && chown sarah:mike /home/sarah/photos && chmod 750 /home/sarah/photos"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/bob -m bob && touch file.txt && echo 'Hello World' > file.txt && chown john file.txt && chmod 740 file.txt && chgrp john file.txt"}, "description": "Bob needs to read the file.txt, but should not be able to modify it. Allow Bob to read file.txt without modifying its permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - bob -c 'cat ~/file.txt' | if [ \"$(cat -)\" = \"Hello World\" ]; then exit 0; else exit 1; fi && (stat -c %a file.txt | grep 740 > /dev/null) && (stat -c %U:%G file.txt | grep john:john > /dev/null)"}, "example": {"type": "command", "data": "chmod g+r file.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && cd /home/lisa && mkdir folder && touch folder/file && chmod -R 751 /home/lisa"}, "description": "Set permissions on the /home/lisa directory so that only the owner (lisa) can access files and folders within it, and no one else can access any of its contents", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -ld /home/lisa | awk '{if ($1~/^drwx--x--x/) { exit 0; } else { exit 1; }}') && (ls -l /home/lisa/folder | awk '{if ($1~/^-rwx--x--x/) { exit 0; } else { exit 1; }}') && (ls -l /home/lisa/folder/file | awk '{if ($1~/^-rw-------/) { exit 0; } else { exit 1; }}') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 700 /home/lisa && chmod 700 /home/lisa/folder && chmod 600 /home/lisa/folder/file"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && useradd -s /bin/bash -d /home/mary -m mary && useradd -s /bin/bash -d /home/emma -m emma && cd /home && mkdir data && cd data && touch file1 && touch file2 && touch file3 && chmod 600 * && chown lisa:users file1 && chown mary:users file2 && chown emma:users file3"}, "description": "Set permission for /home/data in such a way that lisa can only read and write to file1, mary can only read and write to file2, and emma can only read and write to file3. Other users should not be able to access the files, but should be able to access the /home/data directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u lisa test -w /home/data/file1 && sudo -u lisa test ! -r /home/data/file2 && sudo -u lisa test ! -r /home/data/file3 && sudo -u mary test -w /home/data/file2 && sudo -u mary test ! -r /home/data/file1 && sudo -u mary test ! -r /home/data/file3 && sudo -u emma test -w /home/data/file3 && sudo -u emma test ! -r /home/data/file1 && sudo -u emma test ! -r /home/data/file2 && sudo -u alice test -r /home/data && sudo -u bob test -r /home/data && sudo -u chuck test -r /home/data"}, "example": {"type": "command", "data": "chmod 700 /home/data && setfacl -m u:lisa:rw /home/data/file1 && setfacl -m u:mary:rw /home/data/file2 && setfacl -m u:emma:rw /home/data/file3 && setfacl -d -m u::rwx,g::r-x,o::r-x /home/data"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user -m user && echo 'Welcome to Linux permissions. This is a test.' > /home/user/test.txt && chmod 664 /home/user/test.txt"}, "description": "Add another user 'tester' to the system and give them read-only permissions to /home/user/test.txt. The 'tester' user should not be able to modify or delete the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l tester -c 'echo hello' 2>/dev/null && runuser -l tester -c 'echo hello >> /home/user/test.txt' 2>/dev/null && runuser -l tester -c 'rm /home/user/test.txt' 2>/dev/null || exit 0"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/tester -m tester && usermod -aG user tester && chmod 444 /home/user/test.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir docs && touch docs/doc1 && touch docs/doc2 && touch docs/doc3 && chmod 640 docs/doc1 && chmod 660 docs/doc2 && chmod 600 docs/doc3"}, "description": "All the files present in /home/john/docs directory should have a read permission for the user john, write permission for the group to which the files belong and no permission for others. Achieve this without changing the permissions on the directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/john/docs | awk 'NR>1 && $1!~/^-.r.-rw....$/') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 260 /home/john/docs/* && chmod g+w /home/john/docs/*"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m kate && echo 'secret' > /home/kate/secret.txt && chmod 400 /home/kate/secret.txt"}, "description": "Kate wants to share her secret.txt file with her friend James, who has an account on the computer. However, Kate doesn't want anyone else to be able to read the file. Help her share the file with James while keeping the file private from others.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/kate/secret.txt && su - james -c 'cat /home/kate/secret.txt') | if [ \"$(cat -)\" = \"secret\"$'\\n'\"secret\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo chgrp james /home/kate/secret.txt && chmod g+r /home/kate/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/mary -m mary && echo 'sudo ALL=(ALL:ALL) ALL' >> /etc/sudoers && echo 'john ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && echo 'mary ALL=/usr/sbin/useradd, /usr/sbin/userdel' >> /etc/sudoers"}, "description": "Set up sudoers file so that Mary can only use sudo to execute /usr/sbin/useradd and /usr/sbin/userdel. Allow John to use sudo to execute any command without a password prompt. The sudo group should be able to execute any command with a password prompt.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - john -c 'sudo echo \"hello\"' | if [ \"$(cat -)\" = \"hello\" ]; then su - mary -c 'sudo useradd testuser && sudo userdel testuser' && exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'sudo ALL=(ALL:ALL) ALL' >> /etc/sudoers && echo 'john ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && echo 'mary ALL=/usr/sbin/useradd, /usr/sbin/userdel' >> /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/alice -m alice && cd /home/bob && mkdir shared && cd shared && touch secret.txt && chown bob:bob secret.txt && chmod 400 secret.txt && cd /home/alice && ln -s /home/bob/shared shared && cd shared"}, "description": "Alice is trying to access a file named secret.txt which belongs to Bob's home directory. Use symbolic links to provide access to Alice without sharing the entire directory. Ensure that the file can only be read by Bob or Alice.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/bob/shared/secret.txt && echo '') | if [ \"$(cat -)\" = \"top secret\"$'\\n''$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o-r /home/bob && ln -s /home/bob/shared /home/alice/shared && chmod -R 600 /home/bob/shared"}}, "labels": ["symbolic link", "permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": ""}, "description": "What is the difference between chmod and chown? Explain them with examples.", "evaluation": {"type": "ground-truth", "answer": "chmod is used to change the permissions of a file or directory, such as whether it can be read, written, or executed by the owner, group, or others. For example, chmod 755 file.txt allows the owner to do anything with the file and others to only read and execute the file. chown, on the other hand, is used to change the ownership of a file or directory to a specific user or group. For example, chown mike:users file.txt changes the ownership of file.txt to user mike and group users.", "checking": null, "example": {"type": "question", "data": "What is chmod used for?"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/david -m david && echo 'Hi, David!' > /home/david/message.txt && chmod 400 /home/david/message.txt && su - david"}, "description": "As a user named david, what happens when you try to execute /bin/bash? How can we allow david to execute /bin/bash?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "/bin/bash"}, "example": {"type": "command", "data": "chmod 750 /bin/bash"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && groupadd project && usermod -aG project bob && mkdir /project_dir && chgrp project /project_dir && chmod 2770 /project_dir && touch /project_dir/project_file && chmod 660 /project_dir/project_file && chown :project /project_dir/project_file && su - bob"}, "description": "Bob needs to work on a project file located in /project_dir. How can he make sure that other users in the project group can also access this file?", "evaluation": {"type": "ground-truth", "answer": "Bob can change the group ownership of the project file using the command 'chgrp project /project_dir/project_file' and then ensure that members of the project group have appropriate permissions by using the command 'chmod g+rw /project_dir/project_file'.", "checking": null, "example": {"type": "command", "data": "chgrp project /project_dir/project_file && chmod g+rw /project_dir/project_file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /photos && touch /photos/pic1.jpg && touch /photos/pic2.jpg && chmod 444 /photos/pic1.jpg && chmod 777 /photos/pic2.jpg"}, "description": "What are the permissions of /photos and /photos/pic1.jpg and /photos/pic2.jpg? Modify the permissions of /photos/pic1.jpg to make it writable by the owner only, and /photos/pic2.jpg readable by the owner, writable by the group, and not executable by anyone. Do not change the permissions of /photos directory itself.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "{ [ \"$(ls -ld /photos | awk '{print $1}')\" = \"drwxr-xr-x\" ] && [ \"$(ls -l /photos/pic1.jpg | awk '{print $1}')\" = \"-r--r--r--\" ] && [ \"$(ls -l /photos/pic2.jpg | awk '{print $1}')\" = \"rwxrwxr--\" ]; } && { [ \"$(stat /photos/pic1.jpg --format '%A')\" = \"r--r--r--\" ] && [ \"$(stat /photos/pic1.jpg --format '%a')\" = \"444\" ] && [ \"$(stat /photos/pic2.jpg --format '%A')\" = \"rw-rw-r--\" ] && [ \"$(stat /photos/pic2.jpg --format '%a')\" = \"664\" ]; } | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 600 /photos/pic1.jpg && chmod 660 /photos/pic2.jpg"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/rachel -m rachel && cd /home/rachel && touch file1 && touch file2 && echo 'user1' > file1 && echo 'user2' > file2 && chmod 440 file1 && chmod 660 file2"}, "description": "Grant read-only permission of file1 to user2 and give both users access to file2.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u user1 cat /home/rachel/file1 && sudo -u user2 cat /home/rachel/file2) | if [ \"$(cat -)\" = \"user1$'\\n'user2\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+r /home/rachel/file1 && chown :user2 /home/rachel/file2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir -p dir1/dir2/dir3 && touch file1 file2 && chmod 000 file1 && chmod 700 dir1 && chmod 500 dir1/dir2 && chmod 300 dir1/dir2/dir3 && chown -R john dir1"}, "description": "Give user 'john' access to 'file1' without giving access to any of its parent directories", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - john -c 'cat file1' && ! su - john -c 'ls dir1' && ! su - john -c 'ls dir1/dir2' && ! su - john -c 'ls dir1/dir2/dir3'"}, "example": {"type": "command", "data": "chmod 400 file1 && chmod o+x dir1/dir2/dir3 && chmod o+r file1 && chown john:john file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /sharedfolder && chmod 777 /sharedfolder && useradd -s /bin/bash -d /home/userA -m userA && useradd -s /bin/bash -d /home/userB -m userB && usermod -a -G userA userB"}, "description": "Create a shared folder(/sharedfolder) that can be accessed by userA and userB. UserB should also be able to write to this folder", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u userA touch /sharedfolder/testA && sudo -u userB touch /sharedfolder/testB && sudo -u userB echo 'test' > /sharedfolder/testB && cat /sharedfolder/testA && cat /sharedfolder/testB) | if [ \"$(cat -)\" = \"\"test\"$'\\n'\"test\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 777 /sharedfolder"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && apt update && apt install curl -y"}, "description": "Give jane permission to access /opt and allow her to execute only a shell script named test.sh inside the directory. No other files should be executable.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -ld /opt | awk '{if ($1 !~ /^d........./) { exit 1; } else { exit 0; } }' && find /opt -name test.sh ! -executable -printf '%M %u %g %p\\n' | grep -vE '^..x..... jane jane$' | wc -l | awk '{if ($1 > 0) { exit 1; } else { exit 0; }}' && sudo -H -u jane sh -c 'cd /opt && ./test.sh > /tmp/output && [ \"$(cat /tmp/output)\" = \"hello world\" ]' && sudo -H -u jane sh -c 'cd /opt && chmod a-x *.sh'"}, "example": {"type": "command", "data": "mkdir /opt && touch /opt/test.sh && echo 'echo hello world' > /opt/test.sh && chmod 111 /opt/test.sh && chown root:root /opt && chown jane:jane /opt/test.sh && chmod 711 /opt && chmod 755 /opt/test.sh"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/ben -m ben && useradd -s /bin/bash -d /home/jim -m jim && useradd -s /bin/bash -d /home/mike -m mike && useradd -s /bin/bash -d /home/tom -m tom && mkdir /mydir && touch /mydir/myfile && chown tom:tom /mydir/myfile"}, "description": "Make /mydir/myfile readable to ben and jim but not mike, and add the executing permission to all users for the directory /mydir and its subdirectories and contents. Then create a file in /mydir/myfile called hello.txt with the word 'hello' in it, using the echo command.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u ben cat /mydir/myfile && sudo -u jim cat /mydir/myfile && sudo -u mike cat /mydir/myfile) | if [ \"$(cat -)\" = \"hello\nhello\n\" ]; then exit 0; else exit 1; fi && (ls -l /mydir | awk '{ if ($1 !~ /^d.rwxr-xr-x/ || $3 != \"tom\" || $4 != \"tom\") { exit 1; } }') && (ls -Rl /mydir | awk '{ if ($1 !~ /^-...r--r--/ || $3 != \"ben\" || $4 != \"tom\" && $3 != \"jim\" || $NF != \"hello.txt\") { exit 1; } }')"}, "example": {"type": "command", "data": "chmod -R 755 /mydir && chmod o-r /mydir/myfile && echo 'hello' > /mydir/myfile/hello.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/test -m test && cd /home/test && mkdir -p dir1/foo && echo 'hello world' > dir1/foo/file1 && chmod -R 700 dir1 && chown -R test: dir1"}, "description": "Change the permissions of `file1` to 400, and check if the user `test` is able to read the file or not.", "evaluation": {"type": "ground-truth", "answer": "No, user `test` will not be able to read the file with 400 permission.", "checking": null, "example": {"type": "command", "data": "chmod 400 dir1/foo/file1 && su - test -c 'cat dir1/foo/file1'"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "touch secret.txt && chmod 600 secret.txt"}, "description": "Create a file called `secret.txt` with 600 permissions (only owner can read/write) and add another user called `bob` to be able to read/write to `secret.txt`", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su bob -c 'cat secret.txt' && su bob -c 'echo \"hello\" >> secret.txt') | if [ \"$(cat -)\" = \"\"hello\"$'\\n'\"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && chown :bob secret.txt && chmod 660 secret.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir directory && touch directory/file && chmod 440 directory/file && chown john:john directory/file && su - john"}, "description": "john needs to give his friend read-only access to 'file', but his friend should not be able to execute or modify the file. How can he achieve this?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - john -c 'cat directory/file' && su - friend -c 'cat directory/file') | if [ \"$(cat -)\" = \"file information\"$'\\n'\"file information\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/friend -m friend && usermod -a -G john friend && chmod 444 /home/john/directory/file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'Hello, world!' > test.txt && chmod 444 test.txt"}, "description": "Read the contents of the file /home/john/test.txt as another non-root user (without changing file permissions)", "evaluation": {"type": "ground-truth", "answer": "Hello, world!", "checking": null, "example": {"type": "command", "data": "cat /home/john/test.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'hello' > test.txt && su - john"}, "description": "Read the content of /home/john/test.txt without changing its permission", "evaluation": {"type": "ground-truth", "answer": "hello", "checking": null, "example": {"type": "command", "data": "cat /home/john/test.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir -p /home/folder && touch /home/folder/a.txt && chmod 444 /home/folder/a.txt && chattr +i /home/folder/a.txt"}, "description": "What do the file permissions and flags of /home/folder/a.txt mean, and how can they be changed?", "evaluation": {"type": "question", "answer": "The file permissions of /home/folder/a.txt are 444, which means that the owner, group and others have read-only access to the file. The chattr flag +i has been set, which means that the file is immutable and cannot be modified, deleted, or renamed. To change the file permissions, one can use the chmod command followed by the desired permissions. To remove the immutable flag, one can use the chattr command followed by -i flag.", "grading": {"type": "manual"}}, "labels": ["permission", "flag"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'hello world!' > note.txt && chmod -rwx note.txt"}, "description": "John created a text file called note.txt in his home directory with the message 'hello world!'. However, he accidentally removed all permissions to the file. Help him give himself read and write access to the file while keeping the file intact.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "'$(sudo -u john cat /home/john/note.txt)' == 'hello world!' && '-rw-------' == $(sudo ls -l /home/john/note.txt | awk '{print $1}')"}, "example": {"type": "command", "data": "chmod u+rw note.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir lab && touch lab/report.txt && chmod 700 lab && chmod 400 lab/report.txt && chown john:john lab/report.txt &&su - john"}, "description": "As John, list the contents of the /home folder and determine if it's possible to access the contents of the /home directory without permission. Explain why or why not.", "evaluation": {"type": "written", "answer": "John cannot access the /home directory without permission since the permissions on the directory are set to 700, which only allows the owner to read, write, and execute the directory. Any attempt to access the contents of /home directory will result in a 'permission denied' error. ", "checking": null, "example": null}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'secret' > testfile.txt && chmod 400 testfile.txt && chown john testfile.txt"}, "description": "You are logged in as a user different from john. Change the owner of testfile.txt to yourself.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l | grep testfile.txt | awk '{if ($3 == \"$USER\") { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "sudo chown $USER testfile.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && echo 'lisa ALL=(ALL:ALL) ALL' >> /etc/sudoers && cd /home/lisa && mkdir secretpath && echo 'You found the secret path!' > secretpath/secret.txt && chmod 777 secretpath && find ~/secretpath -type f -exec chmod 600 {} + && find ~/secretpath -type d -exec chmod 700 {} +"}, "description": "Create a new user called 'peter' with the same permission as user 'lisa'. Change to user 'peter' and navigate to the ~/secretpath directory. Print the contents of secret.txt using sudo without executing any other command as root", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u peter cat /home/lisa/secretpath/secret.txt | grep 'You found the secret path!'"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/peter -m peter && sudo usermod -G sudo peter && cd /home/peter && su peter && cd ~/secretpath && sudo cat secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jessie -m jessie && useradd -s /bin/bash -d /home/sara -m sara && useradd -s /bin/bash -d /home/jamie -m jamie && useradd -s /bin/bash -d /home/victoria -m victoria && apt update && apt install sudo -y"}, "description": "Create a new group called \u2018legal\u2019 and make jessie, sara and jamie as its members. Add \u2018victoria\u2019 as sudoer without password. Also, set a sticky bit to a directory called \u2018cases\u2019 that is owned by \u2018legal\u2019 group, so only members of that group can delete files from that directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(grep legal /etc/group && echo 'victoria ALL=NOPASSWD: ALL' >> /etc/sudoers && ls -ld /cases | awk '{if ($1 ~ /drwxrwsr-x/) { exit 0; } else { exit 1; }}' ) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd legal && usermod -a -G legal jessie && usermod -a -G legal sara && usermod -a -G legal jamie && chgrp legal /cases && chmod 1770 /cases"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /proj && groupadd projgroup && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/sophie -m sophie && usermod -a -G projgroup john && usermod -a -G projgroup sophie && chown root:projgroup /proj && chmod g+s /proj"}, "description": "Create a new directory with name myproj in the root of /proj which only users of projgroup can write to. Make sure both john and sophie are in this group and are able to write to this directory. Set the default permissions for files in /myproj directory to rwxrwxr-x and for directories to rwxrwxrwx.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(mkdir /proj/myproj && chmod 2775 /proj/myproj && touch /proj/myproj/testfile && find /proj/myproj -printf '%m %u:%g %p\n' && [ \"$(stat -c \"%a\" /proj/myproj)\" = \"775\" ]; exit 0) || exit 1"}, "example": {"type": "command", "data": "chmod 775 /proj/myproj && chmod g+s /proj/myproj && setfacl -d -m group:projgroup:rwx /proj/myproj"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/kim -m kim && useradd -s /bin/bash -d /home/matt -m matt && usermod -aG sudo kim && usermod -aG sudo matt && touch sensitive && chmod 600 sensitive && chown root:root sensitive"}, "description": "Ensure that only users in the sudo group can access the sensitive file 'sensitive'. Test it with the user 'kim'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u kim cat sensitive) > /dev/null 2>&1 && sudo -u matt cat sensitive > /dev/null 2>&1 && sudo cat sensitive > /dev/null 2>&1 || echo 'failed'"}, "example": {"type": "command", "data": "chmod 640 sensitive && chgrp sudo sensitive"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && useradd -s /bin/bash -d /home/bill -m bill && useradd -s /bin/bash -d /home/tom -m tom && useradd -s /bin/bash -d /home/george -m george && echo 'bill ALL=(jack) NOPASSWD:/usr/bin/find' >> /etc/sudoers"}, "description": "Configure sudo so that bill can run /usr/bin/find as jack without being asked for a password", "evaluation": {"type": "observation-checking", "answer": null, "checking": {"type": "message", "data": "A script will run that checks that permission is set correctly. If successful, the answer field will be populated."}, "example": {"type": "command", "data": "echo 'bill ALL=(jack) NOPASSWD:/usr/bin/find' >> /etc/sudoers"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m user1 && echo 'Hello, I am user1' > /home/user1/testfile && chmod 0644 /home/user1/testfile && echo 'Hello, I am user2' > /home/user2/testfile && chmod 0644 /home/user2/testfile"}, "description": "Set up the necessary file permissions for user1 to be able to read but not modify /home/user2/testfile, while still allowing user2 to read and modify the file. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u user1 cat /home/user2/testfile; sudo -u user2 -i echo 'Hello from user2' >> /home/user2/testfile) | awk '{if ($0~/Hello, I am user1/ && $NF=='testfile' && $1=='-rw-r--r--.' && $2=='user2' && $3=='user2') exit 0; else exit 1;}'"}, "example": {"type": "command", "data": "chmod 0644 /home/user2/testfile && chown user2:user2 /home/user2/testfile && setfacl -m u:user1:r /home/user2/testfile"}}, "labels": ["permission", "file"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && cd /home/jack && echo 'echo a3b0c7' > test && chmod 000 test && chown jack test &&su - jack"}, "description": "execute ~/test and get the output", "evaluation": {"type": "ground-truth", "answer": "a3b0c7", "checking": null, "example": {"type": "command", "data": "chmod 777 test && ~/test"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/david -m david"}, "description": "Grant read, write and execute permission to user, group and others for a shell script called 'myscript.sh' located in '/home/david' directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "[[ -r /home/david/myscript.sh && -w /home/david/myscript.sh && -x /home/david/myscript.sh ]] &&  echo \"Everyone has read, write, and execute permission\" ||  echo \"Everyone does not have read, write, and execute permission\""}, "example": {"type": "command", "data": "chmod 777 /home/david/myscript.sh"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'secretcontent' > /home/john/secretfile && chmod 400 /home/john/secretfile"}, "description": "Give read permission of secretfile to only the group 'secret_group' and add user 'adam' to that group", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/john | grep secretfile | awk '{print $1,$4,$9}') && (sudo -u adam cat /home/john/secretfile) | if [ \"$(cat -)\" = \"secretcontent\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd secret_group && chgrp secret_group /home/john/secretfile && chmod 440 /home/john/secretfile && usermod -a -G secret_group adam"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir scripts && cd scripts && touch script1.sh && touch script2.sh && chown jane: scripts && chown jane: script1.sh && chmod u+x script1.sh && chmod g+x script1.sh && chmod u+x script2.sh && chmod o-x script2.sh && chmod 750 scripts"}, "description": "Jane wants to give executable permissions to all her scripts at once but without giving executable permissions to the other files within the 'scripts' directory. Help her to achieve that.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/jane/scripts -type f ! -name '*sh' ! -perm 0640 | wc -l | grep '^0$') && (find /home/jane/scripts -type f -name '*sh' -perm 754 | wc -l | grep '^2$')"}, "example": {"type": "command", "data": "chmod u+x,g+x,o= /home/jane/scripts/*.sh"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir important_files && cd important_files && touch file1 file2 file3 && chown john file1 && chgrp john file2 && chmod 760 file3 && su - john"}, "description": "You are john and you want to add read/write permissions to all 3 files in ~/important_files for the user mike, without changing the ownership of the files", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/john/important_files/  | awk '{if($1!~/rw..rw..--./ && $1!~/r.---w--w./ && $1!~/r.---r--w./) {exit 1} else {exit 0}}' && runuser -l mike -c 'cd ~/important_files && cat file1 && cat file2 && cat file3 && echo \"permission test passed\"') | if [ \"$(cat -)\" = \"permission test passed\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 760 /home/john/important_files/file* && chmod u+rw /home/john/important_files/file* && runuser -l mike -c 'cd ~/important_files && cat file1 && cat file2 && cat file3'"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /data && touch /data/secret.doc && chgrp dataaccess /data/secret.doc && chmod 640 /data/secret.doc && useradd -s /bin/bash -d /home/faiz -m faiz && useradd -s /bin/bash -d /home/fawad -m fawad && useradd -s /bin/bash -d /home/farooq -m farooq && useradd -s /bin/bash -d /home/fazal -m fazal && usermod -a -G dataaccess faiz && usermod -a -G dataaccess fawad && usermod -a -G dataaccess farooq && usermod -a -G dataaccess fazal"}, "description": "There is a directory '/data' that contains a secret document that should only be accessible to members of the group 'dataaccess'. Ensure that only users belonging to the group 'dataaccess' can read the secret document.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /data/secret.doc && sudo -u faiz cat /data/secret.doc && sudo -u fawad cat /data/secret.doc && sudo -u farooq cat /data/secret.doc && sudo -u fazal cat /data/secret.doc) | if [ \"$(cat -)\" = \"Test secret doc\"$'\\n'\"Test secret doc\"$'\\n'\"Test secret doc\"$'\\n'\"Test secret doc\"$'\\n'\"Test secret doc\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 /data/secret.doc && chgrp dataaccess /data/secret.doc"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jack -m jack && chmod g+s /home/john && chown john:jack /home/john"}, "description": "Make the group owner of the /home/john directory to be jack and only jack can create subdirectories in /home/john", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "[ $(stat -c '%G' /home/john) = 'jack' ] && [ $(find /home/john -type d -printf %u -quit) = 'john' ] && ! mkdir /home/john/new_subdirectory || exit 1"}, "example": {"type": "command", "data": "chmod g+x /home/john"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && cd /home/mark && mkdir music && cd music && mkdir rock && mkdir pop && touch rock/song1 && touch rock/song2 && touch pop/song3 && touch pop/song4"}, "description": "Give mark read, write and execute permissions for the rock folder and only read & execute permission for the pop folder, but do not give mark any permissions for the music folder.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -lR /home/mark/music | grep -v \"^[d|total]\" | awk '{if ($1 ~ /---/) { exit 1; }}') && [ -r /home/mark/music/pop ] && [ ! -x /home/mark/music/pop ] && [ -r /home/mark/music/rock ] && [ -w /home/mark/music/rock ] && [ -x /home/mark/music/rock ]"}, "example": {"type": "command", "data": "chmod -R 700 /home/mark/music && chmod 500 /home/mark/music/pop && chmod 711 /home/mark/music/rock"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && echo '123456' | passwd jane --stdin && cd /home/jane && touch secret.txt && echo 'This is a secret file.' > secret.txt && chown jane:jane secret.txt && chmod 640 secret.txt && useradd -s /bin/bash -d /home/sam -m sam && echo '123456' | passwd sam --stdin"}, "description": "jane has a secret file at her home directory named secret.txt, sam must not open or modify this file. Change the permissions on the secret file to ensure that sam cannot read or modify its content, but jane can.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(grep -q 'jane.*r...' <<< $(ls -l /home/jane/secret.txt)) && (grep -q 'sam.*-...' <<< $(ls -l /home/jane/secret.txt)) && (sudo -u sam cat /home/jane/secret.txt && sudo -u jane cat /home/jane/secret.txt) | if [ \"$(cat -)\" = \"This is a secret file.This is a secret file.\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 /home/jane/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && useradd -s /bin/bash -d /home/jill -m jill && echo 'secret message' > /home/jack/secret && chmod 600 /home/jack/secret && chown jack:jill /home/jack/secret"}, "description": "How can user Jill read the secret message file without changing its ownership or permission?", "evaluation": {"type": "ground-truth", "answer": "By adding user Jill to the group 'jack' and giving the group read permission to the secret file: `usermod -aG jack jill && chmod g+r /home/jack/secret`", "checking": null, "example": {"type": "command", "data": "usermod -aG jack jill && chmod g+r /home/jack/secret && su - jill -c 'cat /home/jack/secret'"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "apt update && apt install sudo -y && useradd -s /bin/bash -d /home/jack -m jack && echo 'jack ALL=(ALL) ALL' >> /etc/sudoers"}, "description": "Grant user jack permission to edit /etc/passwd file without giving full root access.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u jack bash -c 'echo jack_was_here >> /etc/passwd' && grep -q 'jack_was_here' /etc/passwd"}, "example": {"type": "command", "data": "chmod +w /etc/passwd && chmod 744 /etc/passwd"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/joe -m joe && echo 'hello world' >/home/joe/testfile"}, "description": "Give joe read and write permissions to his testfile but do not allow him to execute the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u joe cat /home/joe/testfile && sudo -u joe echo '3ac2b1c' >/home/joe/testfile && (sudo -u joe /home/joe/testfile >/dev/null 2>&1 && exit 1 || exit 0)) | if [ \"$(cat -)\" = \"hello world$'\\n'\"3ac2b1c$'\\n'\"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 600 /home/joe/testfile"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir docs && cd docs && touch doc1 && touch doc2 && chmod 640 doc* && chown jane doc* && cd /home && useradd -s /bin/bash -d /home/john -m john && echo 'jane ALL=(john) NOPASSWD: /bin/cat' >> /etc/sudoers && su - john"}, "description": "john needs to view jane's files at /home/jane/docs but he can only access them by using sudo and the cat command. Help john view jane's files using sudo and the cat command.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jane cat /home/jane/docs/doc1 && sudo -u jane cat /home/jane/docs/doc2) | if [ \"$(cat -)\" = \"This is the content of doc1.\"$'\\n'\"This is the content of doc2.\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo -u jane cat /home/jane/docs/*"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && cd /home/lisa && mkdir myDir && touch myDir/myfile && chmod gou-rwx myDir/myfile && chmod u=rw myDir/myfile && chown lisa:root myDir/myfile &&su - lisa"}, "description": "As lisa, allow the members of group root and user lisa to read and write to /home/lisa/myDir, while making sure that other users have no permissions to access it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u lisa ls -l /home/lisa/myDir | awk '{if ($1~/^-..rw-r--/) { exit 1; } else { exit 0; }}') && (sudo -u lisa ls -ld /home/lisa/myDir | awk '{if ($1~/^drwxr-.--r/) { exit 1; } else { exit 0; }}')"}, "example": {"type": "command", "data": "chmod 760 /home/lisa/myDir && chown lisa:root /home/lisa/myDir"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/carol -m carol && groupadd team && usermod -aG team alice && usermod -aG team bob && usermod -aG team carol && cd /home/alice && mkdir team-shared && chmod 2770 team-shared"}, "description": "Create a file called `mission.txt` inside `/home/alice/team-shared`. Its owner user should be alice, group should be team, and content should be `Hello team, we have a new mission.` (without quotes). Only alice or members in team group can read or modify it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(stat -c \"%U %G %a\" /home/alice/team-shared/mission.txt | grep \"alice team 6\") && (su - bob -c \"cat /home/alice/team-shared/mission.txt\" | grep \"Hello team, we have a new mission\")"}, "example": {"type": "command", "data": "echo 'Hello team, we have a new mission.' > /home/alice/team-shared/mission.txt && chown alice:team /home/alice/team-shared/mission.txt && chmod 660 /home/alice/team-shared/mission.txt"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": ""}, "description": "What is the difference between chmod 755 and chmod +x?", "evaluation": {"type": "ground-truth", "answer": "There is no difference. Both commands add executable permission for all users (owner, group, and others).", "checking": null, "example": {"type": "command", "data": ""}}, "labels": ["chmod", "permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/anna -m anna && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/catherine -m catherine && touch /home/anna/file1 && touch /home/bob/file2 && touch /home/catherine/file3"}, "description": "Set permissions so only anna and members of the group 'testgroup' can read and write to file1, while only bob and members of group 'testgroup' can read and write to file2, and only catherine and members of the group 'testgroup' can read and write to file3. Users not in the group 'testgroup' should not be able to read or write any of the files.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/anna/file1 | awk '{if ($1~/^-..rw----/ && $4~/^testgroup$/ && $3~/^anna$/) { exit 0; } else { exit 1; } }' && ls -l /home/bob/file2 | awk '{if ($1~/^-..rw----/ && $4~/^testgroup$/ && $3~/^bob$/) { exit 0; } else { exit 1; } }' && ls -l /home/catherine/file3 | awk '{if ($1~/^-..rw----/ && $4~/^testgroup$/ && $3~/^catherine$/) { exit 0; } else { exit 1; } }' && (ls -l /home/anna/file1 | awk '{if (!($1~/^-.{3}------/ && $3~/^anna$/)) { exit 1; } else { exit 0; } }' && ls -l /home/bob/file2 | awk '{if (!($1~/^-.{3}------/ && $3~/^bob$/)) { exit 1; } else { exit 0; } }' && ls -l /home/catherine/file3 | awk '{if (!($1~/^-.{3}------/ && $3~/^catherine$/)) { exit 1; } else { exit 0; } }') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd testgroup && usermod -a -G testgroup anna && usermod -a -G testgroup bob && usermod -a -G testgroup catherine && chmod 770 /home/anna/file1 && chmod 770 /home/bob/file2 && chmod 770 /home/catherine/file3"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir work && cd work && touch file1 && touch file2 && touch file3 && chmod 550 . && chmod 400 file1 && chmod 440 file2 && chmod 420 file3"}, "description": "Jill, a user who is not a part of jane's group or root, wants to modify file1. Guess the minimum permission level that jill needs to modify file1, update the permission level and show the command you used.", "evaluation": {"type": "operation-checking", "answer": "jill needs write permission on file1.", "checking": {"type": "command", "data": "su - jill -c 'touch /home/jane/work/file1 && echo Alyssa was here >> /home/jane/work/file1 && cat /home/jane/work/file1' | grep 'Alyssa was here'"}, "example": {"type": "command", "data": "chmod 440 /home/jane/work/file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/tom -m tom && cd /home/tom && mkdir secret && touch secret/file1 && echo 'secret stuff' > secret/file1 && chmod 400 secret/file1 && find . -exec touch -t 202206101200 {} + && useradd -s /bin/bash -d /home/mike -m mike && echo 'tom ALL=(tom) /bin/cat /home/tom/secret/*' >> /etc/sudoers && cd /home/mike && su - mike"}, "description": "tom have a secret file that only he can view. mike must be able to view the content of that file using sudo without having the password prompt display on screen to preserve secrecy. Grant mike such permission.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -v && echo \"sudo access granted\") || echo \"sudo access denied\" && sudo cat /home/tom/secret/file1 | if [ \"$(cat -)\" = \"secret stuff\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'mike ALL=(tom) /bin/cat /home/tom/secret/*' >> /etc/sudoers"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir data && cd data && touch file1 && touch file2 && chmod u=rw,g=rw,o= file1 && chmod u=rw,g=,o= file2 && su - jane"}, "description": "You are Jane. List the contents of /home/jane/data. Can you read both files? Why or why not?", "evaluation": {"type": "ground-truth", "answer": "Yes, I can only read file1 because it has read permission for the group 'jane', but file2 does not have any group permissions.", "checking": null, "example": {"type": "command", "data": "ls /home/jane/data"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && echo 'Hello, World!' > test && chmod 444 test && chown bob test &&su - bob"}, "description": "View the contents of the file ~/test without modifying its permissions or ownership", "evaluation": {"type": "ground-truth", "answer": "Hello, World!", "checking": null, "example": {"type": "command", "data": "cat ~/test"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user -m user && touch /file1 && chown user:user /file1 && chmod 460 /file1"}, "description": "Add read and write permissions for the owner and group, and only read permission for others.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l / | grep file1 | awk '{if ($1~/^..rw--r--/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 640 /file1"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "cd ~ && echo 'hello' > file && chmod 000 file && su - $(whoami)"}, "description": "You created a file with sensitive information, but you accidentally gave it permission 000. Fix the permission so that the owner can read and write, but no one else can access it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l file | awk '{if ($1 != \"-rw-------\") { exit 1; } else { exit 0; } }'"}, "example": {"type": "command", "data": "chmod 600 file"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && chmod u+x /home/bob && su - bob"}, "description": "Why can't I run the script.sh file? Fix it so that I can execute the script.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "./script.sh"}, "example": {"type": "command", "data": "chmod u+x /path/to/script.sh"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/steve -m steve && echo 'jane ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && echo 'steve ALL=(ALL) NOPASSWD:/usr/bin/apt-get' >> /etc/sudoers && echo 'Defaults:jane !requiretty' >> /etc/sudoers && echo 'Defaults:steve !env_reset' >> /etc/sudoers && touch /file1 && touch /file2 && touch /file3 && chmod 600 /file3"}, "description": "jane wants to use sudo without tty; steve wants to use sudo only for apt-get; john shouldn't be able to use sudo. Make the necessary changes to the sudoers file and give jane access to read /file1 and write to /file2 without sudo, and give jane access to read and write /file3 with sudo only. Finally, give steve sudo access for apt-get only", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jane cat /file1 && sudo -u jane touch /file2 && ls -la /file2 && (sudo -u jane cat /file3 && echo 'test' | sudo -S tee -a /file3) && (sudo -u steve apt-get update || exit 1)) 2>/dev/null | if [ \"$(cat -)\" = \"test\"$'\\n'\"0\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'jane ALL=(ALL) NOPASSWD: /usr/bin/cat /file1, /usr/bin/tee /file3, /usr/bin/apt-get update' >> /etc/sudoers && echo 'steve ALL=(ALL) NOPASSWD:/usr/bin/apt-get' >> /etc/sudoers && chmod 640 /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && echo 'test' > /home/jack/test && chmod 777 /home/jack/test"}, "description": "Allow the user \"bill\" to read and write to the /home/jack/test file without changing the permissions of the file itself, and ensure that all future files and directories created by bill belong to the group \"billgroup\"", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l bill -c 'echo \"bill group\" >> /home/jack/test && touch /home/bill/new_file && ls -ld /home/jack/test /home/bill/new_file && stat -c \"%U %G\" /home/jack/test /home/bill/new_file | awk '{if (($1 == \"jack\") && ($2 == \"jackgroup\")) { exit 1; } else if (($1 == \"bill\") && ($2 == \"billgroup\")) { exit 0; } else { exit 2; }}' | tail -n 1"}, "example": {"type": "command", "data": "groupadd billgroup && usermod -a -G billgroup bill && chgrp jackgroup /home/jack/test && chmod 776 /home/jack/test && setfacl -m u:bill:rw /home/jack/test && setfacl -m d:u:bill:rwx /home/jack/ && sudo -u jack bash -c 'echo '' > /home/jack/test'"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && mkdir /data && touch /data/not_sensitive /data/sensitive1 /data/sensitive2 && chmod 400 /data/sensitive* && chown jane /data/sensitive*"}, "description": "Jane should be able to read the sensitive files in /data, but not modify them or delete them. She should also be able to write non-sensitive files in /data. Make sure no one else can read or write files in this directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /data -type f ! -perm 400 -ls && find /data -type f ! -user jane -ls && find /data ! -type d -perm /111 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 700 /data && chown -R jane /data && chmod 600 /data/sensitive* && find /data -type f ! -name sensitive* -exec chmod 644 {} + && find /data -type d -exec chmod 755 {} +"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/susan -m susan && useradd -s /bin/bash -d /home/david -m david && echo 'susan ALL=(ALL:ALL) ALL' >> /etc/sudoers && echo 'david ALL=(ALL:ALL) /usr/bin/apt, /usr/sbin/useradd' >> /etc/sudoers && echo \"alias sudo='sudo '\" >> /home/susan/.bashrc && su - susan"}, "description": "Susan and David are both users with sudo privileges, but Susan can execute any command with sudo while David can only run apt and useradd. Additionally, Susan wants to disable the need to type space after sudo and ensure this change is permanent every time she logs in. Help Susan modify the relevant files to achieve both goals.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo whoami && sudo apt update) | if [ \"$(cat -)\" = \"root\"$'\\n''Hit:1 http://security.ubuntu.com/ubuntu bionic-security InRelease'$'\\n''Get:2 http://archive.ubuntu.com/ubuntu bionic InRelease [242 kB]'$'\\n''Get:3 http://archive.ubuntu.com/ubuntu bionic-updates InRelease [88.7 kB]'$'\\n''Get:4 http://archive.ubuntu.com/ubuntu bionic-backports InRelease [74.6 kB]'$'\\n''Fetched 405 kB in 1s (310 kB/s)'$'\\n''Reading package lists... Done'$'\\n''Building dependency tree'$'\\n''Reading state information... Done'$'\\n''2 packages can be upgraded. Run 'apt list --upgradable' to see them.' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'Defaults    !requiretty' >> /etc/sudoers && echo 'susan ALL=(ALL:ALL) ALL' >> /etc/sudoers && echo 'david ALL=(ALL:ALL) /usr/bin/apt, /usr/sbin/useradd' >> /etc/sudoers && echo \"alias sudo='sudo '\" >> /home/susan/.bashrc && source /home/susan/.bashrc"}}, "labels": ["permission", "user", "command"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/julia -m julia && cd /home/julia && mkdir work && touch work/file.txt && chmod o-rwx work/file.txt  && chown -R julia:julia work/ && su - julia"}, "description": "As the user julia, attempt to read, write, and execute the file /home/julia/work/file.txt. Observe and report the results.", "evaluation": {"type": "multiple-choice", "answer": "The commands `cat /home/julia/work/file.txt` and `less /home/julia/work/file.txt` will both fail because julia does not have permission to read the file. Attempting to use `echo 'hello' > /home/julia/work/file.txt` will fail because julia does not have permission to write to the file. Attempting to use `chmod u+x /home/julia/work/file.txt` will also fail because julia does not have permission to modify the permissions of the file.", "options": ["The command `cat /home/julia/work/file.txt` will succeed.", "The command `less /home/julia/work/file.txt` will succeed.", "The command `echo 'hello' > /home/julia/work/file.txt` will succeed.", "The command `chmod u+x /home/julia/work/file.txt` will succeed."]}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /var/www/html && touch /var/www/html/index.php && echo '<?php echo \"Hello World!\" ?>' > /var/www/html/index.php && chmod 644 /var/www/html/index.php && useradd -s /bin/bash -d /var/www/html -m webuser && chown webuser:webuser /var/www/html && apt install apache2 -y && systemctl enable apache2 && mkdir /var/www/html/test && touch /var/www/html/test/info.php && echo '<?php phpinfo(); ?>' > /var/www/html/test/info.php && chown webuser:webuser /var/www/html/test/info.php && chmod 644 /var/www/html/test/info.php && systemctl restart apache2 && su - webuser"}, "description": "Create a new user and limit its home directory to /var/www/html, configure Apache server to serve pages from /var/www/html and /var/www/html/test directories and test if PHP is working by accessing the page /test/info.php.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "url", "data": "http://localhost/test/info.php", "output": "Hello World!"}, "example": {"type": "text", "data": "All you need to do is execute the init command and access the test/info.php page in your web browser."}}, "labels": ["linux", "apache", "webserver"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir documents && touch documents/file1 && sudo chown jane:documents documents/file1 && chmod 664 documents/file1"}, "description": "Give user john access to file1 in jane's documents directory without modifying the ownership of file1 or its directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u john cat /home/jane/documents/file1 | if [ \"$(cat -)\" = \"This is a confidential file.\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo usermod -a -G jane john && chmod 664 /home/jane/documents/file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/susan -m susan && echo 'test_file' > /home/john/test_file && chmod 444 /home/john/test_file && chown susan /home/john/test_file && chmod g+rw /home/john/test_file"}, "description": "John created a test file and set the permission to read-only. Susan needs to edit and save the test file without changing ownership, group or permission. Help Susan to complete this task.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/john/test_file | grep 'This is a test file.' | wc -l | awk '{if($0==1){in_buf=1;}}END{if(in_buf==1){print 0;}else{print 1;}}'"}, "example": {"type": "command", "data": "sudo -u susan vim /home/john/test_file"}}, "labels": ["permission", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && touch /home/user1/file && touch /home/user2/file && chmod 664 /home/user1/file && chmod 664 /home/user2/file"}, "description": "Allow user1 to read and write to user2's file but not delete it, and allow user2 to do the same for user1's file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - user1 -c \"echo 'hello' >> /home/user2/file\" && su - user2 -c \"echo 'world' >> /home/user1/file\" && (su - user1 -c \"rm /home/user2/file\" || su - user2 -c \"rm /home/user1/file\") && [ -f /home/user1/file ] && [ -f /home/user2/file ] && grep -q 'hello' /home/user2/file && grep -q 'world' /home/user1/file"}, "example": {"type": "command", "data": "chmod +t /home/user1 && chmod +t /home/user2 && chown user1:user2 /home/user1/file && chown user2:user1 /home/user2/file && chmod 664 /home/user1/file /home/user2/file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'Hello, world!' > hello.txt && chown john hello.txt "}, "description": "Change the permission of hello.txt to only allow the owner to read and write, and prevent others from reading, writing or executing.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/hello.txt | awk '{if ($1~/^-rw-------/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 600 /home/john/hello.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/user && chown user:user /home/user"}, "description": "Create a user called user and give them ownership of /home/user. Set permissions on /home/user so that only user can read, write and execute in this directory, and others can only read and execute.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - user -c 'touch /home/user/test && chmod 700 /home/user && ls -l /home/user | awk \"{if (/rwx------/) { exit 0; } else { exit 1; }}\" && ls -l /home/ | awk '{if ($3==\"user\" && $4==\"user\") { exit 0; } else { exit 1; }}' && find /home/user -type f -exec ls -l {} + | awk \"{if (/rw-------/) { exit 0; } else { exit 1; }}\" && find /home/user -type d -exec ls -ld {} + | awk \"{if (/^drwx------/) { exit 0; } else { exit 1; }}\"'"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/user -m user && chown user:user /home/user && chmod 750 /home/user && chmod 700 /home/user/*"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/john -m john && echo 'bob ALL=(john) /bin/echo' >> /etc/sudoers && su - bob"}, "description": "As user \"bob\", execute the command \"echo hello world\" as user \"john\" without using the \"su\" or the \"sudo\" command.", "evaluation": {"type": "ground-truth", "answer": "hello world", "checking": null, "example": {"type": "command", "data": "runuser -l john -c '/bin/echo hello world'"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir desktop && touch desktop/file.txt && chmod 777 desktop/file.txt && chattr +i desktop/file.txt && su - john"}, "description": "You created a user named 'john', who has a file named 'file.txt' in his 'desktop' directory. Ensure that the file is write-protected even if the user has root access.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo su && cd /home/john/desktop && echo 'hello' > file.txt && chattr -i file.txt && rm -rf file.txt && exit && su - john && cat desktop/file.txt | if [ \"$(cat -)\" = '' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chattr +i /home/john/desktop/file.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -G sudo -m jdoe && echo 'jdoe:' | chpasswd && echo 'jdoe ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers"}, "description": "Create a new user 'jdoe' with the password 'jdoe' and grant them sudo access without prompt.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u jdoe whoami | if [ \"$(cat -)\" = \"root\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "useradd -G sudo -m jdoe && echo 'jdoe:jdoe' | chpasswd && echo 'jdoe ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jenn -m jenn && cd /home && sudo mkdir reports && sudo chgrp jenn reports && sudo chmod 775 reports && su - jenn"}, "description": "Create a file called report.txt in the /reports directory. Give the file read and write permissions to the owner and read-only permissions to the group and to others.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo ls /reports/report.txt && sudo ls -l /reports/report.txt | awk '{if ($1~/^-rw-r--r--/) {exit 0;} else {exit 1;}}'"}, "example": {"type": "command", "data": "chmod 644 /reports/report.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && echo 'Hello, World!' > hello.txt && chmod 744 hello.txt && su - bob"}, "description": "Print the contents of the file hello.txt to the terminal", "evaluation": {"type": "ground-truth", "answer": "Hello, World!\n", "checking": null, "example": {"type": "command", "data": "cat hello.txt"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'Hello World!' > /home/john/hello.txt && chown john /home/john/hello.txt && chmod 400 /home/john/hello.txt && su - john"}, "description": "Ensure only the owner can read hello.txt and not even the group can read it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/john/hello.txt | awk '{if ($1~/^-r--------/) { exit 0; } else { exit 1; }}') && (sudo -u john cat /home/john/hello.txt | if [ \"$(cat -)\" = \"Hello World!\" ]; then exit 0; else exit 1; fi)"}, "example": {"type": "command", "data": "chmod go-r /home/john/hello.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && touch /file1 && touch /file2 && touch /file3 && chown root:john /file1 && chown john:root /file2 && chown john:john /file3"}, "description": "Give john the permission to read and write to file1, read file2 and not have any access to file3", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l john -c 'cat /file1; echo john can write to file1 > /file1; cat /file1') && (runuser -l john -c 'cat /file2 || exit 1') && (runuser -l john -c 'cat /file3 && exit 1' || exit 0)"}, "example": {"type": "command", "data": "chmod 640 /file1 && chmod 440 /file2 && chmod 000 /file3"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && echo 'red' > /home/jack/file.txt && chmod 444 /home/jack/file.txt && su - jack"}, "description": "View the contents of /home/jack/file.txt without modifying any file permissions", "evaluation": {"type": "ground-truth", "answer": "red", "checking": null, "example": {"type": "command", "data": "cat /home/jack/file.txt"}}, "labels": ["permission", "read-only"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && echo 'This is a secret message!' > secret && chmod 400 secret && chown jane secret && su - jane"}, "description": "You are logged in as the user 'jane'. How can you view the contents of the file 'secret'? Hint: you don't have permission to read the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "'cat ~/secret' | sudo -S ls &> /dev/null && echo 'Success'"}, "example": {"type": "command", "data": "sudo chmod o+r secret && cat secret"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && cd /home/emma && mkdir documents && cd documents && mkdir invoices && touch confidential.txt && echo 'This is a confidential file.' > confidential.txt && chmod 600 confidential.txt && chown emma confidential.txt && su - emma"}, "description": "User Emma wants to give read access of \"confidential.txt\" to her colleague Mark, who is not in the same group. Help Emma to give Mark read access to the file without compromising the confidentiality.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u mark cat /home/emma/documents/invoices/confidential.txt | grep 'This is a confidential file.' -q && echo 'Mark can read the file' || echo 'Mark cannot read the file'"}, "example": {"type": "command", "data": "usermod -a -G emma mark && chmod 640 /home/emma/documents/invoices/confidential.txt && chown emma:emma /home/emma/documents/invoices/confidential.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && echo 'sensitive information' > /home/alice/secret.txt && chmod 400 /home/alice/secret.txt && chown alice:alice /home/alice/secret.txt"}, "description": "Alice has a file called secret.txt in her home directory, which contains sensitive information. Give Bob read access to the file, but ensure that Alice's ownership and read and write permissions are not affected.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - bob -c 'cat /home/alice/secret.txt; exit $?' | if [ $(cat -) -eq 0 ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G alice bob && chmod g+r /home/alice/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && cd /home/jack && touch file && chmod 700 file"}, "description": "Change permission of file so that user bill and user tom can only read the file. User george should not have any access to the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u bill cat /home/jack/file ; sudo -u tom cat /home/jack/file ; sudo -u george cat /home/jack/file) 2>&1 | if [ \"$(cat -)\" = \"file content$'\\n'file content$'\\n'cat: /home/jack/file: Permission denied$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 440 file && chown jack:jack file && setfacl -m u:bill:r,u:tom:r file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/alice -m alice && cd /home && mkdir shared && chgrp -R alice shared && chmod -R 2770 shared"}, "description": "Create a new directory inside /home/shared called \"mydata\" that only bob can access. Alice can't access it at all.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "if [ -d /home/shared/mydata ] && [ \"$(ls -ld /home/shared/mydata | awk '{print $3}')\" = \"bob\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "mkdir /home/shared/mydata && chown bob /home/shared/mydata && chmod 700 /home/shared/mydata"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && useradd -s /bin/bash -d /home/tom -m tom && mkdir /secret && chown tom /secret && chmod 700 /secret"}, "description": "Create a file called 'top_secret' in '/secret' and make it readable and writable by 'tom' only", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /secret/top_secret | awk '{if ($1~/^-rw-------/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "touch /secret/top_secret && chmod 600 /secret/top_secret && chown tom /secret/top_secret"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && groupadd secret && usermod -a -G secret john && usermod -a -G secret jane && mkdir /secret_files && touch /secret_files/file1.txt && touch /secret_files/file2.txt && echo \"This is confidential\" > /secret_files/file1.txt"}, "description": "Allow only users belonging to the group `secret` to view the contents of /secret_files and its contents. No other user should have access. Also, make sure that users who belong to the `secret` group cannot modify the contents of /secret_files or its directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john cat /secret_files/file1.txt && sudo -u jane cat /secret_files/file1.txt) | if [ \"$(cat -)\" = \"This is confidential\nThis is confidential\n\" ]; then exit 0; else exit 1; fi && [ -z \"$(sudo -u john sh -c 'echo test > /secret_files/file1.txt' 2>&1)\" ] && [ -n \"$(sudo -u john sh -c 'echo test > /secret_files/test.txt' 2>&1)\" ]"}, "example": {"type": "command", "data": "chown root:secret /secret_files && chmod 750 /secret_files && chown root:secret /secret_files/* && chmod 640 /secret_files/*"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir projects && cd projects && mkdir dev && mkdir test && ln -s ../test testlink && touch file1 && touch file2 && touch dev/file3 && touch test/file4 && chmod 660 file1 && chmod 664 file2 && chmod 640 dev/file3 && chmod 660 test/file4"}, "description": "Set up the correct permissions for Jane's project directory so that members of the group 'devs' can read and write all files in the 'dev' directory and members of the group 'testers' can read and write all files in the 'test' directory. Also, members of the group 'devs' should be able to read all files in the 'test' directory through the symbolic link 'testlink', but not write to them.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "([ $(stat -c '%a' /home/jane/projects/dev/file3) -eq 664 ] && [ $(stat -c '%a' /home/jane/projects/test/file4) -eq 664 ] && [ $(stat -c '%a' /home/jane/projects/testlink) -eq 664 ] && ls -l /home/jane/projects/test/file4 | awk '{if ($1~/rw.rw.r--/) { exit 0; } else { exit 1; }}' && ls -l /home/jane/projects/testlink | awk '{if ($1~/rw.r--r--/) { exit 0; } else { exit 1; }}' && getfacl /home/jane/projects/dev/file3 | grep -q 'group:devs:rw-' && getfacl /home/jane/projects/test/file4 | grep -q 'group:testers:rw-' && getfacl /home/jane/projects/testlink | grep -q 'group:devs:r--') || exit 1;"}, "example": {"type": "command", "data": "chgrp devs /home/jane/projects/dev && chgrp testers /home/jane/projects/test && chmod 777 /home/jane/projects/dev && chmod 777 /home/jane/projects/test && chmod -R g+rw /home/jane/projects/dev && chmod -R g+rw /home/jane/projects/test && chmod g-w /home/jane/projects/test && chmod o-w /home/jane/projects/dev && chmod o-w /home/jane/projects/test && setfacl -m g:devs:r-x /home/jane/projects/test"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && su - john"}, "description": "Create a file called \"secret.txt\" in user john's home directory with the content \"this is a secret\", and only give john read permission on it. Verify that no other user can read the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(echo 'this is a secret' > /home/john/secret.txt && chmod 400 /home/john/secret.txt && runuser -l bob -c 'cat /home/john/secret.txt') | if [ \"$(cat -)\" = \"Permission denied\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'this is a secret' > /home/john/secret.txt && chmod 400 /home/john/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/john -m john && cd /home && mkdir secret && cd secret && touch file1 && touch file2 && chmod -R 640 /home/secret/*"}, "description": "Set permissions in such a way that only bob and alice can read files in the /home/secret directory and john can't access any file in that directory, including trying to find out the list of files in it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l bob -c 'cat /home/secret/file1' && runuser -l alice -c 'cat /home/secret/file2' && runuser -l john -c 'ls /home/secret/') | if [ \"$(cat -)\" = \"secret content\nsecret 42\nls: cannot open directory \\x27/home/secret/\\x27: Permission denied\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod -R 640 /home/secret/* && chown bob:alice /home/secret/* && chmod g+x /home/bob && chmod g+x /home/alice"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && mkdir /home/john/secret && touch /home/john/secret/file.txt"}, "description": "Give user Mary read-only permission to the secret folder in John's home directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l mary -c 'cat /home/john/secret/file.txt'"}, "example": {"type": "command", "data": "usermod -a -G john /etc/group && chmod -R 755 /home/john/secret && chown -R john:john /home/john/secret"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/charlie -m charlie && useradd -s /bin/bash -d /home/dave -m dave && groupadd team && usermod -a -G team bob && usermod -a -G team charlie && usermod -a -G team dave && cd /home && mkdir project && cd project && touch file1 && touch file2 && touch file3"}, "description": "Create a new group called \"team\" and assign all three users to it. Set group permission on the ~/project directory and its contents so that all members of the 'team' group have read, write, and execute access, whereas others have no access whatsoever", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "stat -c %a /home/project && stat -c %G /home/project && ls -l /home/project | awk '{if ($1~/^-..rwx---.*/) { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "chmod 770 /home/project && chown :team /home/project && chmod -R g+rwx /home/project"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m -s /bin/bash anne && cd /home && mkdir anne_work && chmod 700 anne_work && cd anne_work && touch file_1 && chmod 600 file_1"}, "description": "Give user anne read and write permissions to the directory /home/anne_work and also give the group members execute permission", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -ld /home/anne_work && ls -l /home/anne_work) | awk '{if ($1~/^drwx--x---/ && $3==\"anne\" && $4==\"anne\") { exit 0; } else if ($1~/^-rw-------/ && $3==\"anne\" && $4==\"anne\") { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 770 /home/anne_work && chmod g+x /home/anne_work && chown anne:anne /home/anne_work/*"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jenkins -m jenkins && useradd -s /bin/bash -d /home/ubuntu -m ubuntu"}, "description": "Change the group owner of a directory named 'shared' to 'ubuntu' and add jenkins user to the group. Any file added inside shared directory should be readable by jenkins but not writable. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - jenkins -c 'echo abc > /home/ubuntu/shared/test.txt' && ls -l '/home/ubuntu/shared/' | grep test.txt | awk '{if ($4~/^ubuntu$/) { exit 1; } else if($4~/^jenkins$/ && $1!~/^-r.....r..$/) { exit 1; } else { exit 0; } }'"}, "example": {"type": "command", "data": "groupadd shared && usermod -a -G shared jenkins && chgrp -R ubuntu /home/ubuntu/shared && chmod -R 644 /home/ubuntu/shared/"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /data && chown root:dataaccess /data && chmod 770 /data"}, "description": "Suppose you have a directory called /data that contains sensitive files that should only be accessible to members of the group \"dataaccess\", as well as any new files or directories created in the future. Ensure that users can only delete files and directories that they own", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l / | grep data | awk '{if ($1~/^d.....rwx/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod g+s /data && chmod +t /data && chmod o-rwx /data"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/emma -m emma && useradd -s /bin/bash -d /home/kim -m kim && echo 'jane ALL=(emma) NOPASSWD: /bin/cat' >> /etc/sudoers && echo 'emma ALL=(kim) NOPASSWD: /usr/bin/find' >> /etc/sudoers && echo 'kim ALL=(jane) NOPASSWD: /bin/mkdir' >> /etc/sudoers"}, "description": "Create a directory called /project and allow the respective users to use their respective sudo privileges to perform the following tasks:\n\n1. Jane can use sudo to execute `cat` on any file as Emma.\n2. Emma can use sudo to execute `find` on any directory as Kim.\n3. Kim can use sudo to execute `mkdir` on any directory as Jane.\n\nCreate a file called test.txt in /project using the `touch` command. Then, grant permissions so that both Jane and Emma can read, write, and execute the file, while Kim can only read and execute the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jane bash -c 'cat /project/test.txt') | if [ \"$(cat -)\" = \"test file content\" ]; then exit 0; else exit 1; fi && (sudo -u emma bash -c 'find /project -iname \"test.txt\"') | if [ \"$(cat -)\" = \"/project/test.txt\" ]; then exit 0; else exit 1; fi && sudo -u kim bash -c 'mkdir /project/temp' && ls -ld /project/temp | if [[ $(echo $(cat -)) == *kim* ]]; then exit 0; else exit 1; fi && sudo -u jane bash -c 'echo \"test\" > /project/test.txt' && sudo -u emma bash -c 'echo \"test\" >> /project/test.txt' && sudo chmod 754 /project/test.txt && (sudo -u jane bash -c 'cat /project/test.txt' && sudo -u emma bash -c 'cat /project/test.txt' && sudo -u kim bash -c 'cat /project/test.txt') | if [ \"$(cat -)\" = \"test\"$'\\n'\"test\"$'\\n'\"test\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "mkdir /project && touch /project/test.txt && sudo chmod 774 /project/test.txt && sudo chown jane:emma /project/test.txt"}}, "labels": ["permission", "sudo"], "difficulty": 3},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && echo 'password1' | passwd user1 --stdin && useradd -s /bin/bash -d /home/user2 -m user2 && echo 'password2' | passwd user2 --stdin && useradd -s /bin/bash -d /home/user3 -m user3 && echo 'password3' | passwd user3 --stdin && mkdir /shared_folder && chgrp shared_group /shared_folder && chmod 770 /shared_folder"}, "description": "Create a directory under root called shared_folder which is accessible to all users in the group, `shared_group`", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - user1 -c 'touch /shared_folder/file1.txt' && su - user2 -c 'touch /shared_folder/file2.txt' && su - user3 -c 'touch /shared_folder/file3.txt' && chmod 777 /shared_folder && chmod -t /shared_folder && chgrp shared_group /shared_folder/* && ls -l / | grep shared_folder | awk '{if ($1!~/^d.rwxrwx--./) { exit 1; } else { exit 0; } }') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "mkdir /shared_folder && chgrp shared_group /shared_folder && chmod 770 /shared_folder"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && touch file1 && touch file2 && touch file3 && chmod 666 file* && su - bob"}, "description": "Give the group 'admin' full access to all files in the current directory. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l | grep -v total && ls -ld .) | awk '{if ($1 != \"-rw-rw-rw-\") { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "chmod -R g+rwx . && chown :admin *"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && useradd -s /bin/bash -d /home/bob -m bob && cd /home && mkdir shared && touch shared/file && chmod 664 shared/file && chown alex:alex shared/file && chgrp bob shared/file"}, "description": "Both alex and bob should have read and write permission to the file, but only alex should have execute permission. Fix the file permissions to make this happen.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/shared/file | awk '{print $1}') | if [ \"$(cat -)\" = \"-rw-rw-r--\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 764 /home/shared/file && chmod +x /home/shared/file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && mkdir /home/shared && cd /home/shared && touch file1 && touch file2 && chown john:john file1 && chown jane:jane file2 && chmod 660 file1 && chmod 440 file2"}, "description": "Allow john and jane to read and write to all files within /home/shared, but prevent them from deleting any files within /home/shared", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john cat /home/shared/file1 && sudo -u john echo 'content' >> /home/shared/file1 && sudo -u jane cat /home/shared/file2 && sudo -u jane echo 'content' >> /home/shared/file2) | if [ \"$(cat -)\" = \"content\"$'\\n'\"content\" ]; then exit 0; else exit 1; fi && (sudo -u john rm -f /home/shared/file1 && sudo -u jane rm -f /home/shared/file2 && [ -f /home/shared/file1 ] && [ -f /home/shared/file2 ] && rm /home/shared/file1 && rm /home/shared/file2 && [ -f /home/shared/file1 ] && [ -f /home/shared/file2 ]) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 2660 /home/shared/file1 && chmod 240 /home/shared/file2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "sudo echo 'test' > /datafile && sudo chgrp root /datafile && sudo chmod g+s /datafile && sudo chmod 777 /datafile"}, "description": "Make it so that the group \"dataaccess\" can read and write to /datafile but not execute it. Neither other users nor the group root can modify its contents.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /datafile | awk '{if ($1~/^-.rw..r..t/) { exit 0; } else { exit 1; } }') && ([ \"$(sudo stat -c '%G' /datafile)\" = \"dataaccess\" ] && ! sudo test -w /datafile && sudo test -r /datafile)"}, "example": {"type": "command", "data": "sudo chown root:dataaccess /datafile && sudo chmod 660 /datafile"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/kate -m kate && cd /home/kate && mkdir documents && cd documents && touch doc1 && touch doc2 && chmod ugo-r doc2 && chown kate:root doc2"}, "description": "The user 'kate' has two files in her documents directory - 'doc1' and 'doc2'. 'doc2' should be read only for all users except 'kate', while 'doc1' should be readable by all users except 'kate'. Ensure that the files have the appropriate permissions and ownerships", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/kate/documents | awk '{print $1, $3, $4}' | if [ \"$(cat -)\" = \"-rw-r--r-- kate root\\nd--x------ kate kate\\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 644 doc1 && chmod 444 doc2"}}, "labels": ["permission", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && echo 'secret' > /home/jane/file.txt && chown jane:jane /home/jane/file.txt"}, "description": "Give john access to read the contents of /home/jane/file.txt without modifying file permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john cat /home/jane/file.txt && sudo -u jane cat /home/jane/file.txt) | if [ \"$(cat -)\" = \"secret\"$'\\n'\"secret\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G jane john"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "chmod 755 /usr/bin/vi"}, "description": "Change permission of /usr/bin/vi to make it executable only by root", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "[ $(stat -c \"%a\" /usr/bin/vi) -eq 700 ] && echo OK"}, "example": {"type": "command", "data": "chmod 700 /usr/bin/vi"}}, "labels": ["permission", "root"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jamie -m jamie && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/kate -m kate && useradd -s /bin/bash -d /home/jessica -m jessica && useradd -s /bin/bash -d /home/sam -m sam && cd ~ && mkdir Company && cd Company && touch secret && chown sam:secret team && chmod 660 secret team"}, "description": "You have a directory named Company where there is a file named secret and a directory named team. Give Bob access to the directory named team without granting him access to the secret file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l bob -c 'ls -l /home/sam/Company' | awk '{if ($1~/^d........w./) { exit 0; } else { exit 1; }}') && (runuser -l bob -c 'ls -al /home/sam/Company' | grep -v secret | awk '{if ($1~/^.(...rw.|....rw.rw.)/) { exit 0; } else { exit 1; }}') && (runuser -l bob -c 'cat /home/sam/Company/team' | grep -c secret | if [ \"$(cat -)\" = \"0\" ]; then exit 0; else exit 1; fi)"}, "example": {"type": "command", "data": "chmod o-r secret && chmod o-rwx team && chgrp secret team && chmod g+w team && setfacl -m u:bob:r-x team"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /data && cd /data && touch sensitive_file.txt && chmod 640 sensitive_file.txt"}, "description": "Create a group called \"dataaccess\" and add user \"james\" to that group. Ensure that the group ownership of the /data directory and sensitive_file.txt file are set to \"dataaccess\"", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /data | awk '{print $3 \" \" $4}') | grep 'dataaccess dataaccess' || (ls -l /data | awk '{print $3 \" \" $4}') | grep 'james dataaccess'"}, "example": {"type": "command", "data": "groupadd dataaccess && usermod -a -G dataaccess james && chgrp -R dataaccess /data && chmod -R g+s /data"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/paul -m paul && useradd -s /bin/bash -d /home/ringo -m ringo && groupadd beatles && usermod -a -G beatles john && usermod -a -G beatles paul && usermod -a -G beatles ringo && cd /home && mkdir records && cd records && mkdir old && mkdir new && touch record1.txt && touch record2.txt && touch new/a.txt && touch new/b.txt && touch old/c.txt && find /home/records -type f -exec chmod 664 {} + && chmod -R g+s /home/records && find /home/records -type d -exec chmod 2775 {} +"}, "description": "There is a user group called \"beatles\". You want to give this group read/write permissions to all files in the directory /home/records. You want to make sure that all new files created in the future inside this directory inherit the group ownership beatles, but that no matter who creates a file, everyone can read it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/records -type f ! -perm -664 -ls && find /home/records -type d ! -perm -2775 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+rw -R /home/records && find /home/records -type d -exec chmod g+s {} + && chown -R :beatles /home/records && chmod -R o+r /home/records"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user -m user && mkdir /home/user/public && echo 'This is a public file.' > /home/user/public/file.txt && mkdir /home/user/private && echo 'This is a private file.' > /home/user/private/file.txt && chown user:user /home/user/private/file.txt"}, "description": "Set permissions to allow 'user' to read all files in /home/user/public and /home/user/private/file.txt, but not write or execute them. Other users should have no access to these files or directories.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -H -u user cat /home/user/public/file.txt && sudo -H -u user cat /home/user/private/file.txt) | if [ \"$(cat -)\" = \"This is a public file.$'\\n'This is a private file.\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 750 /home/user && chmod 755 /home/user/public && chmod 640 /home/user/private/file.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "sudo touch /var/log/app_log && chown app_user:app_group /var/log/app_log && chmod 640 /var/log/app_log"}, "description": "Create a file called /var/log/app_log with the permission that only app_user and members of the app_group can read and write to it, but no one else has any access.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /var/log/ | grep app_log | awk '{if ($1~/^.....rw..$/ && $3~/^app_user$/ && $4~/^app_group$/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "sudo touch /var/log/app_log && chown app_user:app_group /var/log/app_log && chmod 640 /var/log/app_log"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && echo 'jane ALL=(john) NOPASSWD:/usr/bin/vim' >> /etc/sudoers"}, "description": "Allow user jane to execute vim command as john without a password and verify the setting", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john vim -c ':q!' && sudo -u jane vim -c ':q!') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'jane ALL=(john) NOPASSWD:/usr/bin/vim' >> /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/qwerty && useradd -s /bin/bash -d /home/qwerty -m qwerty && echo 'qwerty ALL=(ALL) NOPASSWD: /usr/bin/cat' >> /etc/sudoers && chmod 010 /home/qwerty"}, "description": "How to prevent user qwerty from accessing any file outside of his home directory, while still allowing him to use the 'cat' command as sudoer?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo su qwerty -c 'find / -type f -readable | grep -v \"/home/qwerty/\"' | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 750 /home/qwerty"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && mkdir /home/john/programs && mkdir /home/john/documents && mkdir /home/john/bin"}, "description": "John wants to run a program he has installed in /home/john/programs, but the program requires elevated privileges. Help him by creating a symlink in /home/john/bin that points to the program and allows him to run it with sudo.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u john sh -c 'sudo -n /home/john/bin/program' | grep 'You are running this program as a super-user'"}, "example": {"type": "command", "data": "ln -s /home/john/programs/program /home/john/bin/program && chmod +x /home/john/bin/program"}}, "labels": ["symlink", "permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/gina -m gina && cd /home/gina && mkdir project && cd project && touch file1 && touch file2 && chmod 764 file1 && chmod 754 file2 && chown gina:users file*"}, "description": "User gina needs read, write, execute permission on file1, but the permission should be reduced for others. Provide the shell command to set these permissions", "evaluation": {"type": "ground-truth", "answer": "chmod 764 file1", "checking": null, "example": {"type": "command", "data": "ls -l file1"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user -m user && cd /home/user && echo 'top secret info' > secret.txt && chmod 600 secret.txt"}, "description": "Create a new user and allow them to read the 'secret.txt' file. However, do not allow them to copy, move, or delete it. Also, ensure they cannot access any other files or directories in the home directory of the original user", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cd /home && su - temporary_user -c '[ ! -f /home/user/secret.txt ] && [ ! -d /home/user ] && echo access_allowed'"}, "example": {"type": "command", "data": "groupadd temporary_access && usermod -a -G temporary_access user && chown user:temporary_access /home/user/secret.txt && chmod 640 /home/user/secret.txt && chmod 750 /home/user && chmod g-rwx /home/user/*"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && mkdir /home/john/files && cd /home/john/files && touch f1 f2 f3 && chmod 550 f1 f2 f3 && setfacl -m u:sarah:rwx f1 && setfacl -m g:john:--x f2 && setfacl -m g:john:rw- f3 && useradd -s /bin/bash -d /home/sarah -m sarah"}, "description": "John has created three files: f1, f2 and f3 in /home/john/files directory. He has granted Sarah permission to read, write and execute f1. John's group members have permissions to execute and read f2, but modify f3. You are Sarah and you want to test if you can access f1/f2/f3 files. Can you write f1? Can you append data to f3?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - sarah -c 'echo \"hi!\" >> /home/john/files/f3' && su - sarah -c 'test -w /home/john/files/f1 && ! test -w /home/john/files/f2 && test -w /home/john/files/f3'"}, "example": {"type": "command", "data": ""}}, "labels": ["permission", "access control"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'Hello World' > /test_file && chown john /test_file"}, "description": "Give read and write permission to john for /test_file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u john cat /test_file | if [ \"$(cat -)\" = \"Hello World\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod u+rw /test_file && chown john /test_file"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/robin -m robin && useradd -s /bin/bash -d /home/raven -m raven && echo 'robin ALL=(raven) NOPASSWD:/home/raven/somefile' >> /etc/sudoers && su - robin"}, "description": "robin needs to run /home/raven/somefile with sudo permission but without password. Help him to do so.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u raven /home/raven/somefile 2>&1 | grep -q 'sudo: a password is not required for raven to run sudo'"}, "example": {"type": "command", "data": "chmod +x /home/raven/somefile && echo 'robin ALL=(raven) NOPASSWD:/home/raven/somefile' >> /etc/sudoers"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/peter -m peter && useradd -s /bin/bash -d /home/jack -m jack && echo -e 'password\npassword' | passwd peter && echo -e 'password\npassword' | passwd jack && touch /home/peter/file1 && touch /home/peter/file2 && touch /home/jack/file3 && touch /home/jack/file4 && chmod 440 /home/peter/file1 && chmod 660 /home/peter/file2 && chmod 400 /home/jack/file3 && chmod 640 /home/jack/file4"}, "description": "List all the files in /home/peter and /home/jack directories along with their permissions separately. Only the owner of a file can see its permissions", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo su - peter -c 'ls -l /home/peter' | awk '{if ($1~/^-..-------/) { exit 0; } else { exit 1; }}') && (sudo su - jack -c 'ls -l /home/jack' | awk '{if ($1~/^-........-/) { exit 0; } else { exit 1; }}')"}, "example": {"type": "command", "data": "sudo su - peter -c 'ls -l /home/peter' && sudo su - jack -c 'ls -l /home/jack'"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && echo 'password' | passwd --stdin jane"}, "description": "Set the permission for a file '/home/jane/file' so that user 'jane' can read and write, but other users cannot access it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - jane -c 'touch /home/jane/file && echo \"test\" > /home/jane/file' && (ls -l /home/jane/file | awk '{if ($1~/^-rw-------/) { exit 0; } else { exit 1; } }')"}, "example": {"type": "command", "data": "chmod 600 /home/jane/file"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && mkdir /docs && touch /docs/doc1 && chmod 644 /docs/doc1 && chown john /docs/doc1 && su - john"}, "description": "As user john, add 'Hello world' (without the quotes) to the end of the file /docs/doc1", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "[ $(cat /docs/doc1) = 'Hello world' ]"}, "example": {"type": "command", "data": "echo 'Hello world' | tee -a /docs/doc1"}}, "labels": ["permission", "file-editing"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && mkdir secret-files && touch secret-files/bob1 && touch secret-files/bob2 && useradd -s /bin/bash -d /home/alice -m alice && cd /home/alice && mkdir secret-files && touch secret-files/alice1 && touch secret-files/alice2"}, "description": "Give read access to Alice and write access to Bob on all files in their respective secret-files directories.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo ls -l /home/bob/secret-files/* /home/alice/secret-files/* | awk '{print $1, $3, $4, $9}') | if [ \"$(cat -)\" = \"-rw-r----- bob bob /home/bob/secret-files/bob1\n-rw-r--r-- bob bob /home/bob/secret-files/bob2\n-rw-r----- alice alice /home/alice/secret-files/alice1\n-rw-r--r-- alice alice /home/alice/secret-files/alice2\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "(cd /home/bob && chmod 640 secret-files/*) && (cd /home/alice && chmod 644 secret-files/*)"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'secret file contents' > secret && chmod 400 secret && chown john secret && su - john"}, "description": "Access the contents of ~/secret file and print it without changing any permissions", "evaluation": {"type": "ground-truth", "answer": "secret file contents", "checking": null, "example": {"type": "command", "data": "cat ~/secret"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/charlie -m charlie && echo 'alice:x:1001:charlie\nbob:x:1002:charlie' >> /etc/group"}, "description": "Set up a new group called 'training'. Add alice, bob and charlie to this group.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "getent group training | awk -F: '{print $3}' | grep 1001 && getent group training | awk -F: '{print $3}' | grep 1002 && getent group training | awk -F: '{print $4}' | grep charlie"}, "example": {"type": "command", "data": "groupadd training && usermod -a -G training alice && usermod -a -G training bob && usermod -a -G training charlie"}}, "labels": ["group"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sara -m sara && touch /restricted_file && chmod 700 /restricted_file && chown root /restricted_file && chgrp root /restricted_file && echo 'sara ALL=(ALL) NOPASSWD:/bin/cat /restricted_file' >> /etc/sudoers"}, "description": "Grant user `sara` permission to view the contents of the file `/restricted_file` without using any additional commands or programs.", "evaluation": {"type": "ground-truth", "answer": "the contents of the /restricted_file", "checking": null, "example": {"type": "command", "data": "sudo -u sara cat /restricted_file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/admin -m admin && echo 'secret_pass' | passwd --stdin admin && chmod 400 /etc/shadow && su - admin"}, "description": "As an admin, I need to change user passwords but I want to make sure other users cannot view /etc/shadow. Help me achieve this while preserving the ability to change passwords.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo cat /etc/shadow | if [ \"$(cat -)\" = \"Permission denied\"$'\\n'\"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 /etc/shadow && chmod u+s /usr/bin/passwd"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/kate -m kate && useradd -s /bin/bash -d /home/anna -m anna && mkdir /workdir && cd /workdir && touch project_v1.doc && chown kate project_v1.doc && chmod 640 project_v1.doc"}, "description": "kate and anna are members of the 'workgroup' group, make sure that kate can read and write to project_v1.doc, but anna cannot access the file at all.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l kate -c 'cat /workdir/project_v1.doc') | if [ \"$(cat -)\" = \"\" ]; then exit 1; fi && (runuser -l anna -c 'cat /workdir/project_v1.doc') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 660 project_v1.doc && chmod g+rwx /workdir && chgrp workgroup /workdir && usermod -a -G workgroup kate && usermod -a -G workgroup anna"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/jack -m jack && useradd -s /bin/bash -d /home/jane -m jane && mkdir /home/shared && touch /home/shared/file && chown root:root /home/shared/file && chmod 664 /home/shared/file"}, "description": "Allow jane and jack to read and write to the file in /home/shared, but only allow bob to read it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l jack -c 'echo 123 > /home/shared/file && cat /home/shared/file && echo 456 >> /home/shared/file && cat /home/shared/file' && runuser -l jane -c 'echo 789 > /home/shared/file && cat /home/shared/file && echo 000 >> /home/shared/file && cat /home/shared/file' && runuser -l bob -c 'cat /home/shared/file && echo 1 >> /home/shared/file && cat /home/shared/file && echo 2 >> /home/shared/file && cat /home/shared/file' | if [ \"$(cat -)\" = \"123$'\\n'456$'\\n'789$'\\n'000$'\\n'123$'\\n'456$'\\n'2$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 664 /home/shared/file && chmod 644 /home/shared/file && chown bob:root /home/shared/file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "cd /var/log && touch test.log && chmod 700 test.log"}, "description": "Give read and write permissions to the owner and the group to test.log file in /var/log", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /var/log/test.log | awk '{if ($1 !~ /^-..rw----/) { exit 1; } else { exit 0; } }'"}, "example": {"type": "command", "data": "chmod 660 /var/log/test.log"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/harry -m harry && useradd -s /bin/bash -d /home/ron -m ron && useradd -s /bin/bash -d /home/hermione -m hermione && echo 'harry ALL=(ron) /bin/ls' >> /etc/sudoers && echo 'hermione ALL=(ron) /usr/bin/apt' >> /etc/sudoers && su - ron"}, "description": "Configure sudoers file so that harry can execute '/bin/ls' as user 'ron' and hermione can execute '/usr/bin/apt' as user 'ron'. Test that it works by executing the respective commands using sudo.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u ron /bin/ls / && sudo -u ron /usr/bin/apt update && sudo -u ron /usr/bin/apt upgrade"}, "example": {"type": "command", "data": "echo 'harry ALL=(ron) /bin/ls' >> /etc/sudoers && echo 'hermione ALL=(ron) /usr/bin/apt' >> /etc/sudoers"}}, "labels": ["permission", "sudoers"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && echo 'This is a test file.' > /testfile && chmod 600 /testfile && chown bob /testfile"}, "description": "Bob can't modify /testfile. Let him modify file. After modification, the content of /testfile should be `This file has been modified by Bob.`", "evaluation": {"type": "ground-truth", "answer": "/testfile: Permission denied", "checking": null, "example": {"type": "command", "data": "sudo chmod u+w /testfile && su - bob -c 'echo \"This file has been modified by Bob.\" > /testfile' && cat /testfile"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && useradd -s /bin/bash -d /home/sean -m sean && mkdir /home/shared && chgrp sean /home/shared && chmod 2770 /home/shared"}, "description": "Only members of group 'shared' should be able to create or delete files in the directory /home/shared. Any file or directory created in the shared directory must also belong to the group 'shared' and the owner of the file/directory should also belong to the group 'shared'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home | grep shared | awk '{if ($3==\"sean\" && $4==\"shared\") { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "groupadd shared && usermod -a -G shared sean && chmod 2770 /home/shared"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/carol -m carol && touch ~/file && chmod 750 ~ && su - alice"}, "description": "Bob and Carol both should be able to read Alice's file, but not edit or delete it. Ensure that this rule applies even if Bob or Carol have sudo privileges.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u alice cat ~/file && sudo -u bob cat ~/file && sudo -u carol cat ~/file && (sudo -u bob rm ~/file && echo 'failed') || echo 'success' && (sudo -u carol rm ~/file && echo 'failed') || echo 'success'"}, "example": {"type": "command", "data": "chmod 755 /home/alice && chmod 555 /home/alice/file && chattr +i /home/alice/file"}}, "labels": ["permission", "user"], "difficulty": 3},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /group && groupadd developers && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/sarah -m sarah && useradd -s /bin/bash -d /home/david -m david && usermod -a -G developers john && usermod -a -G developers sarah && chmod 750 /group && chgrp developers /group"}, "description": "John, Sarah, and David are part of the developers group. The group has full read, write, and execute permissions for /group directory. However, John should not be able to edit the files inside the directory. Implement the necessary permissions for the directory and check that they work as expected.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l john -c 'echo data > /group/testfile && cat /group/testfile' && runuser -l sarah -c 'echo data > /group/testfile && cat /group/testfile' && runuser -l david -c 'echo data > /group/testfile && cat /group/testfile') | if [ \"$(cat -)\" = \"Permission denied$'\\n'data$'\\n'data\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+s /group && chmod 1770 /group && chmod g-w /group"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && useradd -s /bin/bash -d /home/user3 -m user3 && echo 'test' > /testfile && chown user1:user2 /testfile && chmod 740 /testfile"}, "description": "Set permissions for /testfile so that user1 can read and write, user2 can read, and user3 has no access to it at all.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l user1 -c 'cat /testfile' && runuser -l user2 -c 'cat /testfile' && runuser -l user3 -c 'cat /testfile') | if [ \"$(cat -)\" = \"test\"$'\\n'\"test\"$'\\n'\"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 740 /testfile && chown user1:user2 /testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir test && cd test && touch file1 && touch file2 && chmod 444 file1 && chown john:john file2"}, "description": "What are the permissions and ownership of file1 and file2?", "evaluation": {"type": "ground-truth", "answer": "file1: -r--r--r--, owner: root, group: root\nfile2: -r--r--r--, owner: john, group: john", "checking": null, "example": {"type": "command", "data": "ls -l /home/john/test"}}, "labels": ["permission", "ownership"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir doc && touch doc/file1 && touch doc/file2 && touch doc/file3 && chmod 400 doc/* && chmod 700 doc"}, "description": "jane wants to allow her friend John to access the files inside the 'doc' directory but not modify them. Help jane add John to a new group called 'docaccess' and set the correct permissions on the files inside the directory accordingly.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/jane/doc/ | awk '{if ($1~/^-.r--------/) { part=substr($0,11);sub(\" \",\"\",part); print part; } else if ($1~/^d.........x/) { print substr($0,11)\"/\"; } else { exit 1; }}' && sudo groups john | grep -E -q 'docaccess') | if [ \"$(cat -)\" = \"/home/jane/doc/file1/home/jane/doc/file2/home/jane/doc/file3\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd docaccess && usermod -a -G docaccess john && chgrp -R docaccess /home/jane/doc && chmod 440 /home/jane/doc/* && chmod 550 /home/jane/doc"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'admin ALL=(ALL) ALL' >> /etc/sudoers && cd /home/john && mkdir documents && cd documents && mkdir confidential && touch secret.txt && echo 'do not share this with anyone' >> secret.txt && chmod 640 secret.txt && touch public.txt && echo 'this is a public file' >> public.txt && chmod 644 public.txt && chown john:john confidential"}, "description": "Make the secret.txt file readable by only john and the admin group while public.txt should be readable by everyone. Also, ensure that new files and directories created in ~/documents inherit the same permissions as the ~/documents directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/john/documents | grep -v total | awk '{print $1,$3,$4}' | grep -E '^drwxr-x--- john john$' && ls -l /home/john/documents/ | grep -v total | awk '{print $1,$3,$4}' | grep -E '^drwxr-xr-x john john$' && ls -l /home/john/documents/confidential/ | grep -v total | awk '{print $1,$3,$4}' | grep -E '^drwxr-x--- john admin$' && ls -l /home/john/documents/ | grep -v total | awk '{print $1,$3,$4}' | grep -E '^drwxr-xr-x john john$' && find /home/john/documents -type d ! -perm 755 -ls && find /home/john/documents -type f ! -perm 664 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 /home/john/documents/confidential/secret.txt && chmod 644 /home/john/documents/public.txt && chmod g+s /home/john/documents && setfacl -R -m g:admin:r /home/john/documents/confidential && setfacl -R -m d:g:admin:r /home/john/documents/confidential && setfacl -R -m d:u::rwx,d:g::r-x,d:m::rwx /home/john/documents"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && touch file1 && chmod 630 file1 && su - bob"}, "description": "Add user alice to the group owning the file file1, so alice can interact with it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l alice -c 'cd /home/bob && cat file1' | if [ \"$(cat -)\" = \"Permission denied\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G $(ls -ng file1 | awk '{print $3}') alice"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /testdir && cd /testdir && touch testfile && chattr +i testfile"}, "description": "Make the testfile immutable and attempt to delete it. Verify that you cannot delete it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(rm /testdir/testfile && echo 'fail') || echo 'success'"}, "example": {"type": "command", "data": "chattr -i /testdir/testfile"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && echo 'super secret data' > secret.txt && chmod 400 secret.txt"}, "description": "Create a new user 'alice' and give her read permission to 'bob's secret.txt file, but don't allow 'alice' to modify or delete the file and make sure no one else has any permissions to this file.", "evaluation": {"type": "ground-truth", "answer": "super secret data", "checking": null, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && usermod -aG bob alice && su - alice && cat /home/bob/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/kelly -m kelly && useradd -s /bin/bash -d /home/bob -m bob && mkdir /shared && chown root:john /shared && chmod 2770 /shared && chmod g+s /shared"}, "description": "Set up a shared directory with permission 2770 and set it to be accessible by john, kelly and bob users. Any files added to this directory should be accessible by these users only. Test by creating a file as kelly and checking its accessibility by john and bob.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u kelly touch /shared/hello.txt && runuser -l john -c 'ls -l /shared/hello.txt' && runuser -l bob -c 'ls -l /shared/hello.txt') | if [ \"$(cat -)\" = \"-rw-rw---- 1 kelly john 0\"$'\\n'\"-rw-rw---- 1 kelly john 0\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo -u kelly touch /shared/hello.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && echo 'test 1' > /home/user1/testfile && ln -s /home/user1/testfile /home/user2/softlink"}, "description": "User2 wants to read the contents of the soft link which points to the /home/user1/testfile file, but he is unable to read it. Change the softlink permission or the testfile permission so that User2 can read the contents of the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - user2 -c 'cat ~/softlink' | if [ \"$(cat -)\" = \"test 1\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 777 /home/user1/testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/tester -m tester && cd /home/tester && touch testfile && chmod 6555 testfile"}, "description": "What permissions does chmod 6555 set on the file? How does this differ from chmod 644?", "evaluation": {"type": "ground-truth", "answer": "6555 sets the setuid bit for the user, making the file run with the privileges of the file owner, and sets read, write, and execute permissions for the file owner, as well as read and execute permissions for the group and all other users.\n644 sets read and write permissions for the file owner, and read-only permissions for the group and all other users. It does not set any special permission bits like the setuid bit.", "checking": null, "example": {"type": "command", "data": "N/A"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jake -m jake && cd /home/jake && touch file.txt && chmod 400 file.txt"}, "description": "jake needs to edit the file.txt, but you don't want to grant him the permission, so you add him to the group with permission to edit the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u jake cat /home/jake/file.txt | awk '{if (/^jake/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "usermod -a -G sudo jake && chgrp sudo /home/jake/file.txt && chmod 640 /home/jake/file.txt"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir docs && cd docs && touch file1 && touch file2 && chmod 660 file1 && chmod 664 file2"}, "description": "Give jane permission to read and write file2 but not to delete it. Also, change the owner of file1 to root but don't change the group ownership.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/jane/docs/file2 | awk '{if ($1 == \"-rw-rw-r--.\") { exit 0; } else { exit 1; }}') && (ls -l /home/jane/docs/file1 | awk '{if ($1 == \"-rw-rw----.\") { exit 0; } else { exit 1; }}')"}, "example": {"type": "command", "data": "chmod 664 /home/jane/docs/file2 && chmod u-w /home/jane/docs/file2 && chown root /home/jane/docs/file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && touch /tmp/testfile && echo 'hello world' > /tmp/testfile && chmod 400 /tmp/testfile && chown jane /tmp/testfile && su - jane"}, "description": "As Jane, create a new file called my_file in the home directory and write 'my secret content' into it. Set the permissions to 600.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/jane/my_file | if [ \"$(cat -)\" = \"my secret content\" ]; then stat -c '%a' /home/jane/my_file | grep '600' >/dev/null && echo 'permission correct' || echo 'permission not correct'; fi"}, "example": {"type": "command", "data": "echo 'my secret content' > /home/jane/my_file && chmod 600 /home/jane/my_file"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/tom -m tom && cd /home/tom && mkdir notes && cd notes && touch tom && su - tom"}, "description": "change the owner of the directory ~/notes to user root and group root", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l -d ~/notes | awk '{if ($3==\"root\" && $4==\"root\" && $1~/^drwx------/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "sudo chown -R root:root ~/notes"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user01 -m user01 && useradd -s /bin/bash -d /home/user02 -m user02 && mkdir /shared-folder && chown user01:user01 /shared-folder && chmod o-rwx /shared-folder"}, "description": "Create a shared folder /shared-folder that will be accessible to both user01 and user02. Both users should be able to create and modify files in the folder. Any files created in this folder should have the group ownership set to shared-group and permissions set to 664", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /shared-folder -type f ! -perm 664 -ls && find /shared-folder -type d ! -perm 2775 -ls && find /shared-folder -not -group shared-group -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd shared-group && usermod -aG shared-group user01 && usermod -aG shared-group user02 && chmod g+ws /shared-folder && chgrp shared-group /shared-folder"}}, "labels": ["permission", "user", "group ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m user1 && useradd -m user2 && echo 'word1234' | passwd --stdin user2 && touch file1 && chown user1 file1 && chmod 740 file1"}, "description": "User1 owns a file named file1 in which there is important information, how can user2 access the file1 if user1 doesn't want to change file permission?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - user2 -c 'cd /home/user1 && cat file1'"}, "example": {"type": "command", "data": "gpasswd -a user2 user1"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && echo 'mark ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers && passwd mark"}, "description": "Create a user `mark` with full sudo permissions and set a password for the user. Then, test if the user can use sudo without password prompt.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "echo 'test' | sudo -S ls /root | if [ $? -eq 0 ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": ""}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && echo 'jane ALL=(john) NOPASSWD: /bin/cat' >> /etc/sudoers"}, "description": "jane wants to be able to execute the 'cat' command as john, but only for files under '/home/john'. Help jane achieve this.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u john /bin/cat /home/john/test"}, "example": {"type": "command", "data": "sudo -u john /bin/chown john:john /home/john && sudo chmod 770 /home/john && sudo chmod g+s /home/john"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && echo 'echo hello' > /home/john/test && chmod 444 /home/john/test && chown john:jane /home/john/test && su - jane"}, "description": "Execute /home/john/test as user Jane without changing the permissions of the file.", "evaluation": {"type": "ground-truth", "answer": "", "checking": null, "example": {"type": "command", "data": "cat /home/john/test"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && mkdir /home/john/shared && chmod 777 /home/john/shared && touch /home/jane/file.txt"}, "description": "Give Jane read and write permissions on John's shared folder", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - jane -c 'cd /home/john/shared && touch test && rm test'"}, "example": {"type": "command", "data": "chmod o+rw /home/john/shared && chgrp users /home/john/shared && chmod g+rw /home/john/shared"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": ""}, "description": "What is the chmod command? Explain its syntax.", "evaluation": {"type": "ground-truth", "answer": "The chmod command stands for change mode. It is used to change the permissions of a file or directory. The basic syntax is: \n\nchmod [permissions] [file or directory]\n\nThe permissions are represented as a 3-digit octal number, where the first digit represents the owner permissions, the second digit represents the group permissions, and the third digit represents the world permissions. Each digit can range from 0 to 7, with each number representing a specific set of permissions:\n\n0 - no permissions\n1 - execute\n2 - write\n3 - write and execute\n4 - read\n5 - read and execute\n6 - read and write\n7 - read, write, and execute\n\nFor example, to give the owner read, write, and execute permissions, and the group and world read permissions, the command would be:\n\nchmod 755 file.txt", "checking": null, "example": null}, "labels": ["permission", "syntax"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && su - jane"}, "description": "Create a file called 'private.txt' in Jane's home directory, set its permission to 600, and verify that only Jane can read and write to the file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(echo 'SECRET' >> /home/jane/private.txt && ls -l /home/jane/private.txt | awk '{if ($1~/^-rw-------/) { exit 0; } else { exit 1; }}') && (chmod o-rwx /home/jane/private.txt && su -l jane -c 'echo \"text\" >> private.txt' && cat /home/jane/private.txt) | if [ \"$(cat -)\" = \"SECRET$'\\n'\"text\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 600 /home/jane/private.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir work && cd work && touch file1 && touch file2 && touch file3 && chmod 640 file1 && chmod 750 file2 && chown john file1 && chown :john file2 && su - john"}, "description": "In John's home directory, set permissions for file1 to be only readable by owner, file2 to be readable and executable by owner and files in work subdirectory to be only readable by owner. Leave file3 as is. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l ~/file1 | grep -q '^-r--------.'); r1=$?;(ls -l ~/work | grep -q '^-r--------.'); r2=$?;(ls -l ~/file2 | grep -q '^-r-x------.'); r3=$?;(ls -l ~/file3 | grep -q '^-rw-rw-r--.'); r4=$?;(test $r1 -eq 0 && test $r2 -eq 0 && test $r3 -eq 0 && test $r4 -eq 0) && echo 'success'"}, "example": {"type": "command", "data": "chmod 400 ~/file1 && chmod 500 ~/file2 && chmod -R 400 ~/work"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && touch file1 && touch file2 && chflags noschg file1 && chattr +i file2 && chmod 440 file1 file2"}, "description": "jane wants to delete file1 and edit file2. Help jane do this without changing the permission of any file and ensure that the attributes of file2 remain the same.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/jane | grep -E '^([drwxs])[sr-][r-][xt-][r-][t-][r-][x-][r-][t-].*file' && (rm /home/jane/file1 && echo 'hello world!' > /home/jane/file2 && chflags noschg /home/jane/file2) && (cat /home/jane/file2 | grep -i 'hello world\\!') | if [ \"$(cat -)\" = \"hello world!\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chflags sappnd,noschg /home/jane/file2 && su jane"}}, "labels": ["permission", "file attributes"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jimmy -m jimmy && useradd -s /bin/bash -d /home/kim -m kim && useradd -s /bin/bash -d /home/tim -m tim && echo 'kim ALL=(jimmy) NOPASSWD:/bin/cat' >> /etc/sudoers && echo 'tim ALL=(jimmy) NOPASSWD:/bin/ls' >> /etc/sudoers"}, "description": "Give sudo access to kim and tim to be able to run jimmy's cat and ls commands respectively, without the need for the password. Check that they work.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u kim cat /etc/passwd | if [ \"$(cat -)\" = \"$(sudo cat /etc/passwd)\" ]; then echo 'kim/cat command success'; else echo 'kim/cat command failed'; fi) && (sudo -u tim ls /tmp/ | if [ \"$(cat -)\" = \"$(sudo ls /tmp/)\" ]; then echo 'tim/ls command success'; else echo 'tim/ls command failed'; fi)"}, "example": {"type": "command", "data": "echo 'kim ALL=(jimmy) NOPASSWD:/bin/cat' >> /etc/sudoers && echo 'tim ALL=(jimmy) NOPASSWD:/bin/ls' >> /etc/sudoers"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/linda -m linda && echo 'linda ALL = (ALL:ALL) ALL' >> /etc/sudoers"}, "description": "Give 'linda' root access without password, and show the contents of /etc/sudoers", "evaluation": {"type": "output-checking", "answer": "linda ALL=(ALL:ALL) ALL", "checking": {"type": "command", "data": "(echo \"sudo -i\"; sleep 1; echo \"echo linda can now use sudo without password!\"; sudo -i) | tail -n1"}, "example": {"type": "command", "data": "echo 'linda ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && cat /etc/sudoers"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'Secret Message' > /home/john/message && chmod 600 /home/john/message"}, "description": "As root user, give user sara read permission to /home/john/message without granting read access to any other users", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo ls -l /home/john/message | awk '{if ($1~/^-..------/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "sudo usermod -aG john sara && chmod ugo+r /home/john/message && chmod o-r /home/john/message"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/vincent -m vincent && cd /home/vincent/ && (echo 'my_secret_password'; echo 'my_secret_password') | passwd vincent"}, "description": "How to allow vincent to change others' files in /home/vincent folder", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - vincent -c 'echo \"my_secret_password\" | sudo -S chmod o+w /home/vincent/*')"}, "example": {"type": "command", "data": "chmod g+w /home/vincent/* && sudo chgrp -R vincent /home/vincent/"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && echo 'secret' > /home/alex/secret_file && chmod 400 /home/alex/secret_file && su - alex"}, "description": "Change the owner of /home/alex/secret_file to root. Then, as a regular user without root privileges, read the content of the file.", "evaluation": {"type": "ground-truth", "answer": "Permission Denied", "checking": "null", "example": {"type": "command", "data": "sudo chown root /home/alex/secret_file && cat /home/alex/secret_file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/jack -m jack && mkdir /NFS && chown -R jane:jane /NFS && chmod -R 770 /NFS && echo '/NFS *(rw,sync,no_subtree_check,no_root_squash)' >> /etc/exports && systemctl restart nfs-kernel-server && cd /home/jack"}, "description": "jane has created a shared directory /NFS and added jack to the shared group. Set permissions so that both Jane and Jack have read, write, and execute permissions on /NFS and all of its contents", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l jane -c 'touch /NFS/test_file' && ls -l /NFS/test_file && runuser -l jack -c 'touch /NFS/test_file2' && ls -l /NFS/test_file2) | if [ \"$(cat -)\" = \"-rw-rw---- 1 jane jane 0 [DATE TIME] /NFS/test_file\n-rw-rw---- 1 jack jack 0 [DATE TIME] /NFS/test_file2\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod -R u+rwx,g+rwx,o-rwx /NFS"}}, "labels": ["permission", "NFS"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && cd /home/emma && mkdir docs && cd docs && touch file1.txt && touch file2.txt && chgrp emma file1.txt && chmod g+w file1.txt && su - emma"}, "description": "Access to file1.txt should only be granted to members of the group `emma`, set the correct permissions for file1.txt while still allowing emma to edit it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "( ls -l /home/emma/docs | grep file1.txt | awk '{if ($1~/^-.rw-rw----/) { exit 0; } else { exit 1; } }') && (ls -l /home/emma/docs/file1.txt | grep emma | wc -l | awk '{if ($1==1) { exit 0; } else { exit 1; } }')"}, "example": {"type": "command", "data": "chmod 660 file1.txt && chgrp emma file1.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && useradd -s /bin/bash -d /home/pablo -m pablo && useradd -s /bin/bash -d /home/rebecca -m rebecca && mkdir /shared_folder && chgrp root /shared_folder && chmod 2770 /shared_folder"}, "description": "Create a shared folder accessible by emma, pablo and rebecca. All new files created in the shared folder should have group ownership set to 'shared_folder' and group write permissions enabled. Testing whether they can write files to the directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - emma -c 'touch /shared_folder/emma_file.txt && test -w /shared_folder/emma_file.txt' && su - pablo -c 'touch /shared_folder/pablo_file.txt && test -w /shared_folder/pablo_file.txt' && su - rebecca -c 'touch /shared_folder/rebecca_file.txt && test -w /shared_folder/rebecca_file.txt') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod +t /shared_folder && find /shared_folder -type d -exec chmod 2770 {} + && chgrp shared_folder /shared_folder"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/michelle -m michelle && cd /home/michelle && mkdir projects && touch projects/project1.txt && echo 'hello world' > projects/project1.txt && chmod 444 projects/project1.txt"}, "description": "Change the permissions of project1.txt to be writable by the owner, readable by the owner's group, and not writable or readable by anyone else.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/michelle/projects/project1.txt | awk '{if ($1 ~/^-rw-rw----/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 640 /home/michelle/projects/project1.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex"}, "description": "Set the permissions of the /home/alex directory so that only alex can read and write to it and nobody else can access it, even see its existence.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -ld /home/alex | awk '{if ($1~/^-..------/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 700 /home/alex && chattr +i /home/alex"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /shared && useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/charlie -m charlie"}, "description": "Create a new group called 'fellowship' and add Alice, Bob, and Charlie to it. Then, create a new file inside /shared and give read and write access to the 'fellowship' group. Make sure the file is not executable by anyone.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(id alice | grep '1001(fellowship)') && (id bob | grep '1001(fellowship)') && (id charlie | grep '1001(fellowship)') && (ls -l /shared | awk '{if ($1~/^-..rw----/) { exit 0; } else { exit 1; } }')"}, "example": {"type": "command", "data": "groupadd fellowship && usermod -a -G fellowship alice && usermod -a -G fellowship bob && usermod -a -G fellowship charlie && touch /shared/newfile && chmod 660 /shared/newfile && chown root:fellowship /shared/newfile"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && touch /home/alex/secret_file && echo 'top_secret_data' > /home/alex/secret_file && chown alex /home/alex/secret_file && chmod 400 /home/alex/secret_file"}, "description": "How can you grant user bob read access to the file /home/alex/secret_file without changing the file's ownership?", "evaluation": {"type": "ground-truth", "answer": "You can grant user bob read access to the file /home/alex/secret_file by adding user bob to the file's group and giving the group read access. For example: chgrp some_group /home/alex/secret_file && chmod g+r /home/alex/secret_file && usermod -a -G some_group bob", "checking": null, "example": {"type": "command", "data": "chgrp some_group /home/alex/secret_file && chmod g+r /home/alex/secret_file && usermod -a -G some_group bob && su - bob -c 'cat /home/alex/secret_file'"}}, "labels": ["permission", "file ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lucy -m lucy && cd /home/lucy && mkdir project && cd project && mkdir code && touch code/file.txt && chmod 700 code && chmod 400 code/file.txt && su - lucy"}, "description": "Lucy wants to give read and execute permission for the 'code' directory along with its files but does not want to give full permissions for the directory or its files. Help Lucy with the correct permission commands.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -ld /home/lucy/project/code | awk '{if ($1~/^drwx--x---/) { exit 0; } else { exit 1; } }') && (ls -l /home/lucy/project/code/file.txt | awk '{if ($1~/^-r-x------/) { exit 0; } else { exit 1; } }')"}, "example": {"type": "command", "data": "chmod 711 /home/lucy/project/code && chmod 511 /home/lucy/project/code/file.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /data && touch /data/file && chmod 400 /data/file && setfacl -m g:dataaccess:r /data/file && setfacl -m d:g:dataaccess:rx /data"}, "description": "Suppose you have a file called /data/file that should only be accessible to members of the group \"dataaccess\", but only for reading. Ensure that new files and directories created in this directory inherit the group ownership and access permissions, and that users can only delete files and directories that they own.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(getfacl /data/file | grep 'group:dataaccess:r--') && (getfacl /data | grep 'default:group:dataaccess:r-x')"}, "example": {"type": "command", "data": "chmod g+s /data && chmod +t /data"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/user1 && mkdir /home/user2 && echo 'hello user1' > /home/user1/testfile && echo 'hello user2' > /home/user2/testfile"}, "description": "Give user1 read and write permission to /home/user1/testfile, and give user2 read-only access to /home/user1/testfile", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -H -u user1 sh -c 'echo testing write permission > /home/user1/testfile && cat /home/user1/testfile') | if [ \"$(cat -)\" = \"testing write permission$'\\n'$'hello user1'\" ]; then exit 0; else exit 1; fi && (sudo -H -u user2 sh -c 'cat /home/user1/testfile') | if [ \"$(cat -)\" = \"hello user1\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod u+rw /home/user1/testfile && chmod ugo+r /home/user1/testfile && chown user1 /home/user1/testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/myuser -m myuser && cd /home/myuser && touch file1 && chmod 755 . && chmod 644 file1 && chown root file1 && chgrp root file1"}, "description": "What are the permissions of the /home/myuser directory and file1? What are the ownerships and groups of these files?", "evaluation": {"type": "ground-truth", "answer": {"directory_permissions": "rwxr-xr-x", "file_permissions": "rw-r--r--", "file_ownership": "root root"}, "checking": null, "example": {"type": "command", "data": "ls -l /home/myuser"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "groupadd finance && useradd -s /bin/bash -d /home/anna -m anna && useradd -s /bin/bash -d /home/karen -m karen && useradd -s /bin/bash -d /home/bryan -m bryan && useradd -s /bin/bash -d /home/jennifer -m jennifer && echo '' > /finance.dat && chmod 664 /finance.dat && chown root:finance /finance.dat && chmod g+s /finance.dat && usermod -a -G finance anna && usermod -a -G finance bryan"}, "description": "There are sensitive financial data in the file /finance.dat and only the group \"finance\" has the access permission. As a member of the group, write a shell script to fetch the data and output it to the screen", "evaluation": {"type": "command", "data": "", "answer": "", "checking": {"type": "command", "data": "sudo -u anna bash -c 'cat /finance.dat'"}, "example": {"type": "command", "data": ""}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m tom && echo 'Tom needs access to /var/logs' > /var/logs/readme.txt && chmod 640 /var/logs/readme.txt && chown root:adm /var/logs/readme.txt"}, "description": "Give user tom read access to /var/logs directory without modifying its permissions", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u tom cat /var/logs/readme.txt | if [ \"$(cat -)\" = \"Tom needs access to /var/logs\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G adm tom"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": ""}, "description": "What are the three types of permissions in Linux? How are they represented in the command `ls -l`?", "evaluation": {"type": "ground-truth", "answer": "The three types of permissions in Linux are: read (r), write (w), and execute (x). They are represented in the command `ls -l` as a series of ten characters. The first character represents the file type, the following three characters represent the owner's permissions, the next three represent the group's permissions, and the final three represent everyone else's permissions. The three permission characters indicate whether the file is readable, writable, and/or executable.", "checking": null, "example": {"type": "command", "data": ""}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "sudo groupadd developers && sudo useradd -m alice && sudo useradd -m bob && sudo usermod -a -G developers alice &&sudo usermod -a -G developers bob && sudo mkdir /code && sudo chgrp developers /code && sudo chmod g+w /code"}, "description": "alice and bob are developers. Give alice write and execute permissions in /code, allow bob read-only permissions in /code, make sure all files created by alice and bob are owned by developers group", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo su - alice -c 'touch /code/alicefile && echo `whoami`:$(ls -l /code | grep alicefile | awk '{print $4}')' && sudo su - bob -c 'touch /code/bobfile && echo `whoami`:$(ls -l /code | grep bobfile | awk '{print $4}')') | if [ \"$(cat -)\" = \"alice:developers$'\\n'bob:developers\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 770 /code && chmod g+s /code && chmod +t /code && chmod g+x /code && sudo setfacl -Rm g:developers:r /code && sudo setfacl -Rm u:alice:rwx /code && sudo setfacl -m d:g:developers:r /code && sudo setfacl -m d:u:alice:rwx /code"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/mark -m mark && useradd -s /bin/bash -d /home/lucy -m lucy && echo 'jane ALL=(mark) NOPASSWD:/bin/cat' >> /etc/sudoers"}, "description": "Allow Jane to run the 'cat' command as Mark without entering a password.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u mark cat /etc/shadow | if [ -n \"$(cat -)\" ]; then exit 1; else exit 0; fi"}, "example": {"type": "command", "data": "echo 'jane ALL=(mark) NOPASSWD:/bin/cat' >> /etc/sudoers"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir documents && cd documents && touch file1.txt && touch file2.txt && touch file3.txt && chmod 700 /home/john && chmod 600 /home/john/documents/* && chown john:john /home/john/documents/*"}, "description": "John has a home directory with sensitive files. What commands can you execute to allow another user 'jane' to read the files in the directory and subdirectories of the 'documents' folder?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jane ls /home/john/documents/file1.txt && sudo -u jane ls /home/john/documents/file2.txt && sudo -u jane ls /home/john/documents/file3.txt) | if [ \"$(cat -)\" = \"/home/john/documents/file1.txt$'\\n'/home/john/documents/file2.txt$'\\n'/home/john/documents/file3.txt\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G john jane"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && groupadd project && usermod -a -G project john && cd /home && sudo mkdir project && cd project && sudo touch secret && sudo chown root:project secret && sudo chmod 640 secret && cd .. && sudo chmod 750 project; su - john"}, "description": "As john, without changing the file's permission, we need to make a copy of /home/project/secret and put it in his home directory /home/john/", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "md5sum /home/project/secret /home/john/secret && ls /home/john/ | grep secret | grep -qE '.*secret$'"}, "example": {"type": "command", "data": "cp --preserve=context /home/project/secret /home/john/; chown john:john /home/john/secret"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/sarah -m sarah && mkdir /mydata && chown john:john /mydata && chmod 770 /mydata"}, "description": "Allow sarah to read, write and execute files and directories in /mydata but deny any other user including the owner john.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u sarah touch /mydata/sarahfile && sudo -u sarah sh -c 'echo \"Sarah can do this!\" > /mydata/sarahfile' && sudo -u sarah chmod 700 /mydata/sarahfile && sudo -u john touch /mydata/johnfile && sudo -u john sh -c 'echo \"John can't do this!\" > /mydata/johnfile') && (sudo -u sarah rm /mydata/sarahfile && (find /mydata -executable -type f | grep sarahfile) && find /mydata -executable -type d | grep sarahfile | xargs dirname | grep -v /mydata && find /mydata -readable -type f | grep johnfile && find /mydata -readable -type d | grep johnfile | xargs dirname | grep -v /mydata) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chown john:sarah /mydata && chmod 730 /mydata"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir files && touch files/file.txt && chmod 444 files/file.txt"}, "description": "Change the user ownership of /home/john/files/file.txt to a new user named \"peter\" without changing the file permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/john/files | grep file.txt | awk '{if ($3 == \"peter\") { exit 0; } else { exit 1; } }') && (ls -l /home/john/files/file.txt | awk '{if ($1 == \"-r--r--r--\") { exit 0; } else { exit 1; }}')"}, "example": {"type": "command", "data": "chown peter /home/john/files/file.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir data && cd data && touch file && chmod 700 file && chattr +i file && su - jane"}, "description": "jane created a file in her directory with permissions 700 and added a special attribute to it so that it cannot be modified or deleted. As a system administrator, remove the special attribute of the file and add permissions for the group 'staff' to read and write to the file without deleting or modifying it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(lsattr /home/jane/data/file | grep 'i' && ls -l /home/jane/data/file | awk '{if ($1~/^-rwx------/) { exit 0; } else { exit 1; }}' && getent group staff | cut -d':' -f 1 | xargs -I '%' bash -c 'id %') | if [ \"$(cat -)\" = \"i\n-rwx------\njane\nstaff\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo chattr -i /home/jane/data/file && sudo chmod g+rw /home/jane/data/file && sudo chmod o-rw /home/jane/data/file"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/eliza -m eliza && echo 'jane ALL=(eliza) NOPASSWD:/home/eliza/script.sh' >> /etc/sudoers && su - jane && cd /home/eliza && echo 'echo \"Bob says hi\"' > script.sh && chmod u+x script.sh"}, "description": "Bob needs to execute a script located at /home/eliza/script.sh through jane but he can't access jane's account. Help him execute the script and get the output 'Bob says hi'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(whoami && sudo -u eliza /home/eliza/script.sh) | if [ \"$(cat -)\" = \"jane\"$'\\n'\"Bob says hi\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo -u eliza /home/eliza/script.sh"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && touch /home/john/file.txt && chmod 776 /home/john/file.txt"}, "description": "How do I remove all permissions for the owner and group, but allow executable permission for others on /home/john/file.txt?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "stat -c '%a' /home/john/file.txt | if [ \"$(cat -)\" = \"111\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 011 /home/john/file.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/test -m test && su - test"}, "description": "Create a new file called \"myfile\" under the home directory of \"test\" user with write-only permission for group. Ensure the file does not have any other permissions and is owned by the user \"test\". Print the file permissions to check if the operation succeeded.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/test/myfile | awk '{if ($1 == \"-rw--w----\") {exit 0;} else {exit 1;} }'"}, "example": {"type": "command", "data": "touch /home/test/myfile && chmod 220 /home/test/myfile && chown test:test /home/test/myfile && ls -l /home/test/myfile"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": ""}, "description": "What's the difference between chmod 755 and chmod u=rwx,go=rx?", "evaluation": {"type": "ground-truth", "answer": "There's no difference. Both commands set the same permission of rwxr-xr-x to the file or directory.", "checking": null, "example": {"type": "command", "data": ""}}, "labels": ["file-permission", "chmod"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/amy -m amy && cd /home/amy && mkdir docs && mkdir pics && touch docs/a.txt && touch pics/b.jpg && chmod 664 docs/a.txt && chmod 640 pics/b.jpg"}, "description": "Set the group ownership of the directory 'docs' to 'docaccess', and the group ownership of the directory 'pics' to 'picaccess'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -ld /home/amy/docs | cut -d ' ' -f 4 | grep -q docaccess) && (ls -ld /home/amy/pics | cut -d ' ' -f 4 | grep -q picaccess) "}, "example": {"type": "command", "data": "groupadd docaccess && groupadd picaccess && chgrp docaccess /home/amy/docs && chgrp picaccess /home/amy/pics"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd ~ && echo 'Hello, World!' > message.txt && chmod 700 message.txt && chown jane message.txt && su - jane"}, "description": "As user 'jane', view the contents of message.txt without changing its permissions.", "evaluation": {"type": "ground-truth", "answer": "Hello, World!", "checking": null, "example": {"type": "command", "data": "cat message.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir folder1 && echo 'Content in file1' > folder1/file1 && chmod o+r folder1/file1 && chmod o-x folder1 && chown -R john:john folder1 && su - john"}, "description": "John has a folder called folder1 in his home directory, which contains a file named file1. The permissions for file1 are such that only John can read the file, but anyone can navigate to the folder. Change the permissions on folder1 so that only John can access it, but anyone can read the contents of file1.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cd /home/john/folder1 && [ -r file1 ] && ! [ -x . ] && ! [ -x .. ] && ! [ -x file1 ] && ! [ -x .hidden ] && ! [ -r .. ] && ! [ -w .. ] && ! [ -x .. ]) | if [ \"$(cat -)\" = \"true\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 700 /home/john/folder1 && chmod 744 /home/john/folder1/file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /var/log/myapp && touch /var/log/myapp/app.log && useradd -s /bin/bash -d /home/myuser -m myuser && chown -R myuser:myuser /var/log/myapp"}, "description": "Give read/write access to /var/log/myapp/app.log to user myuser without giving any access to other users.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u myuser cat /var/log/myapp/app.log && (sudo -u anotheruser cat /var/log/myapp/app.log || exit 0) | if [ \"$(cat -)\" = \"hello world\"$'\\n'\"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 600 /var/log/myapp/app.log"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jenny -m jenny && useradd -s /bin/bash -d /home/smith -m smith && echo 'hello world' > /home/jenny/file1 && echo 'goodbye world' > /home/jenny/file2 && chown jenny:jenny /home/jenny/file1 && chown jenny:jenny /home/jenny/file2 && chmod 600 /home/jenny/file1 && chmod 640 /home/jenny/file2 && su - smith"}, "description": "As smith, can you read the contents of /home/jenny/file1 and /home/jenny/file2? Explain why or why not.", "evaluation": {"type": "ground-truth", "answer": "No, smith cannot read the contents of /home/jenny/file1 and /home/jenny/file2 because the files are owned by jenny and have restrictive permissions set only for the owner and group, not for other users.", "checking": null, "example": {"type": "command", "data": "cat /home/jenny/file1"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/assistant && touch /home/assistant/file.txt && chown assistant /home/assistant/file.txt && chmod o-r /home/assistant/file.txt && chmod g+w /home/assistant/file.txt"}, "description": "As root, create a file \u2018secret.txt\u2019 in /home/assistant directory and add text \u2018You found the secret\u2019. Give access to the file only to group \u2018secretgroup\u2019 (create this group if it doesn\u2019t exist) and deny all permissions to other users. Lastly, change the ownership to \u2018assistant\u2019.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/assistant | grep secret.txt | awk '{if ($1~/^-rw-rw----/) { exit 0; } else { exit 1; } }') && (getent group secretgroup | awk -F: '{ print $NF }' | grep -Fxq secretgroup) && (echo 'You found the secret' | cmp - /home/assistant/secret.txt) 2> /dev/null || [ $? -eq 1 ]"}, "example": {"type": "command", "data": "groupadd secretgroup && touch /home/assistant/secret.txt && echo 'You found the secret' > /home/assistant/secret.txt && chgrp secretgroup /home/assistant/secret.txt && chmod 640 /home/assistant/secret.txt && chown assistant /home/assistant/secret.txt"}}, "labels": ["permission", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sally -m sally && cd /home/sally && mkdir diary && touch diary/notes.txt && chmod 600 diary/notes.txt"}, "description": "Sally wants to share her diary notes with her friend Jane. Give Jane read access to Sally's notes without compromising Sally's privacy.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l jane -c 'cat /home/sally/diary/notes.txt' && runuser -l sally -c 'cat /home/sally/diary/notes.txt') | if [ \"$(cat -)\" = \"Hello Jane! I'm glad to share my notes with you.\"$'\\n'\"This is private, please don't share it with anyone else.\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -aG sally jane && chmod 640 /home/sally/diary/notes.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && echo 'Ultra Secret Message' > secret.txt && chmod 400 secret.txt && chown bob secret.txt && su - bob"}, "description": "As root, create a user, Bob, and give him permission to execute the `cat` command without elevating his privileges. Then, execute the `cat` command as Bob to print out the content of `secret.txt`.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l bob -c 'cat ~/secret.txt' | if [ \"$(cat -)\" = \"Ultra Secret Message\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -aG sudo bob && echo 'bob ALL=(ALL) NOPASSWD: /bin/cat' >> /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /files && touch /files/readme.txt && chmod 000 /files/readme.txt"}, "description": "Give read permissions to user jessica without removing permissions from other users", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /files/readme.txt | awk '{if ($1 !~ /^-.{3}r.----/) { exit 1; } else { exit 0; } }'"}, "example": {"type": "command", "data": "chmod u+r /files/readme.txt && su - jessica -c 'cat /files/readme.txt'"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && cd /home/john && mkdir folder && cd folder && touch file && cd .. && chmod g+s folder && chown john:users folder && usermod -a -G users jane && chmod 775 /home/john /home/john/folder /home/john/folder/file && echo 'john ALL=(jane) NOPASSWD:/bin/cat /home/john/folder/file' > /etc/sudoers.d/jane"}, "description": "jane needs to read contents of the /home/john/folder/file. assign permissions and sudo access to the file for jane without giving her access to other files in the folder.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u jane cat /home/john/folder/file | if [ \"$(cat -)\" = \"this is a test\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 700 /home/john/folder && chmod 600 /home/john/folder/file && chown john:users /home/john/folder/file && echo 'jane ALL=(john) NOPASSWD:/bin/cat /home/john/folder/file' > /etc/sudoers.d/jane"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/tom -m tom && cd /home/tom && echo 'secret data' > secret && chmod 400 secret && chown tom secret && useradd -s /bin/bash -d /home/mike -m mike && usermod -aG tom mike && su - mike"}, "description": "mike needs to read tom's secret file, what permission changes should be made so that mike can read the file but tom's permissions must not change", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/tom/secret && sudo -u mike cat /home/tom/secret) | if [ \"$(cat -)\" = \"secret data\"$'\\n'\"secret data\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+x /home/tom && chmod o+r /home/tom/secret"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && mkdir /home/jane/private && touch /home/jane/private/file.txt && chmod 700 /home/jane/private/file.txt && chown jane:jane /home/jane/private/file.txt"}, "description": "jane wants to give read-only access to /home/jane/private/file.txt to all members in the group \"friends.\" How can they do this while ensuring that other users cannot access the file?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "getfacl /home/jane/private/file.txt | grep friends | grep r-- | wc -l | awk '{if ($1==1) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "groupadd friends && usermod -a -G friends jane && chmod g+r /home/jane/private/file.txt && setfacl -m g:friends:r /home/jane/private/file.txt"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && cd /home/sam && mkdir projects && cd projects && mkdir project1 && mkdir project2 && touch project1/script1 && touch project2/script2 && chown -R sam:sam /home/sam/projects && chmod -R u=rwX,g=rX,o= /home/sam/projects"}, "description": "Give read and execute permissions to the group and others for all scripts under /home/sam/projects", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/sam/projects/project1/script1 /home/sam/projects/project2/script2 | awk '{if ($1~/^-..r-xr-x/) { exit 0; } else { exit 1; } }' >/dev/null 2>/dev/null) && (find /home/sam/projects/ -type d -exec ls -ld {} + | awk '{if ($1~/^drwxr-xr-x/) { exit 0; } else { exit 1; } }' >/dev/null 2>/dev/null)"}, "example": {"type": "command", "data": "chmod -R g+rx,o+rx /home/sam/projects/*.sh"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && useradd -s /bin/bash -d /home/user3 -m user3 && useradd -s /bin/bash -d /home/user4 -m user4 && touch file1 && touch file2 && chmod 444 file1 && chmod 777 file2 && mkdir folder1 && cd folder1 && touch file3 && chmod 0000 file3 && chown user3 file3 && cd .. && mkdir folder2 && touch folder2/file4 && chmod 333 folder2/file4  && chown user4 folder2/file4 && cd .."}, "description": "In the directory containing file1, file2, folder1 and folder2, allow read access to file1 for all users, allow read, write and execute access to file2 and file4 for only their respective owners, and remove all access to file3 for all users, while allowing users user3 and user4 full access to folder1 and folder2 respectively. Ensure that all changes are applied recursively", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l file1 | awk '{if ($1 != \"-r--r--r--\") { exit 1; } else { exit 0; }}') && (ls -l file2 | awk '{if ($1 != \"-rwxrwxrwx\") { exit 1; } else { exit 0; }}') && (ls -l folder1/file3 | awk '{if ($1 != \"----------\") { exit 1; } else { exit 0; }}') && (find folder1 -type d ! -perm 777 -ls && find folder1 -type f ! -perm 777 -ls && find folder2 -type d ! -perm 777 -ls && find folder2 -type f ! -perm 333 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 444 file1 && chmod 700 file2 && chmod 000 file3 && chmod -R 700 folder1 && chmod -R 333 folder2"}}, "labels": ["permission", "recursive"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && mkdir shared && cd shared && touch file1 && sudo chown alice:bob file1 && chmod 660 file1"}, "description": "Alice has `rw` permission while Bob only has `r`. Use ACL to give Bob `w` permission on the shared file `file1`. Make sure these permissions persist upon reboot.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(getfacl file1 | grep -q 'user:bob:rw' || exit 1) && (find / -type f -name .bashrc -exec cat {} + | grep -q 'setfacl -Rm u:bob:rw' || exit 1) && sudo reboot && find / -type f -name .bashrc -exec cat {} + | grep -q 'setfacl -Rm u:bob:rw' && (getfacl file1 | grep -q 'user:bob:rw' || exit 1)"}, "example": {"type": "command", "data": "setfacl -Rm u:bob:rw shared && echo 'setfacl -Rm u:bob:rw /home/shared' >> /etc/bash.bashrc"}}, "labels": ["permission", "ACL"], "difficulty": 3},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir documents && cd documents && touch doc1 && touch doc2 && chmod 740 doc1 && chmod 640 doc2 && su - jane"}, "description": "As the user jane, change the permission of doc1 to 760 and the group ownership of doc2 to 'staff'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l doc1 | awk '{if ($1 != \"-rwxrw----.\") { exit 1; } else { exit 0; }}') && (ls -l doc2 | awk '{if ($1 != \"-rw-r-----.\") { exit 1; } else if ($4 != \"staff\") { exit 2; } else { exit 0; }}')"}, "example": {"type": "command", "data": "chmod 760 doc1 && chgrp staff doc2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/amy -m amy && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/cat -m cat && touch /file1 && touch /file2 && touch /file3 && chmod 444 /file2 && chmod +X /emultation"}, "description": "Only user amy and the users in the same group as amy can read and write /file1, user bob can only read the file, and user cat cannot access the file. /file2 can only be read by users in amy's group, /file3 can only be read by users in bob's group, and the permissions for other files and directories remain the same. Please achieve the permissions required by the question", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /file1 | awk '{if (($1~/^.......rw.) && ($3$4~/^amyamy/))  exit 0; else exit 1; }') && (ls -l /file2 | awk '{if (($1~/^..r....../) && ($4~/^amy/))  exit 0; else exit 1; }') && (ls -l /file3 | awk '{if (($1~/^..r..r.../) && ($4~/^bob/))  exit 0; else exit 1; }') && (ls -l / | grep \"^-r--r--r--\" | awk '{if (($3!~/^amy$/) || ($4!~/^amy$/)) { exit 1; } }') && (ls -l /emultation | awk '{if (!$1~/^d.......x./) exit 1}' | awk '{if ($3~/^amy$/ && $4~/^amy$/) exit 0; else exit 1;}' ) "}, "example": {"type": "command", "data": "groupadd amygroup && usermod -a -G amygroup amy && chmod u+rw,g+rw,o-rwx /file1 && chown amy:amygroup /file1 && chmod g+r,o-rwx /file2 && chgrp amygroup /file2 && chmod g+r,o-rwx /file3 && chgrp bob /file3"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && useradd -s /bin/bash -d /home/john -m john"}, "description": "Give user john read and write access to a file, but deny execute access. Also, sam shouldn't be able to access the file at all.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - john -c 'echo test > ~/file && chmod u=rw,g=r,o= ~/file && ls -l ~/file' && su - sam -c 'cat ~/file' && echo 1234 >> ~/file && su - john -c 'cat ~/file') | if [ \"$(cat -)\" = \"-rw------- 1 john john 13 '\"'\"test\n1234\"'\"$'\\n'\"'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": ""}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mary -m mary && useradd -s /bin/bash -d /home/john -m john && mkdir /data && mkdir /data/files && chown root:john /data/files && chmod 775 /data/files"}, "description": "Mary needs to be able to create, edit, and delete files in the /data/files directory, but John should only be able to read the files created by Mary. How can you configure the permissions to achieve this?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cd /data/files && touch test && su - john -c 'cat test' && su - mary -c 'echo \"new content\" > test' && su - john -c 'cat test' && su - john -c 'rm test' && su - mary -c 'rm test') | if [ \"$(cat -)\" = \"testnew content\"$'\\n'test$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+wx /data/files && setfacl -dm u:mary:rwx,u:john:r-x,g::r-x,o::--- /data/files"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && cd /home/emma && mkdir my_files && touch my_files/file1 && touch my_files/file2 && chmod 770 my_files && chown emma:emma my_files"}, "description": "Add user Mike to the group 'emma'. Ensure that Mike can read and write files in 'my_files' directory, but can't delete them.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u mike cat /home/emma/my_files/file1 && sudo -u mike touch /home/emma/my_files/file3 && sudo -u mike rm /home/emma/my_files/file2 && sudo -u mike rm /home/emma/my_files/) | if [ \"$(cat -)\" = \"Permission denied\n\"$'\\n''/home/emma/my_files/file3\nrm: cannot remove '/home/emma/my_files/file2': Permission denied\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G emma mike && chmod g+rwX /home/emma/my_files && chmod g-w /home/emma/my_files/* && chown -R emma:emma /home/emma/my_files/*"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && useradd -s /bin/bash -d /home/sarah -m sarah && chsh -s /sbin/nologin sarah"}, "description": "Make lisa the owner and sarah the group owner of a file called \"file.txt\". Give lisa read and write permissions and sarah only read permissions. Ensure that both users cannot change the ownership of the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l / | grep file.txt | awk '{if ($1~/^-rw-r-----./ && $3~/^lisa$/ && $4~/^sarah$/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "touch /file.txt && chown lisa:sarah /file.txt && chmod 264 /file.txt && chattr +i /file.txt"}}, "labels": ["permission", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir music && cd music && touch song1 && touch song2 && chmod 640 song1 && chmod 600 song2"}, "description": "Give a group called \"band\" read and execute permission to the music directory and its contents, but don't allow them to modify or delete any files", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/jane | grep music | awk '{if ($1~/^d.....r..x/ && $4==\"band\") { exit 0; } else { exit 1; } }' && (find /home/jane/music -type f ! -perm 444 -ls && find /home/jane/music -type d ! -perm 555 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd band && usermod -a -G band jane && chgrp -R band /home/jane/music && find /home/jane/music -type f -exec chmod 444 {} + && find /home/jane/music -type d -exec chmod 555 {} +"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'let's verify the permissions work' > /home/john/secret && chmod 400 /home/john/secret"}, "description": "As a root user, change the ownership of /home/john/secret to be user: john and group: admin", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/secret | awk '{if ($3 == \"john\" && $4 == \"admin\") { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chown john:admin /home/john/secret"}}, "labels": ["permission", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mary -m mary && useradd -s /bin/bash -d /home/sam -m sam && touch /home/mary/secret && touch /home/sam/secret && chown mary /home/mary/secret && chown sam /home/sam/secret && chmod 600 /home/mary/secret && chmod 600 /home/sam/secret"}, "description": "Give sam read permissions for mary's secret file and give mary read permissions for sam's secret file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u sam cat /home/mary/secret && sudo -u mary cat /home/sam/secret) | if [ \"$(cat -)\" = \"mary's secret\\nsam's secret\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "setfacl -m u:sam:r /home/mary/secret && setfacl -m u:mary:r /home/sam/secret"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && mkdir /home/shared && touch /home/shared/shared_file && chmod 777 /home/shared/shared_file && chown alice:bob /home/shared/shared_file && su - alice"}, "description": "Alice and Bob share a file located at /home/shared/shared_file which has read, write and execute permissions for all users. Alice decides to revoke Bob's access to the file. Please show how this can be done without kicking Bob out of the system or performing operations outside of their respective home directories.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u alice ls -l /home/shared/shared_file 2>&1 | grep bob) && ! (sudo -u alice cat /home/shared/shared_file 2>&1 | grep -q 'hello, world!')"}, "example": {"type": "command", "data": "sudo chmod g-r /home/shared/shared_file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma"}, "description": "Give emma full permission to a file called report located in /var/dir/ and don't let others do anything with it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /var/dir/report  | awk '{if ($1!~/^-..-------/) { exit 1; } else { exit 0; }}' && (runuser -l emma -c 'echo test >> /var/dir/report') 2>/dev/null && ls -l /var/dir/report | awk '{if ($1!~/^-....w....*/) { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "chmod 600 /var/dir/report && chown emma /var/dir/report"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "adduser user1 && adduser user2 && mkdir /home/shared && chown root:root /home/shared && chmod 770 /home/shared && usermod -aG sudo user1 && usermod -aG sudo user2"}, "description": "Create a folder `my_folder` inside `/home/shared`. Then give user1 the permission to read, write and execute in this folder, and user2 only the permission to read in this folder. Additionally, make sure that user2 cannot list the directory contents", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u user1 test -w /home/shared/my_folder && sudo -u user1 test -r /home/shared/my_folder && sudo -u user1 test -x /home/shared/my_folder && sudo -u user2 test -r /home/shared/my_folder && ! sudo -u user2 test -x /home/shared/my_folder && ! sudo -u user2 ls /home/shared/my_folder) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "cd /home/shared && mkdir my_folder && chmod 770 my_folder && chown root:user1 my_folder && chmod 775 my_folder && chmod 750 my_folder && sudo -u user1 touch /home/shared/my_folder/file1 && sudo -u user2 touch /home/shared/my_folder/file2"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && mkdir /data && chown emma:dataaccess /data && chmod 2770 /data"}, "description": "Create a new group called dataaccess and add a user emma to this group. Make /data directory accessible only to members of the group 'dataaccess', non-members can only access their own files. Also, ensure that new files and directories created under /data are owned by the group 'dataaccess'.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -ld /data | awk '{if ($1~/^drwxrwx---/) { exit 0; } else { exit 1; } }' && find /data ! -group dataaccess -type f -ls | wc -l | awk '{if ($1 == 0) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "groupadd dataaccess && usermod -a -G dataaccess emma && chmod 770 /data && setfacl -d -m g::rwx /data && setfacl -d -m o::- /data && setfacl -R -m g:dataaccess:rwX /data"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && cd /home/jack && echo 'Hello World!' > file.txt && chmod 660 file.txt && chown jack:jack file.txt && su - jack"}, "description": "Read the contents of file.txt as user 'jack'", "evaluation": {"type": "ground-truth", "answer": "Hello World!", "checking": null, "example": {"type": "command", "data": "cat /home/jack/file.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m -s /bin/bash jane && useradd -m -s /bin/bash john && mkdir -p /home/shared && echo 'anyone can read and execute' > /home/shared/open.txt && chgrp -R jane /home/shared/ && chmod -R g=u,o-rwx /home/shared/ && su - john"}, "description": "Create a new file named secret.txt in the /home/shared directory. The file should only be readable and writable by the owner, jane. Give an example of how to create the file with the right permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/shared/open.txt && cat /home/shared/secret.txt) | if [ \"$(cat -)\" = \"anyone can read and execute$'\\n'$'\\n' ]; then exit 0; else exit 1; fi && ls -l /home/shared/secret.txt | awk '{if ($1 == \"-rw-------.\") { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "touch /home/shared/secret.txt && chmod 600 /home/shared/secret.txt && chown jane /home/shared/secret.txt"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && touch file1 && echo 'content' > file1 && chmod +x file1 && chown john:john file1 &&su - john"}, "description": "Make sure that only john is able to read and execute file1 and others have no permission over the file. Check permissions of the file to ensure that it is correct.", "evaluation": {"type": "ground-truth", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/file1 | awk '{if ($1~/^-..--x---./ && $3==\"john\" && $4==\"john\") { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod o-rw /home/john/file1 && chmod o+x /home/john/file1"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && touch /home/mark/file1 && chmod 555 /home/mark && su - mark"}, "description": "You are logged in as user mark, but you cannot list the files in your home directory. How to fix this while keeping the permissions for the home directory the same?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls /home/mark | if [ \"$(cat -)\" = \"file1\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+x /home/mark"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jim -m jim && cd /home/jim && echo 'This is a secret message!' > secret_message && sudo chown jim secret_message && sudo chmod 640 secret_message && su - jim"}, "description": "You are now user 'jim'. Read the secret message file and output its contents.", "evaluation": {"type": "ground-truth", "answer": "This is a secret message!", "checking": null, "example": {"type": "command", "data": "cat /home/jim/secret_message"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/james -m james && mkdir /var/data && touch /var/data/secret && chown -R root:james /var/data && chmod -R 770 /var/data"}, "description": "Give user 'james' read/write access to the '/var/data/secret' file and make sure that the owner and group of all files inside the '/var/data' directory should remain the same; no other users except for the owner and group should have any permissions", "evaluation": {"type": "ground-truth", "answer": null, "checking": {"type": "command", "data": "su - james -c 'echo access-granted && cat /var/data/secret' | if [ \"$(cat -)\" = \"access-granted$'\\n'secret\\n\" ]; then exit 0; else exit 1; fi && ls -l /var | grep data | awk '{if ($1~/^drwxrwx---/) { exit 0; } else { exit 1; }}' && ls -l /var/data | grep secret | awk '{if ($1~/^-rwxrwx---/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 770 /var/data/secret"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/david -m david && cd /home/david && mkdir secret && echo 'top secret information' > secret/info"}, "description": "Give read access to secret/info file to only user bob and user charlie [use access control lists].", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(getfacl /home/david/secret/info | grep -q bob && getfacl /home/david/secret/info | grep -q charlie) || exit 1; if [ \"$(getfacl /home/david/secret/info | grep default)\" ]; then exit 2; else exit 0; fi"}, "example": {"type": "command", "data": "setfacl -m u:bob:r,u:charlie:r /home/david/secret/info"}}, "labels": ["permission", "acl"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && cd /home/alice && mkdir fruits && cd fruits && touch apple && touch banana && chmod 700 /home/alice"}, "description": "alice created a directory called fruits with two files inside, apple and banana but she cannot share these files with anyone. Help her by giving the group read, write and execute permissions on the directory and its contents so that members of the group could also add new files. Members outside the group shouldn't have any access to any of the files or the directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/alice | cut -d ' ' -f1-6 | grep -E '^-rwx------') && (ls -l /home/alice/fruits | cut -d ' ' -f1-6 | grep -E '^-rwxrwx---') && (ls -l /home/alice/fruits/* | cut -d ' ' -f1-6 | grep -E '^-rwxrwx---') || true"}, "example": {"type": "command", "data": "chmod 770 /home/alice/fruits && chmod 770 /home/alice/fruits/* && chown alice:alice /home/alice/fruits/*"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": ""}, "description": "What is the difference between chmod 755 and chmod u=rwx,go=rx?", "evaluation": {"type": "ground-truth", "answer": "There is no difference. Both commands result in the same permission values assigned to the user, group, and other categories - read, write, and execute for the user, and read and execute for the group and others.", "checking": null, "example": {"type": "command", "data": ""}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/developer -m developer && cd /home/developer && mkdir project && cd project && mkdir app && mkdir src && touch README.md && touch app/index.html && touch app/main.js && touch src/app.css && chmod 640 README.md && chmod 640 app/index.html && chmod 640 app/main.js && chmod 640 src/app.css"}, "description": "Give the user 'developer' write permission for the files in the 'app' directory and all its subdirectories, but protect the subdirectory 'src' so that the developer can only see the files in that directory, but not modify them. Finally, allow the developer user to change to the 'app' directory but not to the 'src' directory using the 'cd' command.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cd /home/developer/project && (touch app/test.txt && chmod 660 app/test.txt && su -c 'echo \"Hello World\" > app/test.txt' developer && cat app/test.txt | grep \"Hello World\") && (touch src/test.txt && chmod 440 src/test.txt && su -c 'echo \"Hello World\" > src/test.txt' developer && cat src/test.txt | grep \"Hello World\") && (su -c 'cd ./app' developer && su -c 'cd ./src' developer) | if [ \"$(cat -)\" = \"Hello World$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "find app -type f -exec chmod 660 {} + && chmod -R ugo-rwx src && chown -R root:root src && chmod 550 src && chmod +x app && chmod 700 ~/project && chmod g+x ~/"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && useradd -s /bin/bash -d /home/user3 -m user3 && echo 'groupadd developers' && echo 'usermod -a -G developers user1' && echo 'usermod -a -G developers user2' && echo 'find / -type f -exec chmod -c a+r {} +'"}, "description": "Create a group named developers and add user1 and user2 to it. Find all the files and directories over the file system and set the permissions to read-only by all users", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -lR / | grep -v 'drwxrwxrwx' | grep '^-') | awk '{if(!$1~/r..r..r../) {exit 1}}' && (id user1 | grep -q developers) && (id user2 | grep -q developers) || (id user3 | grep -q developers) && (ls -l / | grep '^-..r..r..' | grep -vE '^-rwxrwxrwx|^-rw-rw-rw-' | wc -l | grep -q 1)"}, "example": {"type": "command", "data": "find / -type f -exec chmod -c a+r {} + && find / -type d -exec chmod -c a+x {} + && groupadd developers && usermod -a -G developers user1 && usermod -a -G developers user2"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": ""}, "description": "What is the meaning of chmod 755?", "evaluation": {"type": "ground-truth", "answer": "chmod 755 sets the file's permissions to rwxr-xr-x, which gives the owner read, write, and execute permissions, and gives group and others read and execute permissions.", "checking": null, "example": {"type": "command", "data": ""}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir important && cd important && touch file1 && touch file2 && touch file3 && chmod 700 /home/jane && chmod 600 /home/jane/important/* && chown jane:jane /home/jane/important/* && su - jane"}, "description": "jane has some important files in /home/jane/important/ directory. Make sure that no other user except jane can access the files or enter the directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -lh /home/jane/important/ && ls -lh /home/jane/) | awk '{if ($3~/^jane$/ && ($2 ~/^700$/ || $2~/^600$/)) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod -R o-rwx /home/jane/important && chmod 700 /home/jane/important && chmod 700 /home/jane"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && chmod -R o+r /home/mark && chmod o-r /home/mark/private_file && su - mark"}, "description": "Mark has a private file in his home directory that only he should be able to read. Make sure that the owner is the only person who can read that file, and that everyone else can read all other files in his home directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/mark | awk '{if ($1~/^-rwxrwxr-x|^drwxrwxr-x/ && $9!=\"private_file\") { exit 0; } else if ($1~/^-rwx------/ && $9==\"private_file\") { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 700 /home/mark/private_file"}}, "labels": ["permission", "owner"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir -p docs/secret && echo 'Top secret information' > docs/secret/file.txt && chmod 640 docs/secret/file.txt && chown john:john docs/secret/file.txt"}, "description": "Grant user mary read-only access to the file.txt inside the 'secret' directory under 'docs', but deny any access to anyone else.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u mary cat /home/john/docs/secret/file.txt || echo 'Permission denied') | if [ \"$(cat -)\" = \"Top secret information\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/mary -m mary && usermod -aG john mary && chmod 740 /home/john/docs/secret && sudo -u john chmod 440 /home/john/docs/secret/file.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && useradd -s /bin/bash -d /home/megan -m megan && useradd -s /bin/bash -d /home/jennifer -m jennifer && echo 'emma ALL=(%staff) NOPASSWD: ALL' >> /etc/sudoers && echo 'megan ALL=(%staff) NOPASSWD: /usr/bin/chmod' >> /etc/sudoers && echo 'jennifer ALL=(%staff) NOPASSWD: /usr/bin/passwd' >> /etc/sudoers"}, "description": "Create a group called 'staff' and add Megan and Jennifer to it. Set the group ownership of '/dev/disk' to 'staff' and set its permissions to be readable and writable by members of the group 'staff' only.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "stat --format='%G %a' /dev/disk | awk '{if ($1==\"staff\" && $2==660) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "groupadd staff && usermod -a -G staff megan && usermod -a -G staff jennifer && chgrp staff /dev/disk && chmod 660 /dev/disk"}}, "labels": ["group", "permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && su - jane"}, "description": "Create a file called 'personal_info' in the home directory of user 'jane' with the following content: 'My name is Jane. I am 25 years old.' Set the file permissions to be readable and writable only by the owner of the file, and make sure that other users and groups have no permissions to read, write or execute the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/jane/personal_info | awk '{if ($1!~/^-..------$/) { exit 1; } else { exit 0; }}') && (cat /home/jane/personal_info | grep 'My name is Jane. I am 25 years old.' > /dev/null && echo 'Success')"}, "example": {"type": "command", "data": "echo 'My name is Jane. I am 25 years old.' > /home/jane/personal_info && chmod 600 /home/jane/personal_info"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/amy -m amy && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/kevin -m kevin && cd ~ && touch test-file && chmod 740 test-file && chown amy test-file && su - amy"}, "description": "You are user Amy and you need to let John and Kevin read the file 'test-file' (which you own and are the current user) but not modify it or execute it. Give them both only read permissions to this file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l john -c 'cat ~/test-file' && runuser -l kevin -c 'cat ~/test-file' && chmod 640 ~/test-file && runuser -l john -c 'echo Modified by John' ~/test-file && runuser -l kevin -c 'echo Modified by Kevin' ~/test-file) 2>/dev/null | if [ \"$(cat -)\" = \"test-file\"$'\\n'\"test-file\"$'\\n'\"\"$'\\n'\"\"$'\\n'\"\"$'\\n'\"'test-file\\nModified by John' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 444 ~/test-file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && su - alex && mkdir /home/alex/private && touch /home/alex/private/file01 && chmod 660 /home/alex/private/file01"}, "description": "Give permissions to another user named Bob to read and write to file01 located in Alex's private directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u bob cat /home/alex/private/file01 && sudo -u bob echo 'test' > /home/alex/private/file01 && cat /home/alex/private/file01) | if [ \"$(cat -)\" = \"test\"$'\\n'\"test\"$'\\n'\"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -aG alex bob"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": ""}, "description": "What file contains the default system permissions for new files or directories in Linux?", "evaluation": {"type": "multiple-choice", "options": [{"value": "/etc/permissions", "correct": false}, {"value": "/etc/defaults/permissions", "correct": false}, {"value": "/etc/login.defs", "correct": false}, {"value": "/etc/profile", "correct": false}, {"value": "/etc/adduser.conf", "correct": true}]}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && groupadd admins && usermod -a -G admins john && su - john"}, "description": "Create a new user group called 'admins' and create a user 'john' who is a member of this group. Ensure that only users in the 'admins' group can read and write the files in the '/admin' directory, which should be created with 750 (rwxr-x---) permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /admin -type f ! -perm 750 -ls && find /admin -type d ! -perm 750 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi && (getent group admins | awk -F: '{ print $4 }' | grep -q john && getfacl -p /admin | awk -F '[, ]+' '{ print $3, $4 }' | grep -q 'admin:rwx,' && getfacl -p /admin/subdir | awk -F '[, ]+' '{ print $3, $4 }' | grep -q 'admin:rwx,' && (sudo -u john touch /admin/test.txt && rm /admin/test.txt && exit 0) || exit 1)"}, "example": {"type": "command", "data": "mkdir /admin && chmod 750 /admin && chgrp admins /admin && setfacl -m g:admins:rwx /admin && mkdir /admin/subdir && chmod 750 /admin/subdir && chgrp admins /admin/subdir && setfacl -m g:admins:rwx /admin/subdir"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir documents && cd documents && touch doc1.txt && touch doc2.txt && touch doc3.txt && chmod 600 * && cd .. && mkdir presentations && cd presentations && touch pres1.ppt && touch pres2.ppt && touch pres3.ppt && chmod 640 * && cd .. && mkdir images && cd images && touch img1.png && touch img2.png && touch img3.png && chmod 644 *"}, "description": "Give read and execute permission to others for directories under /home/user/documents but not for files. Give read, write and execute access only to the owner for all files and directories under /home/user/presentations but no access to anyone else. Give read and write access to the owner and read-only access to the group and others for all files and directories under /home/user/images.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -la /home/user/ | awk '{ if ($9 ~ /documents|presentations|images/) { if ($1 ~ /^d...r.---/ && $3 == \"user\" && $4 == \"user\") { print \"OK\"; } else { print \"NOT OK\"; } } }' && ls -la /home/user/presentations | awk '{ if ($1 ~ /^...-.--w-/ && $3 == \"user\" && $4 == \"user\") { print \"OK\"; } else { print \"NOT OK\"; } }' && ls -la /home/user/images | awk '{ if ($1 ~ /^..rw.r--/ && $3 == \"user\" && $4 == \"users\") { print \"OK\" } else { print \"NOT OK\" } }'"}, "example": {"type": "command", "data": "chmod -R o+rx /home/user/documents && chmod -R 700 /home/user/presentations && chmod -R 644 /home/user/images"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "sudo apt update && sudo apt install -y vsftpd && sudo mkdir /var/ftp && sudo chmod 555 /var/ftp && sudo chown ftp /var/ftp && sudo mkdir /var/ftp/uploads && sudo chmod 777 /var/ftp/uploads && sudo systemctl restart vsftpd"}, "description": "You have been tasked with setting up an FTP server on your Linux machine. Install vsftpd and configure it so that anonymous users can only upload files to the /uploads directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -ld /var/ftp /var/ftp/uploads && sudo vsftpd -v | grep -q 'vsftpd: version 3.') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo mv /etc/vsftpd.conf /etc/vsftpd.conf.bak; sudo touch /etc/vsftpd.conf && echo 'listen=YES\nanonymous_enable=YES\nanon_upload_enable=YES\nanon_mkdir_write_enable=YES\nanon_other_write_enable=YES\nwrite_enable=YES\nlocal_umask=022\nchroot_local_user=YES\nallow_writeable_chroot=YES\npasv_min_port=40000\npasv_max_port=50000\nseccomp_sandbox=NO' | sudo tee /etc/vsftpd.conf && sudo systemctl restart vsftpd"}}, "labels": ["FTP", "permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/peter -m peter && cd /home/peter && mkdir documents && cd documents && mkdir public private && touch public/doc1 private/doc2 && chmod 777 public/private && chmod 644 public/doc1 private/doc2 && chown peter:users -R /home/peter"}, "description": "Peter wants to share the 'public' directory with his colleagues. Change the group of 'public' to 'colleagues' so that all the new files/directories created in 'public' have group 'colleagues'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/peter/documents | awk '{if ($9!=\".\"&&$9!=\"..\"&&$9!=\"private\"&&$9!~/^d/&&$6~/colleagues/) { a=1 } } END {if (a==1) { exit 0 } else { exit 1; } }'"}, "example": {"type": "command", "data": "chgrp colleagues public && chmod g+s public"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir documents && cd documents && touch file1 && touch file2 && chmod 750 .. && chmod 770 ."}, "description": "Judy and John are members of the group jane. They should be able to access all files in /home/jane/documents but should not be able to delete any files", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -ld /home/jane /home/jane/documents /home/jane/documents/file1 /home/jane/documents/file2 | awk '{if((NR==1&&$1~/^drwxr-x---/) || (NR==2&&$1~/^drwxrws--x/) || (NR==3&&$1~/^-rwxr-----/) || (NR==4&&$1~/^-rwxr-----/)){exit 0;}else{exit 1;}}'"}, "example": {"type": "command", "data": "chmod g+s /home/jane/documents && chgrp jane /home/jane/documents && chmod 770 /home/jane/documents && chmod 750 /home/jane"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && useradd -s /bin/bash -d /home/lisa -m lisa && echo 'croissants' > /home/alex/bakery && echo 'breadsticks' > /home/lisa/bakery && chmod 770 /home/alex && chmod 770 /home/lisa"}, "description": "Give Alex read and write access to Lisa's bakery file, and give Lisa read and write access to Alex's bakery file, without changing other file permissions or owners.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u alex cat /home/lisa/bakery && sudo -u lisa cat /home/alex/bakery) | if [ \"$(cat -)\" = \"breadsticks\"$'\\n''croissants' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+rw /home/lisa/bakery && chmod o+rw /home/alex/bakery"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/test-user -m test-user && echo 'This is a test file' > /home/test-user/test-file && chmod o-rwx /home/test-user/test-file"}, "description": "As root, grant read-only access for group and other users to /home/test-user directory and all of its contents, while ensuring that test-user can still read/write/execute all files and directories in that directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - test-user -c 'cat /home/test-user/test-file' && ls -l /home | grep test-user | awk '{if ($1 == \"drwxr-xr-x\" && $3 == \"test-user\" && $4 == \"test-user\" && $6 == \"test-user\") {exit 0;} else {exit 1;}}' && ls -l /home/test-user | grep test-file | awk '{if ($1 == \"-rw-r--r--\" && $3 == \"test-user\" && $4 == \"test-user\") {exit 0;} else {exit 1;}}'"}, "example": {"type": "command", "data": "chmod -R go+r /home/test-user && chmod -R u+rwx /home/test-user"}}, "labels": ["permission", "directory", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir project && cd project && mkdir src && touch src/main.c && chown john:john src/main.c && chmod 600 src/main.c"}, "description": "Give read and write access to the file /home/john/project/src/main.c to the group 'developers' while ensuring that only the owner and members of the 'developers' group can access the file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/project/src/main.c | awk '{if ($1~/^-rw-------/ && $4~/^john$/ && $5~/^developers$/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "usermod -a -G developers john && chown john:developers /home/john/project/src/main.c && chmod 660 /home/john/project/src/main.c"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && cd /home/sam && mkdir project && cd project && touch file1.txt && touch file2.txt && mkdir folder1 && touch folder1/file3.txt && chmod 700 /home/sam/"}, "description": "Set read, write and execute permissions for the owner on all files and directories in the project folder, set read and execute permission on all directories to group and others and set no permission on all files to group and others in project folder.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -lR /home/sam/project | awk '{if ($1 !~ /^[-d]rwx------$/) { print $0; exit 1; } }' && ls -ld /home/sam/project/* | awk '{if (($1 ~/^-.....r-x$/) && ($1 !~/^....-.--/)) {print $0} else {exit 1}}' && ls -ld /home/sam/project/*/ | awk '{if (($1 ~/^d....r-x$/) && ($1 !~/^....-.--/)) {print $0} else {exit 1}}'"}, "example": {"type": "command", "data": "chmod -R 700 /home/sam/project && find /home/sam/project -type d -exec chmod 755 {} + && find /home/sam/project -type f -exec chmod 600 {} +"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/david -m david && cd /home/emma && mkdir doc1 && cd doc1 && touch confidential.doc && touch public.doc && cd .. && mkdir doc2 && cd doc2 && touch highlevel.doc && touch lowlevel.doc && mkdir folder1 && cd folder1 && touch temp.txt && cd .. && mkdir folder2 && cd folder2 && touch examp.txt && cd ../.. && chown -R emma:emma /home/emma && chmod -R 750 /home/emma && chgrp -R emma /home/emma/doc* && chgrp -R john /home/emma/doc2 && chmod 770 /home/emma/doc2 && chown david /home/emma/doc2/highlevel.doc && chmod 400 /home/emma/doc1/confidential.doc && su - john"}, "description": "Navigate to the directory /home/emma/folder1/temp.txt, make a copy of the file and put it in /home/john. Then delete the original file in the folder1 directory and verify that the copy was created successfully in john's home directory without using sudo or logging in as a different user.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls /home/emma/folder1/ | grep temp.txt && ls /home/john/ | grep temp.txt"}, "example": {"type": "command", "data": "cp /home/emma/folder1/temp.txt /home/john/ && rm /home/emma/folder1/temp.txt"}}, "labels": ["permission", "file-management"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && cd /home/mike && mkdir secret && touch secret/file && chmod 664 secret/file && chown mike:mike secret/file && su - mike"}, "description": "In /home/mike/secret, create a new file called message and give it the content 'I am a secret message'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cd /home/mike/secret && cat message | grep 'I am a secret message' | if [ \"$(cat -)\" = \"I am a secret message\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "cd /home/mike/secret && echo 'I am a secret message' > message"}}, "labels": ["permission", "file creation"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && mkdir /shared && chown alice /shared"}, "description": "Alice wants to be able to create files in /shared and have Bob be able to read them, but Bob should not be able to write to or modify the files. However, Alice should still be able to modify her own files. Set the appropriate permissions to accomplish this.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "echo 'hello world' > /shared/testfile && su - bob -c 'cat /shared/testfile' | if [ \"$(cat -)\" = \"hello world\"$'\\n' ]; then exit 0; else exit 1; fi && (su - alice -c 'echo new data >> /shared/testfile' && su - bob -c 'echo new data >> /shared/testfile' 2>/dev/null && echo 1) || echo 0 | if [ \"$(cat -)\" = \"0\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 764 /shared && chmod g+s /shared"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home && mkdir files && cd files && touch file1 && touch file2 && chmod 740 file1 && chmod 600 file2"}, "description": "Give read access to file2 for group members and others but leave the files' owner with full permissions", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l --color=never /home/files | grep file2 | awk '{if ($1~/^-rw-rw----/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 644 file2"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'Hello world' > greeting.txt && chmod 400 greeting.txt && chown john greeting.txt && su - john"}, "description": "read the content of ~/greeting.txt file without changing its permission or ownership", "evaluation": {"type": "ground-truth", "answer": "Hello world", "checking": null, "example": {"type": "command", "data": "cat ~/greeting.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/tim -m tim && cd /home/tim && mkdir secret && echo 'This is a secret file' > secret/file.txt && chmod 700 secret && chmod 400 secret/file.txt"}, "description": "Give permissions to a group called 'secretaccess' to read the file /home/tim/secret/file.txt, but no other files in the directory should be accessible to this group.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/tim/secret | grep -v file.txt | awk '{if ($1~/^drw./) { exit 1; } else { exit 0; }}') && (ls -l /home/tim/secret/file.txt | awk '{if ($1~/^-r--------/) { exit 0; } else { exit 1; }}') && (groups secretaccess | grep -c secretaccess) | if [ \"$(cat -)\" = \"1\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G secretaccess tim && chown :secretaccess /home/tim/secret/file.txt && chmod 440 /home/tim/secret/file.txt"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/carol -m carol && useradd -s /bin/bash -d /home/david -m david && touch /home/alice/file && touch /home/bob/file && touch /home/carol/file && touch /home/david/file && chown alice:bob /home/alice/file && chown bob:carol /home/bob/file && chown carol:david /home/carol/file && chmod 700 /home/alice && chmod 770 /home/bob && chmod 777 /home/carol && chmod 700 /home/david"}, "description": "Given the following directory structure:\n\n- /home\n  - alice\n    - file\n  - bob\n    - file\n  - carol\n    - file\n  - david\n    - file\n\n(1) User alice should be able to read and write only to /home/alice/file, and not be able to read or write to any other file in any other directory. (2) User bob should be able to read and write only to /home/bob/file and /home/alice/file, and not be able to read or write to any other file or directory. (3) User carol should be able to read and write only to /home/carol/file and /home/bob/file and /home/alice/file, and not be able to read or write to any other file or directory. (4) User david should be able to read and write to any file in any directory. Create the necessary permissions to ensure the above restrictions are in place.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l alice -c 'echo hello >> /home/alice/file' || echo \"failure alice\" )&& (runuser -l alice -c 'echo hello >> /home/bob/file' 2>/dev/null && echo \"failure alice not blocked by bob\") || (runuser -l alice -c 'echo hello >> /home/carol/file' 2>/dev/null && echo \"failure alice not blocked by carol\") || (runuser -l alice -c 'echo hello >> /home/david/file' 2>/dev/null && echo \"failure alice not blocked by david\") && (runuser -l bob -c 'echo hello >> /home/bob/file' && echo \"failure bob\") || (runuser -l carol -c 'echo hello >> /home/carol/file' && echo \"failure carol\") || runuser -l david -c 'echo hello >> /home/alice/file && echo hello >> /home/bob/file && echo hello >> /home/carol/file && echo hello >> /home/david/file'"}, "example": {"type": "command", "data": "chmod 700 /home/alice && chmod 770 /home/bob && chmod 770 /home/alice/file && chmod 700 /home/carol && chmod 660 /home/alice/file /home/bob/file && chmod 660 /home/bob/file /home/carol/file && chmod 660 /home/carol/file /home/david/file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/developer -m developer && chmod -R 770 /home/developer/ && chown -R developer:developer /home/developer/"}, "description": "Create a new developer user with full access to /home/developer directory and its all subdirectories, and set the correct ownership and permission", "evaluation": {"type": "ground-truth", "answer": "", "checking": null, "example": {"type": "command", "data": "ls -l /home/developer/"}}, "labels": ["permission", "user", "ownership"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "touch file1 && chmod 555 file1 && mkdir dir1 && chmod 775 dir1"}, "description": "What are the permissions of file1 and dir1?", "evaluation": {"type": "ground-truth", "answer": "file1: -r-xr-xr-x | dir1: drwxrwxr-x", "checking": null, "example": {"type": "command", "data": "ls -l"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jason -m jason && echo 'jason is my name' >> /home/jason/info && chmod 400 /home/jason/info"}, "description": "Display the contents of /home/jason/info without changing its permissions", "evaluation": {"type": "ground-truth", "answer": "jason is my name", "checking": null, "example": {"type": "command", "data": "cat /home/jason/info"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/dev -m dev && cd /home/dev && mkdir project && cd project && touch file1 && chmod 777 file1"}, "description": "(a) Set the owner of the /home/dev/project to root. (b) Set the group of the /home/dev/project to the dev user's primary group. (c) Set the permissions so that only the owner and the group can change the file. (d) Prove that the requirements have been met without needing to switch to the root user.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -ld /home/dev/project | awk '{print $3,$4,$1}' | grep '^dev dev') && (ls -ld /home/dev/project | awk '{print $1}' | cut -c5 | grep -q x) && sudo -u dev touch /home/dev/project/file2 && ls -l /home/dev/project | awk '{if(NR==2) print $3,$4,$1;if(NR>2) print $3,$4,$1,$NF;}'"}, "example": {"type": "command", "data": "sudo chown root /home/dev/project && sudo chgrp dev /home/dev/project && sudo chmod 770 /home/dev/project"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/tom -m tom && cd /home/tom && touch file1 && touch file2 && chown tom:tom file1 && chmod 640 file1 && chown tom:tom file2 && chmod 440 file2 && cd / && useradd -s /bin/bash -d /home/mike -m mike && echo 'tom ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && su - mike"}, "description": "List the files in /home/tom, but you do not have permission to view the contents of file1 and you have permission to view the contents of file2", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -l | grep -q -E '(tom.*)?ALL' && ls -l /home/tom | awk '{if ($1~/^-..-..--T/) { exit 1; } else if ($1~/^-..r..---/) { exit 1; } else { exit 0; }}') && (sudo -n cat /home/tom/file2 && sudo -n cat /home/tom/file1 2>&1 | grep -q -i 'permission denied') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "ls -l /home/tom"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && useradd -s /bin/bash -d /home/sara -m sara && mkdir /secret && touch /secret/topsecret && echo 'top secret info' > /secret/topsecret && chown root /secret/topsecret && chmod 600 /secret/topsecret && chgrp mark /secret"}, "description": "Given the above scenario, allow mark to read only the contents of the /secret directory and its subdirectories (including /secret/topsecret), but not modify it. Also, sara should not have any access to it whatsoever.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l mark -c 'ls -l /secret && cat /secret/topsecret' | awk '{if ($1~/^-..r..---/ && $5==2 && $6==\"mark\") { exit 0; } else { exit 1; }}' && runuser -l sara -c 'ls /secret && cat /secret/topsecret' 2>/dev/null | grep 'Permission denied') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+rx /secret && chmod o-rwx /secret"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/kelly -m kelly && cd /home/kelly && echo 'this is a secret' > secret.txt && chmod 600 secret.txt && chown kelly secret.txt &&su - kelly"}, "description": "As Kelly, can you let 'stella' read 'secret.txt' without changing the file's owner?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - stella -c 'cat /home/kelly/secret.txt' && cat /home/kelly/secret.txt) | if [ \"$(cat -)\" = \"this is a secret\"$'\\n'\"this is a secret\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 secret.txt && sudo chgrp stella secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && touch /home/john/file && chmod 550 /home/john/file && chown john:john /home/john/file"}, "description": "Change permissions of the /home/john/file so that only members of the group 'john' can read it, john can write to it, and nobody can execute it, including john", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/file | awk '{if ($1~/^-..rw----/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 640 /home/john/file"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/mike -m mike && useradd -s /bin/bash -d /home/tom -m tom && useradd -s /bin/bash -d /home/david -m david && cd /home && mkdir Files && cd Files && touch file1 && touch file2 && touch file3 && chown john:john file1 && chown john:john file2 && chown :mike file3 && chmod 400 file1 && chmod 500 file2 && chmod 600 file3"}, "description": "There are three files lying under ~/Files that john owns file1 and file2, mike owns file3. john wants to allow tom and david to access file2, but restrict mike's access to file3. Set permissions accordingly.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/Files | grep file2 | awk '{if ($1~/^-r..--r--/) { exit 0; } else { exit 1; } }') && (ls -l /home/Files | grep file3 | awk '{if ($1~/^-r.-r---/) { exit 0; } else { exit 1; } }') && (runuser -l tom -c 'cat /home/Files/file2' && runuser -l tom -c 'echo tom_allowed') | if [ \"$(cat -)\" = \"tom_allowed\"$'\\n'\"tom_allowed\" ]; then exit 0; else exit 1; fi && runuser -l mike -c 'cat /home/Files/file3' && (runuser -l david -c 'cat /home/Files/file2' && exit 1 || exit 0) && (runuser -l david -c 'echo david_allowed' && exit 0 || exit 1)"}, "example": {"type": "command", "data": "chmod 440 /home/Files/file2 && chmod 460 /home/Files/file3 && chown :tom /home/Files/file2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && mkdir /home/john/folder && touch /home/john/folder/file.txt && chmod 766 /home/john/folder/file.txt"}, "description": "Change permissions of /home/john/folder/file.txt so that only the owner can read and write to it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/folder/file.txt | awk '{if ($1~/^-rw-------$/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 600 /home/john/folder/file.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'secret message' > secret && chmod 600 secret && chown john secret && su - john"}, "description": "Read the content of ~/secret without changing its permission or ownership.", "evaluation": {"type": "ground-truth", "answer": "secret message", "checking": null, "example": {"type": "command", "data": "cat ~/secret"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/guest -m guest && cd /home/guest && mkdir app && cd app && mkdir scripts && touch script7.py && chmod 777 script7.py && touch script8.py && chmod 000 script8.py"}, "description": "Change the permission of script8.py from -r-------- to -rw-r--r-- without changing the permission of script7.py", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/guest/app/scripts/ | awk '{if (NR==1 && $1~/^-r.-r-----/) { exit 1; } if (NR==2 && $1!~/^-rw.-r--r--/) { exit 1; } } END { if (NR==2) { exit 0;} else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod u+w,g+r,o+r /home/guest/app/scripts/script8.py"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/guest -m guest && cd /home/guest/ && mkdir files && echo 'Top secret file' > files/secret.txt && chmod 700 -R files && chown -R guest:guest files"}, "description": "As a root user, you want to grant read-only access to the file 'secret.txt' for the user 'jim'. The user should not be able to modify the file in any way, but should be able to see its contents.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - jim -c 'cat /home/guest/files/secret.txt') | if [ \"$(cat -)\" = \"Top secret file\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G guest jim && chmod 444 /home/guest/files/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && cd /home/emma && mkdir docs && cd docs && mkdir confidential && mkdir public && touch doc1 && touch doc2 && touch public/doc3 && touch confidential/doc4 && chmod -R 770 /home/emma && chown -R emma:emma /home/emma"}, "description": "Make the ~/docs/public directory readable and writable by all users on the system, but restrict read and write access to the ~/docs/confidential directory only to the member of the group 'confidential'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/emma/docs -mindepth 1 -maxdepth 1 -type d ! -perm 777 | grep -q confidential) && (find /home/emma/docs/public -type d ! -perm 777 -o -type f ! -perm 666 | grep -q public) && (find /home/emma/docs/confidential -type d ! -perm 770 -o -type f ! -perm 660 | grep -q confidential)"}, "example": {"type": "command", "data": "chmod -R 0770 /home/emma/docs && chown -R emma:confidential /home/emma/docs/confidential"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && su - sam"}, "description": "How to give execute permission to a file in Linux?", "evaluation": {"type": "ground-truth", "answer": "chmod +x filename", "checking": null, "example": {"type": "command", "data": "touch script.sh && chmod +x script.sh && ./script.sh"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && useradd -s /bin/bash -d /home/noah -m noah && echo 'I am powerful' > /home/emma/file1 && chmod 400 /home/emma/file1 && chown emma:emma /home/emma/file1 && echo 'I am powerless' > /home/noah/file2 && chmod 777 /home/noah/file2 && chown noah:noah /home/noah/file2"}, "description": "What is the output when the user 'noah' tries to read the file '/home/emma/file1'?", "evaluation": {"type": "ground-truth", "answer": "Permission denied", "checking": null, "example": {"type": "command", "data": "su - noah -c 'cat /home/emma/file1'"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir documents && cd documents && mkdir personal && mkdir work && touch personal/file1 && touch work/file2 && touch file3 && chmod -R 700 /home/john/documents && chown -R john:john /home/john/documents"}, "description": "Set permissions to ensure that only the user 'john' can access or modify the contents of the 'personal' directory and the files within it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -ld /home/john/documents && ls -ld /home/john/documents/personal && ls -l /home/john/documents/personal/file1) | awk '{if ($3==\"john\" && $4==\"john\" && $1~/^drwx---/ && $9~/^-rw/ && $10==\"john\" && $11==\"john\" && $1~/^-rw/ ) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 700 /home/john/documents/personal && chmod 600 /home/john/documents/personal/*"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && mkdir /data && cd /data && touch file1 && touch file2 && chmod 640 file1 && chmod 660 file2 && chown jane file1 && chown root:root file2"}, "description": "Set permissions so that Jane can only read /data/file1 and can edit /data/file2. No other user should have access to either file. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(getfacl -p /data/file1 | grep jane:---:r-- && getfacl -p /data/file2 | grep jane:---:rw-) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "setfacl -m u:jane:r /data/file1 && setfacl -m u:jane:rw /data/file2 && chmod 640 /data/file1 && chmod 660 /data/file2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /var/log/app && useradd -s /bin/bash -d /home/user -m user && touch /var/log/app/app.log && chown user:user /var/log/app/app.log && chmod 640 /var/log/app/app.log && su - user"}, "description": "As a user, how can I write to /var/log/app/app.log?", "evaluation": {"type": "multiple-choice", "answer": "Use the `sudo` command", "options": ["Change the permissions of /var/log/app/app.log to 777", "Use the `chown` command to make the user the owner of /var/log/app/app.log", "Use the `sudo` command", "Switch to the root user and write directly to /var/log/app/app.log"]}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jackson -m jackson && echo 'password123' | passwd jackson --stdin && touch /home/jackson/sensitive_info.txt && chmod 600 /home/jackson/sensitive_info.txt && chown jackson /home/jackson/sensitive_info.txt"}, "description": "Only allow user 'jackson' to read sensitive_info.txt. Group and others should not have any access to it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jackson cat /home/jackson/sensitive_info.txt && sudo -u notjackson cat /home/jackson/sensitive_info.txt) | if [ \"$(cat -)\" = \"This file contains sensitive information.\"$'\\n'$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o-rwx,g-rwx /home/jackson/sensitive_info.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && usermod -a -G sudo john && echo 'john:password' | chpasswd"}, "description": "How to grant 'john' permission to run any command without password?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -l -U john | grep 'ALL=(ALL:ALL) NOPASSWD:ALL' | if [ \"$(cat -)\" = \"john ALL=(ALL:ALL) NOPASSWD:ALL\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'john ALL=(ALL:ALL) NOPASSWD:ALL' | sudo tee -a /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'secret' > file && chmod 600 file && chown john file &&su - john"}, "description": "When logged in as user john, how can you prevent other users from viewing or modifying the file in john's home directory?", "evaluation": {"type": "command", "answer": "chmod 600 file", "checking": null, "example": {"type": "command", "data": "chmod 600 file"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /files && cd /files && touch file1 && touch file2 && touch file3 && chmod u+rwx file1 && chmod g+rx file2 && chmod o+r file3"}, "description": "Modify the permissions so that only the owner can read, write and execute file1, the owner and group members can read and execute file2, and everyone else can only read file3", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l file1 | awk '{if ($1!~/^-rwx------$/) { exit 1; } else { exit 0; } }') && (ls -l file2 | awk '{if ($1!~/^-rwxr-x---$/) { exit 1; } else { exit 0; } }') && (ls -l file3 | awk '{if ($1!~/^-r--r--r--$/) { exit 1; } else { exit 0; } }') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 700 file1 && chmod 750 file2 && chmod 444 file3"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && useradd -s /bin/bash -d /home/tom -m tom && echo 'tom ALL=(sam) NOPASSWD:/bin/cat' >> /etc/sudoers && echo 'root ALL=(ALL) ALL' >> /etc/sudoers && echo 'sam ALL=(ALL) /usr/bin/apt-get, /usr/bin/apt, /bin/cat' >> /etc/sudoers"}, "description": "Give tom the ability to use sudo and cat to view the content of the file /home/sam/secret.txt, but prevent him from accessing any other files owned by sam.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u tom cat /home/sam/secret.txt | if [ \"$(cat -)\" = \"this is a secret message\"$'\\n' ]; then exit 0; else exit 1; fi && (sudo -u tom ls /home/sam | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi)"}, "example": {"type": "command", "data": "chmod 700 /home/sam && chmod 600 /home/sam/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && touch /home/emma/notes && chown emma /home/emma/notes && echo 'This is a private note.' > /home/emma/notes"}, "description": "Give mike permission to read Emma's notes file, but not write to it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u mike cat /home/emma/notes && sudo -u mike sh -c 'echo Attempt to write.; echo \"This should not work\" > /home/emma/notes' 2>&1 | grep 'Permission denied' | wc -l) | if [ \"$(cat -)\" = \"1\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chown emma:mike /home/emma/notes && chmod 644 /home/emma/notes"}}, "labels": ["permission", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/daniel -m daniel && cd /home/daniel && touch secret && chmod 400 secret && find ~/ -type d -print -exec chmod 700 {} \\; && su - daniel"}, "description": "You are daniel and you need to change the permissions of the file /home/daniel/secret to 777. However, you cannot directly change the permission of the file itself. How can you do this?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/daniel/secret | awk '{if ($1~/^-r--------$/) { exit 0; } else { exit 1; }}') && (ls -l /home/daniel | awk '{if ($1~/^drwx------$/) { exit 0; } else { exit 1; }}') && (ls -l /home | awk '{if ($1~/^drwx--x--x$/) { exit 0; } else { exit 1; }}') && (chmod 777 /home/daniel/secret && ls -l /home/daniel/secret | awk '{if ($1~/^-rwxrwxrwx$/) { exit 0; } else { exit 1; }}') | if [[ \"$(cat -)\" == \"\" ]]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo chmod o+w /home && sudo chmod o+x /home/daniel && sudo chmod o+w /home/daniel && cd /home/daniel && touch ../tmp_secret && chmod 777 ../tmp_secret && mv ../tmp_secret ./secret"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/charlie -m charlie && useradd -s /bin/bash -d /home/dave -m dave && mkdir /var/mystuff && cd /var/mystuff && touch myfile.txt && chown dave:root myfile.txt && chmod 660 myfile.txt"}, "description": "Only alice, bob and charlie should be able to read myfile.txt. Add them to a common group and change the file permissions accordingly.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l alice -c 'cat /var/mystuff/myfile.txt' && runuser -l bob -c 'cat /var/mystuff/myfile.txt' && runuser -l charlie -c 'cat /var/mystuff/myfile.txt' && runuser -l dave -c 'cat /var/mystuff/myfile.txt') | if [ \"$(cat -)\" = \"myfile contents\"$'\\n'\"myfile contents\"$'\\n'\"myfile contents\"$'\\n'\"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd mygroup && usermod -a -G mygroup alice && usermod -a -G mygroup bob && usermod -a -G mygroup charlie && chmod 640 /var/mystuff/myfile.txt && chgrp mygroup /var/mystuff/myfile.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && cd /home/sam && mkdir work && cd work && touch file1 && touch file2 && touch file3 && chmod 740 file1 && chmod 640 file2 && chmod 600 file3 && chown sam:sam * && su - sam"}, "description": "Sam has three files: file1, file2, and file3. Set permission for each file so that only Sam can read and write them, the group 'samagents' can read file1 and file2, and the other users don't have any permission to any file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l file1 | awk '{if ($1~/^-rwxr-----.+/) { exit 0; } else { exit 1; }}') && (ls -l file2 | awk '{if ($1~/^-rw-r-----.+/) { exit 0; } else { exit 1; }}') && (ls -l file3 | awk '{if ($1~/^-rw-------.+/) { exit 0; } else { exit 1; }}')"}, "example": {"type": "command", "data": "chmod 700 file3 && chmod 640 file2 && chmod 640 file1 && chgrp samagents file1 file2 && chmod g+r file1 file2 && chmod u+rw file1 file2 file3"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "apt update && apt install nginx -y"}, "description": "How would you change the ownership of nginx's log folder to user 'webadmin' and group 'www-data'?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -ld /var/log/nginx/ | awk '{if ($3==\"webadmin\" && $4==\"www-data\") { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chown -R webadmin:www-data /var/log/nginx/"}}, "labels": ["permission", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir project && cd project && touch file1 && touch file2 && touch file3 && chmod u+rw file1 && chmod g+r file2 && chmod o-rwx file3"}, "description": "Give read and write permissions only to the user 'jane' and read permission only to the group 'jane' for the files 'file1' and 'file2' inside the directory '/home/jane/project'. Ensure that other users and groups have no permissions for the files. Leave the permissions for 'file3' as it is.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/jane/project -type f ! -path /home/jane/project/file3 ! -perm -600 -ls && find /home/jane/project -type f ! -path /home/jane/project/file3 ! -perm 460 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 /home/jane/project/file1 && chown jane:jane /home/jane/project/file2 && chmod o-rwx /home/jane/project/file{1,2}"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir personal && touch personal/docs && chmod o-rwx personal/docs && su - john"}, "description": "Create a user named John with a personal directory that contains sensitive files. Make sure that these files are only accessible to John, and not to anyone else in the system.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/ | grep john | awk '{if ($1~/^drwx------/) { exit 0; } else { exit 1; } }' && ls -l /home/john/personal/ | awk '{if ($1~/^-..------/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 700 /home/john && chmod 600 /home/john/personal/docs"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sally -m sally && echo '111111' > /home/sally/password && chown sally:sally /home/sally/password && chmod 400 /home/sally/password && su - sally"}, "description": "Create a new file 'secure' in Sally's home directory and give the user and group read, write & execute permissions. Read the password from /home/sally/password file and write the password into 'secure' file as the first line. Make sure that no one other than Sally can read the password, but anyone logged in as Sally can read it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo ls -l /home/sally | grep secure | awk '{if ($1~/^-...rwx---/) { exit 0; } else { exit 1; } }' && sudo ls -l /home/sally/secure/password | awk '{if ($1~/^-..--------/) { exit 0; } else { exit 1; } }' && sudo cat /home/sally/secure | head -1 | awk '{if ($1~/^111111$/) { exit 0; } else { exit 1; } }') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "touch /home/sally/secure && chmod 700 /home/sally/secure && chmod 600 /home/sally/password && echo \"$(cat /home/sally/password)\" >> /home/sally/secure && chmod 700 /home/sally/secure && chown sally:sally /home/sally/secure && chown sally:sally /home/sally/password"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && echo 'SECRET' > /home/jane/important && chmod 040 /home/jane/important && chmod 050 /home/jane"}, "description": "Jane has created an important file but forgot to give permission to read. Users must not be able to modify or remove the important file but only read it. Permissions of other files and directories should not be modified. Help Jane fix the issue.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "test ! -w /home/jane/important && test ! -x /home/jane/important && cat /home/jane/important"}, "example": {"type": "command", "data": "chmod 044 /home/jane/important"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane/ && mkdir -p public/private && touch public/file1.txt public/file2.txt private/file3.txt && chmod 777 public private && chmod 755 ."}, "description": "Jennie is a new employee and needs access to Jane's public folder. Give her read, write, and execute permissions to all files in public folder and only read and execute permissions to the directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(getfacl /home/jane/public/file1.txt | awk '{print $4,$5}' | grep -v 'mask::' | grep 'jennie:rwx') && (getfacl /home/jane/public | awk '{print $4,$5}' | grep -v 'mask::' | grep 'jennie:r-x')"}, "example": {"type": "command", "data": "setfacl -R -m u:jennie:rwx /home/jane/public && setfacl -R -m u:jennie:r-x /home/jane/public"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/joe -m joe && cd /home/joe && mkdir testdir && touch testfile && chown joe:joe testdir && chown joe:joe testfile"}, "description": "Change the ownership of testdir to user 'smith' and group 'smiths'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -ld /home/joe/testdir | awk '{if ($3==\"smith\" && $4==\"smiths\") { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chown smith:smiths /home/joe/testdir"}}, "labels": ["ownership", "permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && chmod -R 700 /home/alice && mkdir /home/alice/shared && chown alice:bob /home/alice/shared && chmod 770 /home/alice/shared"}, "description": "Create a shared directory in Alice's home directory that will be accessible by both Alice and Bob, but nobody else. Make sure only Alice can add new files or directories to this shared directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/alice/shared | awk '{if($1!~/^d.*rwxrwx---/ || $3!~/^alice$/ || $4!~/^bob$/) {exit 1}}' && (su alice -c 'echo \"test file\" > /home/alice/shared/test_file' && su bob -c 'ls /home/alice/shared/test_file' && su alice -c 'touch /home/alice/shared/new_file' && su bob -c 'ls /home/alice/shared/new_file' && su bob -c 'echo \"test\" > /home/alice/shared/test_file' && cat /home/alice/shared/test_file) | if [ \"$(cat -)\" = \"test\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+s /home/alice/shared"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /securedir && chown root:root /securedir && chmod 700 /securedir && echo 'top secret data' > /securedir/file.txt && chown root:root /securedir/file.txt && chmod 600 /securedir/file.txt && useradd john && useradd jane"}, "description": "Give john and jane access to /securedir and allow them to read the file.txt inside it, but prevent them from listing the contents of /securedir or modifying file.txt. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - john -c 'cat /securedir/file.txt' && su - jane -c 'cat /securedir/file.txt') | if [ \"$(cat -)\" = \"top secret data\"$'\\n'\"top secret data\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chown john:john /securedir && chmod 750 /securedir && chmod 640 /securedir/file.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/larry -m larry && cd /home/larry && touch secrets && echo 'ultra secret information' > secrets"}, "description": "Give group `people` permission to read the file 'secrets' under larry's home directory without adding them to the `larry` group.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(getfacl /home/larry/secrets | grep people) | if [ \"$(cat -)\" != \"user::rw-\ngroup::---\nother::---\nuser:people:r--\n\" ]; then exit 1; else exit 0; fi"}, "example": {"type": "command", "data": "groupadd people && usermod -a -G people larry && chmod g+x /home/larry && chown larry:people /home/larry/secrets && chmod 640 /home/larry/secrets"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/anna -m anna && useradd -s /bin/bash -d /home/tom -m tom && cd /home/anna && echo 'hello world' > file && chown tom file && chgrp tom file"}, "description": "Tom should be able to read and modify Anna's file, but no one else should be able to modify it. What permissions should be set on the file?", "evaluation": {"type": "multiple-choice", "options": ["644", "664", "740", "750"], "answer": "740", "checking": null, "example": {"type": "command", "data": "chmod 740 /home/anna/file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'no access for you, alice' > /home/john/file && chmod 400 /home/john/file &&su - alice"}, "description": "Alice cannot access john's file. What should Alice do to get access to the john's file?", "evaluation": {"type": "ground-truth", "answer": "Alice should ask John to add her to the list of users that can access the file, or change the permissions on the file to grant access to Alice.", "checking": null, "example": {"type": "description", "data": "There is no example for this question type"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && useradd -s /bin/bash -d /home/amy -m amy && useradd -s /bin/bash -d /home/max -m max && echo 'password' | passwd --stdin sam && echo 'password' | passwd --stdin amy"}, "description": "Give users sam and amy permission to read and execute, but not write, on the files in /var/www/html, and give user max full access to this directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u sam ls -l /var/www/html | awk '{if ($1~/^d/ || $1~/^.r..-..-.+$/) { exit 1; } }' && sudo -u amy ls -l /var/www/html | awk '{if ($1~/^d/ || $1~/^.r..-..-.+$/) { exit 1; } }' && sudo -u max ls -l /var/www/html | awk '{if ($1~/^d/ || $1~/^..rwx.*/) { exit 1; } }') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod -R 555 /var/www/html && chmod -R u+w /var/www/html && chown -R max: /var/www/html"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && touch /home/john/testfile && chmod 700 /home/john && chown john /home/john/testfile && su - john"}, "description": "Explain why you cannot access /home/john/testfile despite having created it yourself, and suggest a resolution", "evaluation": {"type": "writing", "answer": ["The problem is with the permission setting of the /home/john directory. Although the testfile was created with the correct permissions, the execution bit for the directory is missing, which means that the user cannot access or list the contents of the directory.", "To resolve this, the permission setting of the /home/john directory can be changed using the command 'chmod +x /home/john'. This will add the execute bit to the directory, allowing the user to access the testfile."], "example": null}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/user && useradd -s /bin/bash -d /home/user -m user"}, "description": "Change the owner of a file named 'important.txt' to 'user' and give the owner read, write and execute permissions. Give the group 'staff' read and execute permissions and everyone else no permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l / | grep important.txt | awk '{if ($1~/^-rwxr-x---/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "touch /home/user/important.txt && chown user:staff /home/user/important.txt && chmod 750 /home/user/important.txt"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/testuser1 -m testuser1 && useradd -s /bin/bash -d /home/testuser2 -m testuser2 && useradd -s /bin/bash -d /home/testuser3 -m testuser3 && useradd -s /bin/bash -d /home/testuser4 -m testuser4 && mkdir /testfolder && touch /testfolder/testfile && chmod u=rw,g=rw,o=rw /testfolder/testfile && chown testuser1 /testfolder/testfile"}, "description": "Create a new user, and give the user read and write access to /testfolder/testfile", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - testuser1 -c 'echo test > /testfolder/testfile' && cat /testfolder/testfile) | if [ \"$(cat -)\" = \"test\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/newuser -m newuser && chown -R newuser /testfolder && chmod u=rw,g=rw,o=rw /testfolder/testfile"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/josh -m josh && cd /home/josh && touch secret && chmod 400 secret && echo 'Super secret message' > secret"}, "description": "Allow user tom to read the contents of the file '/home/josh/secret', but don't allow him to modify or delete the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - tom -c 'cat /home/josh/secret'"}, "example": {"type": "command", "data": "chmod u+r /home/josh/secret && chmod o-rwx /home/josh/secret"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /work && chmod 772 /work"}, "description": "You have a directory called /work that is shared by the group \"workers\". When workers create new files or directories in /work, make sure the files and directories inherit the group ownership and that the group has write permissions. Also ensure that Tom can read files/directories that are not owned by him in /work.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -ld /work | awk '{if ($1~/^drw..r..w./) { exit 0; } else { exit 1; } }' && touch /work/test && ls -l /work/test | awk '{if ($4~/^workers/ && $1~/^-..w....w./) { exit 0; } else { exit 1; } }' && chown tom:workers /work/test && su tom -c 'ls -l /work/test' | awk '{if ($4~/^workers/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod g+s /work && chgrp workers /work && chmod g+w /work"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && useradd -s /bin/bash -d /home/jack -m jack && echo 'lisa ALL=(jack) /usr/bin/cut' >> /etc/sudoers"}, "description": "Allow user 'lisa' to execute the 'cut' command as user 'jack' without needing a password, and test it by cutting the first column of /etc/passwd file and redirect it to a new file, /home/lisa/newfile", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "diff -q /home/lisa/newfile <(sudo -u jack cut -f1 -d: /etc/passwd)"}, "example": {"type": "command", "data": "sudo -u jack cut -f1 -d: /etc/passwd > /home/lisa/newfile"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir testdir && touch testdir/testfile && chmod 000 testdir && chown john testdir/testfile && su - john"}, "description": "Access the file ~/testdir/testfile without changing the permissions of ~/testdir and ~/testdir/testfile", "evaluation": {"type": "ground-truth", "answer": "Permission denied", "checking": null, "example": {"type": "command", "data": "sudo chmod o+x /home/john && sudo chmod o+x /home/john/testdir && cat /home/john/testdir/testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/sara -m sara && useradd -s /bin/bash -d /home/mary -m mary && echo 'test123' > /home/john/testfile && chmod 440 /home/john/testfile && chown john:john /home/john/testfile && cd /home/sara && ln -s /home/john/testfile testlink && ln -s /home/mary testdirlink"}, "description": "Sara and Mary have access to John's testfile through a symlink and directory symlink respectively. Prevent them from accessing John's testfile while allowing John to continue having read access to it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/sara/testlink && cat /home/mary/testdirlink/testfile) | if [ \"$(cat -)\" = \"test123\"$'\\n'\"test123\" ]; then exit 1; else exit 0; fi"}, "example": {"type": "command", "data": "chmod 400 /home/john/testfile && chattr +i /home/john/testfile"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": ""}, "description": "What is the difference between chmod 777 and chmod u=rwx,g=rwx,o=rwx?", "evaluation": {"type": "ground-truth", "answer": "There is no difference. Both commands give read, write, and execute permissions to the user, group, and others.", "checking": null, "example": {"type": "command", "data": ""}}, "labels": ["permission", "command"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "apt update && apt install sudo -y && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/bob -m bob && cd /home && mkdir data && cd data && touch file1 && touch file2 && chmod 250 . && chmod 640 * && chown john:john file1"}, "description": "Make bob able to read file1 but not able to read file2", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l bob -c 'cat /home/data/file1' && runuser -l bob -c 'cat /home/data/file2') | if [ \"$(cat -)\" = \"file1$'\\n'\n  cat: /home/data/file2: Permission denied\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o-r /home/data/file2 && chown john:bob /home/data/file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && echo 'What is the default permission for files created using touch command?' > /home/bob/question.txt"}, "description": "What is the default permission for files created using touch command? Find the answer and append it to /home/bob/answer.txt file.", "evaluation": {"type": "ground-truth", "answer": "644", "checking": null, "example": {"type": "command", "data": "cd /home/bob && echo '644' >> answer.txt"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && echo 'The quick brown fox jumps over the lazy dog' > story.txt && chmod 664 story.txt && chown bob:users story.txt &&su - bob"}, "description": "Read the 'story.txt' file. Which user has the permission to read it?", "evaluation": {"type": "multiple-choice", "answer": "bob", "options": ["bob", "root", "users"], "checking": null, "example": {"type": "command", "data": "cat story.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/amy -m amy && su - amy"}, "description": "Change the permission of ~/ to 750 and ~/notes.txt to 640. Make sure the owner and group owner are both amy for both files.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -ld ~/ | awk '{if ($1 == \"drwxr-x---\" && $3 == \"amy\" && $4 == \"amy\") {print \"\"} else {exit 1}}' && ls -l ~/notes.txt | awk '{if ($1 == \"-rw-r-----\" && $3 == \"amy\" && $4 == \"amy\") {print \"\"} else {exit 1}}'"}, "example": {"type": "command", "data": "chmod 750 ~/ && chmod 640 ~/notes.txt && chown amy:amy ~/ ~/notes.txt"}}, "labels": ["permission", "ownership"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/janet -m janet && mkdir /home/janet/documents && chgrp janet /home/janet/documents && chmod 770 /home/janet/documents && touch /home/janet/documents/file1 && touch /home/janet/documents/file2 && chown janet:janet /home/janet/documents/file1 && chmod 664 /home/janet/documents/file2"}, "description": "Janet has two files in her documents directory. Allow her to read the first file but not the second, and allow her to write to both files. No one else should have access to these files.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -Hu janet bash -c 'cat /home/janet/documents/file1 && ! cat /home/janet/documents/file2 && echo \"test1\" > /home/janet/documents/file1 && echo \"test2\" > /home/janet/documents/file2 && cat /home/janet/documents/file1 && cat /home/janet/documents/file2'"}, "example": {"type": "command", "data": "chmod 640 /home/janet/documents/file2"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && cd /home/emma && touch secret.txt && chmod 400 secret.txt"}, "description": "Give the user 'alex' read-only access to /home/emma's secret.txt file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - alex -c 'cat /home/emma/secret.txt' | if [ \"$(cat -)\" = \"Permission denied\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G emma alex && chmod 440 /home/emma/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/emma -m emma && mkdir /data && touch /data/file && chown root:jane /data/file && chmod 640 /data/file"}, "description": "Users jane and emma need access to the file /data/file. jane needs to read and write the file while emma only needs to read it. What permissions should be set for /data/file?", "evaluation": {"type": "ground-truth", "answer": "rw-r-----", "checking": null, "example": {"type": "command", "data": "chmod 640 /data/file && su - jane && echo 'test' > /data/file && cat /data/file && exit && su - emma && cat /data/file && exit"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir data && cd data && touch file1 && touch file2 && chmod 664 file1 && chmod 640 file2"}, "description": "Change the group ownership of the /home/john/data directory to \"admins\", and grant members of this group the permission to modify the contents of this directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/john/data | awk '{if ($3~/^admins/) { exit 0; } else { exit 1; }}') && (sudo -u john touch /home/john/data/file3 && sudo -u john echo 'hello' >> /home/john/data/file3 && sudo -u john rm /home/john/data/file3 && sudo -u john touch /home/john/data/file1 && sudo -u john echo 'world' >> /home/john/data/file1 && sudo -u john rm /home/john/data/file1 && sudo -u john touch /home/john/data/file2 | find /home/john/data -type d ! -perm 2770  -ls | awk '{if ($1~/^d.....rwxrwt/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chgrp admins /home/john/data && chmod 2770 /home/john/data"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/amy -m amy && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/chris -m chris && useradd -s /bin/bash -d /home/dave -m dave && groupadd sysadmin && usermod -a -G sysadmin amy && chgrp sysadmin /usr/bin/apt-get && chmod g+s /usr/bin/apt-get"}, "description": "Allow only users in the sysadmin group to run the apt-get command", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l amy -c 'apt-get update' && runuser -l bob -c 'apt-get update' && (runuser -l chris -c 'apt-get update' && exit 1 || exit 0) && (runuser -l dave -c 'apt-get update' && exit 1 || exit 0)"}, "example": {"type": "command", "data": "chmod o-x /usr/bin/apt-get"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mario -m mario && useradd -s /bin/bash -d /home/luigi -m luigi && echo 'It's me, Mario!' > /home/mario/message && echo 'Hello, I'm Luigi.' > /home/luigi/message && chmod 640 /home/mario/message && chmod 604 /home/luigi/message && chown mario /home/mario/message && chown luigi /home/luigi/message "}, "description": "What's inside /home/mario/message? Can luigi read it? if he can't, give him read permission to that file", "evaluation": {"type": "ground-truth", "answer": "It's me, Mario!", "checking": null, "example": {"type": "command", "data": "chmod +r /home/mario/message && cat /home/mario/message"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/carol -m carol && cd /home/carol && mkdir lab && cd lab && touch test.c && touch test.o && touch Makefile && chmod -R 775 . && chown -R carol:carol ."}, "description": "Carol just created a new directory called 'lab' with some files in it for her project. She wants to give her project partner, Alice, read and write permissions to the 'lab' directory, but only read access to test.o. Help her out.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(stat --printf='%a %U:%G' /home/carol/lab && stat --printf='%a %U:%G' /home/carol/lab/test.o) | if [ \"$(cat -)\" = \"775 carol:carol\\n644 carol:carol\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 664 /home/carol/lab/test.o && chmod 775 /home/carol/lab && setfacl -Rm u:alice:rwX /home/carol/lab"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && useradd -s /bin/bash -d /home/jim -m jim && echo 'jim ALL=(ALL) NOPASSWD: /bin/cat' >> /etc/sudoers && cd /home/sam && touch sensitive_file.txt && echo 'this is a sensitive file' > sensitive_file.txt && chmod 600 sensitive_file.txt"}, "description": "Grant jim the ability to read sensitive_file.txt using sudo.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo cat /home/sam/sensitive_file.txt | if [ \"$(cat -)\" = \"this is a sensitive file\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'jim ALL=(sam) NOPASSWD: /bin/cat /home/sam/sensitive_file.txt' >> /etc/sudoers"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/james -m james && su - james"}, "description": "Create a folder called 'secret' in /home/james that's readable, writable and executable only by james. No one else should be able to even access the folder.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -ld /home/james/secret | awk '{if ($1~/^drwx------/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "mkdir /home/james/secret && chmod 700 /home/james/secret"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/tom -m tom && cd /home/tom && mkdir videos && cd videos && mkdir old && mkdir new && touch vid1 && touch vid2 && touch new/a && touch new/b && touch old/c && find ~/videos -type f -exec chmod 600 {} + && find ~/videos -type d -exec chmod 700 {} + && useradd -s /bin/bash -d /home/mike -m mike && echo 'tom ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && cd /home/mike && su - mike"}, "description": "Give the group 'dataaccess' read, write, and execute permission for all new files and directories created in /home/tom/videos", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -ld /home/tom/videos/new | awk '{if ($1 == \"drwx------.\") { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "chmod g+rwx /home/tom/videos/new && chmod g+s /home/tom/videos/new"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && su - jane"}, "description": "As Jane, create a file called \"mytasks.txt\" in the home directory and give it read and write permission for the owner, but not for other users or groups.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "[ -r ~/mytasks.txt ] && [ -w ~/mytasks.txt ] && [ ! -x ~/mytasks.txt ] && stat -c \"%a %U %G\" ~/mytasks.txt | grep \"600 jane jane\""}, "example": {"type": "command", "data": "touch ~/mytasks.txt && chmod 600 ~/mytasks.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/beth -m beth && echo 'secret_file_1' > /home/beth/secrets && echo 'secret_file_2' > /home/beth/.secrets && touch /home/beth/not_a_secret && chown beth /home/beth/.secrets && chmod 400 /home/beth/.secrets && chmod 644 /home/beth/not_a_secret"}, "description": "Beth has three files in her home directory, \"secrets\", \".secrets\", and \"not_a_secret\". Give read permissions to the group for the file \"not_a_secret\" without changing any permissions for the other two files.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/beth | grep not_a_secret | awk '{if ($1~/^-rw-r--r--/) { exit 0; } else { exit 1; } }' && (ls -l /home/beth | grep secrets && ls -l /home/beth | grep .secrets) | awk '{if ($1~/^-rw-------/) { exit 0; } else { exit 1; } }' | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+r /home/beth/not_a_secret"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'Hello, World!' > /home/john/testfile && chmod 400 /home/john/testfile"}, "description": "change the ownership of /home/john/testfile from user john to user jane", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/testfile | awk '{if ($3==\"jane\") { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chown jane /home/john/testfile"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/kevin -m kevin && useradd -s /bin/bash -d /home/kyle -m kyle && cd /home && mkdir shared && chgrp shared shared && chmod g+rwx shared && cd shared && touch file1 && touch file2 && chgrp john file1 && chgrp kevin file2 && chmod 764 file1 && chmod 674 file2"}, "description": "Set permissions so that john and kevin can read and modify file1 and kyle can read file2, but none of them can delete either file1 or file2.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(stat /home/shared/file1 | grep Uid | grep -q '205(.*205)'); UidStat=$?;(stat /home/shared/file1 | grep Gid | grep -q '206(.*205)'); GidStat=$?;(stat /home/shared/file1 | grep Access | grep -q 'rw-..r..-x'); AccessStat=$?;(stat /home/shared/file2 | grep Uid | grep -q '208(.*208)'); UidStat2=$?;(stat /home/shared/file2 | grep Gid | grep -q '206(.*206)'); GidStat2=$?;(stat /home/shared/file2 | grep Access | grep -q 'rw-r..r..'); AccessStat2=$?;if [ $UidStat -eq 0 -a $GidStat -eq 0 -a $AccessStat -eq 0 -a $UidStat2 -eq 0 -a $GidStat2 -eq 0 -a $AccessStat2 -eq 0 ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 744 /home/shared/file1 && chmod 644 /home/shared/file2 && chattr +a /home/shared/*"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/tom -m tom && cd /home/tom && mkdir documents && cd documents && touch doc1 && touch doc2 && chmod 777 ."}, "description": "tom has created two documents in his home directory, but they need to be protected from being deleted by other users. Set the necessary permissions to only allow tom to delete these two documents and prevent other users from doing so", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "rm -f /home/tom/documents/doc1 && rm -f /home/tom/documents/doc2 && (ls /home/tom/documents | wc -l) | if [ \"$(cat -)\" = \"2\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 600 /home/tom/documents/doc1 && chmod 600 /home/tom/documents/doc2 && chattr +i /home/tom/documents/doc1 && chattr +i /home/tom/documents/doc2"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && useradd -s /bin/bash -d /home/andy -m andy && groupadd developers && usermod -a -G developers lisa && usermod -a -G developers andy && cd /home/lisa && mkdir work && cd work && touch file1 && touch file2 && chgrp developers . && chmod g+w ."}, "description": "Lisa and Andy are developers. Lisa created some files in /home/lisa/work. Set permissions so that Lisa and Andy can both read and write to the work directory, but nobody other than members of the 'developers' group can access the files. Also, make sure that any new file or directory created in this directory inherits the same ownership and permissions as the parent directory (work).", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -ld /home/lisa/work && ls -l /home/lisa/work/ | awk '{if ($1~/^drwxrwx---/ && $3~/^lisa$/ && $4~/^developers$/ && $5==0) {exit 0;} else {print $0; exit 1;}}' && sudo -u andy ls -l /home/lisa/work/ | awk '{if ($1~/^-rw-rw----/ && $3~/^andy$/ && $4~/^developers$/) {exit 0;} else {print $0; exit 1;}}' && echo 'test' > /home/lisa/work/testfile && (sudo -u lisa cat /home/lisa/work/testfile && sudo -u andy cat /home/lisa/work/testfile && sudo -u nobody cat /home/lisa/work/testfile) | if [ \"$(cat -)\" = \"test\"$'\\n'\"test\"$'\\n'\"test\" ]; then exit 0; else exit 1; fi && touch /home/lisa/work/testfile2 && ls -l /home/lisa/work/testfile2 | awk '{if ($1~/^-rw-rw----/ && $3~/^lisa$/ && $4~/^developers$/) {exit 0;} else {print $0; exit 1;}}') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod -R g+rwX,o-rwx /home/lisa/work && chmod g+s /home/lisa/work"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jennifer -m jennifer && cd /home/jennifer && mkdir reports && cd reports && touch report1.txt && touch report2.txt && touch report3.txt"}, "description": "Give read and write access to everyone in the group 'office' to all files in the directory /home/jennifer/reports", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/jennifer/reports/* | awk '{print $1}' | cut -c5-7 | grep -v 'rw-' && ls -ld /home/jennifer/reports | awk '{print $1}' | cut -c5-7 | grep -v 'drwxrwxr-x') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod -R g+rwX /home/jennifer/reports && chgrp -R office /home/jennifer/reports"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/sara -m sara && echo 'Welcome to Our System!' > /home/john/welcome.txt && chown john /home/john/welcome.txt && chmod 640 /home/john/welcome.txt"}, "description": "Allow Sara to read the /home/john/welcome.txt file but not to modify it. Sara should not be able to delete the file either", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john | grep welcome.txt | awk '{if ($1 == \"-rw-r-----\") { exit 0; } else { exit 1; } }' && runuser -l sara -c 'cat /home/john/welcome.txt && echo \"can_i_delete_this_file?\" > /home/john/welcome.txt && rm /home/john/welcome.txt' | if [ \"$(cat -)\" = \"Welcome to Our System!\"$'\\n'\"cat: /home/john/welcome.txt: Permission denied\"$'\\n'\"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 440 /home/john/welcome.txt && chattr +i /home/john/welcome.txt && chown john:sara /home/john/welcome.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && mkdir /server && chgrp john /server && chmod g+s /server && chmod 730 /server && mkdir /server/shared && cd /server/shared && touch file1 && touch file2 && chgrp john file1 && chgrp john file2 && chmod 660 file1 && chmod 640 file2 && echo 'provide 660 permission on files for the group john so that they can read and write, but other users can only read file1' && su - john"}, "description": "Grant permissions to john to execute file2. File1 will also require execute permission so that directory listing is possible in the shared directory. The permission for file1 should not be changed from the initial value provided in init command.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l -d /server/shared/ | awk '{print $1}') = 'drwxr-x---' && (ls -l -d /server/shared/ | awk '{print $4}') = 'john' && (ls -l /server/shared/ | awk '{print $1,$9}') = '-rw-rw---- file1\n-rw-r----- file2' && sudo su - john -c '[ -x /server/shared/file2 ] && echo \"success\" || echo \"failed\"'"}, "example": {"type": "command", "data": "chmod g+x /server/shared && chmod g+x /server/shared/file1 && chmod g+x /server/shared/file2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && su - john && cd && echo 'The quick brown fox jumps over the lazy dog.' > test1.txt && chmod 777 test1.txt && echo 'The slow purple rabbit hops over the tired turtle.' > test2.txt"}, "description": "John wants to make test1.txt readable and writable only to him and revoke all permissions for others. He also wants test2.txt to be readable by only him and not writable at all. Achieve this and show the current status of permissions for both files.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l | grep 'test' | awk '{if ($1~/^-.rwx------/ || $1~/^-..--------/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 700 test1.txt && chmod 400 test2.txt && ls -l | grep 'test'"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'secret' > /home/john/file && chmod 440 /home/john/file && echo 'export PASS=\"supersecret\"' >> /home/john/.bashrc && su - john"}, "description": "Open the file /home/john/file and display its contents without changing its permissions, using the environment variable PASS to obtain superuser privileges. Remember to clean up the environment variable after you complete the task.", "evaluation": {"type": "operation-checking", "answer": "secret", "checking": null, "example": {"type": "command", "data": "sudo chown root:root /home/john && unset PASS && cat /home/john/file && echo 'file contents displayed' && unset PASS && echo 'password cleaned up'"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user -m user && mkdir /home/user/files && touch /home/user/files/file1 && touch /home/user/files/file2 && chmod -R 600 /home/user/files && chown -R user:user /home/user/files"}, "description": "Create a new user named \"user\" and a directory called \"files\" in their home directory. Inside the \"files\" directory, create two files called \"file1\" and \"file2\". Set the permissions of the \"files\" directory and its contents so that only the owner can read and write to them", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/user/files | awk '{if ($1~/^-rw-------/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 600 /home/user/files/*"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/laura -m laura && useradd -s /bin/bash -d /home/peter -m peter && touch secret.txt && chmod 400 secret.txt && chown laura secret.txt"}, "description": "Laura has a file called secret.txt with sensitive information that should only be accessed by her. However, she wants her colleague Peter to be able to read the file. What commands should be used to allow this while still preventing other users from accessing the file?", "evaluation": {"type": "query", "answer": "chmod 440 secret.txt\nchown laura:peter secret.txt", "checking": null, "example": null}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && useradd -s /bin/bash -d /home/nick -m nick && mkdir /shared && touch /shared/file.txt && chmod 770 /shared && chown root:mike /shared && chmod 640 /shared/file.txt && chown nick:mike /shared/file.txt"}, "description": "Explain the permissions and ownership of /shared and /shared/file.txt and which users have access to them", "evaluation": {"type": "ground-truth", "answer": "The /shared directory has its permissions set to 770, meaning that the owner (root) and the group members (mike) have full access. The /shared/file.txt file has its permissions set to 640, meaning that the owner (nick) has read and write access while the group members (mike) have read-only access. Only the users in the mike group (mike and nick) have access to /shared and its contents.", "checking": null, "example": {"type": "command", "data": ""}}, "labels": ["permission", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir -p project/{docs,code} && touch project/docs/{plan.txt,design.pdf} && touch project/code/{app.py,script.sh} && chmod -R 755 project && chmod 640 project/docs/* && chmod 700 project/code && chown -R jane:jane project && su - jane"}, "description": "Jane is working on a project that requires her to keep some files private. Give her read/write access to project/docs, but prevent her from accessing the contents of project/code.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/jane/project/docs | awk '{if ($1~/^-rw-r-----/ && $3==\"jane\" && $4==\"jane\") { exit 0; } else { exit 1; }}') && ((ls -l /home/jane/project/code | awk '{if ($1~/^drwx------/) { exit 0; } else { exit 1; }}') && (ls -l /home/jane/project/code/ | awk '{if ($3!=\"jane\" || $4!=\"jane\") { exit 0; } else { exit 1; }}' && (ls -l /home/jane/project/code/app.py | awk '{if ($1~/^-rwx------/ || $3!=\"jane\" || $4!=\"jane\") { exit 0; } else { exit 1; }}') && (ls -l /home/jane/project/code/script.sh | awk '{if ($1~/^-rwx------/ || $3!=\"jane\" || $4!=\"jane\") { exit 0; } else { exit 1; }}')) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 /home/jane/project/docs/* && chmod 700 /home/jane/project/code && chmod 700 /home/jane/project/code/* && chown -R jane:jane /home/jane/project"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && cd /home/mark && mkdir docs && touch docs/file1 && touch docs/file2 && chmod o-rwx docs && chown -R mark:mark docs"}, "description": "Give read and execute permission on /home/mark/docs/file1 to everyone except owner and group members of the file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/mark/docs/file1 | grep -q -- '^-..-.--.--') && (ls -l /home/mark/docs/file1 | awk '{if ($1~/^-..-.--.r./) { exit 0; } else { exit 1; } }') && (ls -l /home/mark/docs | awk '{if ($1~/^drwxr--r--/) { exit 0; } else { exit 1; } }') && cat /home/mark/docs/file1 | grep -q 'Hello world'"}, "example": {"type": "command", "data": "chmod o+rx /home/mark/docs/file1 && echo 'Hello world' > /home/mark/docs/file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/testuser -m testuser && groupadd testgroup && usermod -aG testgroup testuser && echo 'test' > /home/testuser/testfile && chmod 520 /home/testuser/testfile && chown root:testgroup /home/testuser/testfile"}, "description": "Change the contents of /home/testuser/testfile to 'newtest', without changing permissions or ownerships of the file, and without using sudo or becoming the root user.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/testuser/testfile | if [ \"$(cat -)\" = \"newtest\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'newtest' | tee /home/testuser/testfile >/dev/null"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'test' > /home/john/testfile && chmod o+x /home/john && chmod 704 /home/john/testfile"}, "description": "Give user 'mary' read-only access to /home/john/testfile", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - mary -c 'cat /home/john/testfile' | if [ \"$(cat -)\" = \"test\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "useradd mary && usermod -a -G john mary && chmod 704 /home/john && chmod 704 /home/john/testfile && chown john:john /home/john/testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/joe -m joe && useradd -s /bin/bash -d /home/mark -m mark && cd /home/jane && mkdir important_files && cd important_files && touch file1.txt && touch file2.txt && touch file3.txt && find ~/important_files -type f -exec chmod 640 {} + && cd /home/joe && mkdir confidential_files && cd confidential_files && touch file4.txt && touch file5.txt && touch file6.txt && find ~/confidential_files -type f -exec chmod 600 {} + && cd /home/mark && mkdir secret_files && cd secret_files && touch file7.txt && touch file8.txt && touch file9.txt && find ~/secret_files -type f -exec chmod 600 {} +"}, "description": "Give jane permission to read and write file1.txt and file2.txt. Give joe permission to read file4.txt. Give mark permission to read and write file7.txt, file8.txt and file9.txt. Ensure that the files'owner are not changed", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - jane -c 'echo hello > ~/important_files/file1.txt' && su - jane -c 'echo world > ~/important_files/file2.txt' && su - joe -c 'cat /home/joe/confidential_files/file4.txt' && su - mark -c 'echo hello > ~/secret_files/file7.txt' && su - mark -c 'echo world > ~/secret_files/file8.txt' && su - mark -c 'echo yay > ~/secret_files/file9.txt') | if [ \"$(cat -)\" = \"hello$'\\n'world$'\\n'file4 content$'\\n'hello$'\\n'world$'\\n'yay\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 660 /home/jane/important_files/file{1,2}.txt && chown jane:jane /home/jane/important_files/file{1,2}.txt && chmod 400 /home/joe/confidential_files/file4.txt && chown joe:joe /home/joe/confidential_files/file4.txt && chmod 660 /home/mark/secret_files/file{7,8,9}.txt && chown mark:mark /home/mark/secret_files/file{7,8,9}.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jim -m jim && useradd -s /bin/bash -d /home/ryan -m ryan && echo 'jim ALL=(ryan) NOPASSWD:/bin/cat' >> /etc/sudoers && echo 'ryan ALL=(jim) NOPASSWD:/bin/cat' >> /etc/sudoers && echo 'Hello, Jim' > /home/ryan/note.txt && echo 'Secret message for Ryan' > /home/jim/note.txt"}, "description": "Jim needs to read Ryan's note and Ryan needs to read Jim's note, but they shouldn't be able to access each other's home folders. Allow only `sudo cat` to be used for this purpose. Hint: It's all about the sudoers file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jim cat /home/ryan/note.txt && sudo -u ryan cat /home/jim/note.txt) | if [ \"$(cat -)\" = \"Hello, Jim\"$'\\n'\"Secret message for Ryan\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -aG sudo jim && usermod -aG sudo ryan"}}, "labels": ["permission", "sudoers"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && echo 'hello world' > /tmp/hello && chmod 644 /tmp/hello && chown jack /tmp/hello"}, "description": "As a regular user, how can I read the content of /tmp/hello which is only accessible by jack?", "evaluation": {"type": "ground-truth", "answer": "hello world", "checking": null, "example": {"type": "command", "data": "sudo -u jack cat /tmp/hello"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir docs && cd docs && touch file1 && touch file2 && chown john:john . && chown john:john file1 && chown john:john file2 && su - john"}, "description": "john is a new user and he has some important files in the newly created /home/john/docs folder. Set the permissions so that he can only read and write files but not delete them, and he can neither delete nor rename the folder itself. Also, other users aside from john should not have access to the /home/john/docs folder.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/docs/ | egrep -v '^total' | awk '{if ($1 !~/^-rw--w----/) { exit 1; } else { exit 0; }}' && lsattr /home/john/docs/ | awk '{if ($1~/^....i./) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 0622 /home/john/docs/* && chmod 0621 /home/john/docs && chattr +i /home/john/docs"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "cd ~ && mkdir secret && echo 'haha' > secret/message.txt && chmod 600 secret/message.txt && useradd -m -s /bin/bash john && useradd -m -s /bin/bash kim && useradd -m -s /bin/bash jerry && usermod -a -G john,kim,jerry kim && usermod -a -G john,jerry john"}, "description": "Let john and jerry be able to read message.txt, but do not let kim access it under any circumstances", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l john -c 'cat /home/$(whoami)/secret/message.txt' && runuser -l jerry -c 'cat /home/$(whoami)/secret/message.txt' && runuser -l kim -c 'cat /home/$(whoami)/secret/message.txt' 2>/dev/null) | if [ \"$(cat -)\" = \"haha\"$'\\n'\"haha\" ]; then if [ -z \"$(ls -l /home/$(whoami)/secret | awk '{if ($9 == \"message.txt\" && $1~/^-...-.--x/) print $9;}')\" ]; then exit 0; else exit 1; fi; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 /home/$(whoami)/secret/message.txt && chown john /home/$(whoami)/secret/message.txt && chgrp john /home/$(whoami)/secret/message.txt && chown jerry /home/$(whoami)/secret && chgrp jerry /home/$(whoami)/secret && chmod 711 /home/$(whoami)/secret"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/matt -m matt && cd /home/matt && echo 'I love Linux' > love.txt && chmod 755 love.txt && chown matt love.txt && su - matt"}, "description": "Execute the contents of love.txt in the terminal and make sure the output is 'I love Linux' (without quotes)", "evaluation": {"type": "ground-truth", "answer": "I love Linux", "checking": null, "example": {"type": "command", "data": "cd ~/ && ./love.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /secret && touch /secret/password && echo 'top_secret' > /secret/password"}, "description": "Create a user named 'john' and allow only 'john' to read the file /secret/password. No other users should be able to read this file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - john -c 'cat /secret/password' && (su - someuser -c 'cat /secret/password' || true)) | if [ \"$(cat -)\" = \"top_secret\"$'\\n'$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && chmod 600 /secret/password && chown john /secret/password"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/user && useradd -d /home/user -s /bin/bash user && echo 'Hello, world!' > /home/user/hello.txt && chmod 760 /home/user && chown user:user /home/user && chmod 640 /home/user/hello.txt && chown user:user /home/user/hello.txt"}, "description": "Give group members write access to a file without changing owner permission", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/user/hello.txt | awk '{if ($1~/^-..rw----/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 664 /home/user/hello.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd joe && useradd susan && useradd peter && echo 'Top secret data' > /topsecret && chmod 660 /topsecret && chown joe /topsecret"}, "description": "Make the file /topsecret readable by susan and writeable by peter while preserving its owner and group ownership", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /topsecret | awk '{print $1,$3,$4}' | grep -q '^-rw-rw---- joe joe$') && (sudo -u susan cat /topsecret | grep -q 'Top secret data') && (sudo -u peter sh -c 'echo \"Hello\" > /topsecret' && sudo -u joe cat /topsecret | grep -q 'Hello') && (ls -l /topsecret | awk '{print $1,$3,$4}' | grep -q '^-rw-rw---- joe joe$') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 664 /topsecret && chgrp susan /topsecret && usermod -a -G peter joe"}}, "labels": ["permission", "owner"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && useradd -s /bin/bash -d /home/rebecca -m rebecca && useradd -s /bin/bash -d /home/megan -m megan && echo 'All work and no play makes Jack a dull boy.' > /home/emma/file.txt && echo 'Do you want to play a game?' > /home/rebecca/file.txt && echo 'I'm sorry Dave, I'm afraid I can't do that.' > /home/megan/file.txt && chown emma:emma /home/emma/file.txt && chown rebecca:rebecca /home/rebecca/file.txt && chown megan:megan /home/megan/file.txt && chmod 640 /home/emma/file.txt && chmod 440 /home/rebecca/file.txt &&chmod 600 /home/megan/file.txt"}, "description": "Give the read-only permission to all members of a group, but some users should not be able to read the files though they belong to the group.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l emma -c 'cat /home/emma/file.txt' && runuser -l rebecca -c 'cat /home/rebecca/file.txt' && runuser -l megan -c 'cat /home/megan/file.txt' && ls -l / | grep home | awk '{if ($1!~/^drwxr-x--x/||$3!~/^emma/||$4!~/^emma/) { exit 1; } else { exit 0; } }') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+r /home/emma/file.txt && chmod g+x /home && chattr +i /home/rebecca/file.txt"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo -e 'password1234\npassword1234' | passwd john"}, "description": "Allow only the owner and group members of file /home/john/file.txt to read and write to the file. Others should not be able to read and write to the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/john/file.txt -perm /o+rw) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "touch /home/john/file.txt && chown john:john /home/john/file.txt && chmod 660 /home/john/file.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && mkdir -p /home/shared_directory && chmod 777 /home/shared_directory"}, "description": "Create a shared directory which can be read, written and executed by both users user1 and user2. Set permissions such that new files created in this directory inherit the group ownership and that they can be modified by any user in the group.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u user1 -- sh -c 'cd /home/shared_directory && touch file1 && chmod g+s file1' && sudo -u user2 -- sh -c 'cd /home/shared_directory && touch file2' && ls -l /home/shared_directory | awk '{if ($1~/^drwxrwsr-x/ && $3==\"user1\" && $4==\"user2\") { exit 0; } else { exit 1; } }' && sudo -u user1 -- sh -c 'echo \"test content\" > /home/shared_directory/file1' && sudo -u user2 -- sh -c 'cat /home/shared_directory/file1' | grep -q \"test content\") | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+s /home/shared_directory && chown user1:user2 /home/shared_directory && chmod 2775 /home/shared_directory"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/marcus -m marcus && cd /home/marcus && mkdir pictures && cd pictures && touch beach.jpg && touch mountain.jpg && touch city.jpg && chmod 644 beach.jpg && chmod 600 mountain.jpg && chmod 444 city.jpg"}, "description": "Give group 'friends' read access to all the files in /home/marcus/pictures and execute 'ls -l' on /home/marcus/pictures to verify the permissions are set correctly.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(getent group friends > /dev/null && find /home/marcus/pictures -type f ! -perm -g=r -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi && runuser -l marcus -c 'ls -ld pictures && ls -l pictures'"}, "example": {"type": "command", "data": "groupadd friends && chown -R marcus:friends /home/marcus/pictures && chmod -R g=r,o= /home/marcus/pictures"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/mark -m mark && echo 'students ALL=(ALL) NOPASSWD: /bin/chmod' >> /etc/sudoers"}, "description": "Create a directory named /test with read, write, and execute permissions for the owner, read and execute permission for the group and no permissions for others.  Then only grant jane the permission to change the permissions of any file or directory in /test, but not mark. Verify by executing the chmod command on a file in that directory as jane.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cd / && ls -la | grep test | awk '{if ($1~/^d.rwxr-x--/) { exit 0; } else { exit 1; }}') && (echo 'testcontent' > /test/file && runuser -l jane -c 'sudo chmod g+w /test/*') && (ls -la /test | grep file | awk '{if ($1~/^-..rw----/) { exit 0; } else { exit 1; }}') && (! runuser -l mark -c 'sudo chmod g+w /test/*' 2>/dev/null) && (! runuser -l jane -c 'sudo chmod o+w /test/*' 2>/dev/null)"}, "example": {"type": "command", "data": "mkdir /test && chmod 750 /test && chown root:students /test && echo 'testcontent' > /test/file"}}, "labels": ["permission", "sudoers"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/maria -m maria && cd /home/maria && mkdir docs && cd docs && touch doc1 && touch doc2 && touch doc3 && chmod -R 775 /home/maria/docs/* && chgrp -R www-data /home/maria/docs/*"}, "description": "Maria wants to share the 'docs' directory with a group named 'colleagues'. Give the 'colleagues' group read permission on all documents inside the 'docs' directory but keep the permissions for other users unchanged.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "getfacl -R /home/maria/docs | grep 'group:colleagues:r--' | wc -l | if [ \"$(cat -)\" = \"3\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd colleagues && usermod -a -G colleagues maria && chmod -R g+r /home/maria/docs/*"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/jason && cd /home/jason && touch file1 && touch file2 && mkdir folder1 && mkdir folder2"}, "description": "Give the user 'jason' read and write permissions on all the files and directories in /home/jason, and give all other users only read permissions. Then, give read, write, and execute permissions to the owner and group for each of the files and directories, and give other users no permissions", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/jason -type f ! -perm 644 -ls && find /home/jason -type d ! -perm 755 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi && (find /home/jason -type f ! -perm 700 -ls && find /home/jason -type d ! -perm 700 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod -R 644 /home/jason && chmod -R u+rwx,g+rwx,o-rwx /home/jason"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sara -m sara && echo 'secret message' > /home/sara/secretfile && chmod 400 /home/sara/secretfile"}, "description": "As another user, I need to read the contents of /home/sara/secretfile without changing the file permissions. How can I do that?", "evaluation": {"type": "ground-truth", "answer": "Use the 'cat' command as the owner of the file (Sara) to display the contents of the file. For example, run 'sudo -u sara cat /home/sara/secretfile'", "checking": null, "example": {"type": "command", "data": "sudo -u sara cat /home/sara/secretfile"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash ryan && useradd -s /bin/bash peter && mkdir /pub && chmod 777 /pub && cd /pub && touch file1 file2 && echo 'This is file1 content' > file1 && echo 'This is file2 content' > file2 && chown ryan:ryan file1 && chown peter:peter file2"}, "description": "Ryan should be able to read, write and execute file1 but can only read file2. Peter should be able to read, write and execute file2 but can only read file1. Set the appropriate permissions for the files and make sure both users have no other access to the files", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u ryan cat /pub/file1 && sudo -u ryan touch /pub/my_new_file && sudo -u ryan rm /pub/file2 && (sudo -u ryan touch /pub/new_file; [ -e /pub/new_file ] && echo 'ryan has write access to file1') && (sudo -u ryan touch /pub/new_file2; [ ! -e /pub/new_file2 ] && echo 'ryan has no write access to file2')) && (sudo -u peter cat /pub/file2 && sudo -u peter touch /pub/my_new_file2 && sudo -u peter rm /pub/file1 && (sudo -u peter touch /pub/new_file3; [ ! -e /pub/new_file3 ] && echo 'peter has no write access to file1') && (sudo -u peter touch /pub/new_file4; [ -e /pub/new_file4 ] && echo 'peter has write access to file2'))"}, "example": {"type": "command", "data": "chmod 400 /pub/file1 && chmod 200 /pub/file2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && useradd -s /bin/bash -d /home/oliver -m oliver && useradd -s /bin/bash -d /home/charlie -m charlie && groupadd shareholders && usermod -aG shareholders emma && usermod -aG shareholders oliver && chmod 2770 /home/charlie && chown :shareholders /home/charlie"}, "description": "Create a file called report.txt under /home/charlie. emma and oliver are supposed to have read and write permissions. Group shall have read and write permission while others have no permission on this file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/charlie/report.txt | awk '{print $1,$3,$4}') | if [ \"$(cat -)\" = \"-rw-rw---- charlie shareholders\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "touch /home/charlie/report.txt && chmod 660 /home/charlie/report.txt && chown emma:shareholders /home/charlie/report.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sarah -m sarah && cd /home/sarah && echo 'secret message' > test && chmod 400 test && chown sarah test &&su - sarah"}, "description": "Read the content of the ~/test file using sudo command", "evaluation": {"type": "ground-truth", "answer": "secret message", "checking": null, "example": {"type": "command", "data": "sudo cat /home/sarah/test"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && echo 'jane ALL=(ALL) NOPASSWD:/usr/bin/vim' >> /etc/sudoers && su - jane"}, "description": "Give jane the ability to open and edit /etc/hosts file without needing a password.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -n /usr/bin/vim /etc/hosts -c=wq > /dev/null 2>&1 && cat /etc/hosts | grep '127.0.0.1' | if [ \"$(cat -)\" = \"127.0.0.1\tlocalhost\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'jane ALL=(ALL) NOPASSWD:/usr/bin/vim /etc/hosts' >> /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && cd /home/lisa && touch file1 && touch file2 && chmod 600 file1 && chmod 640 file2 && su - lisa"}, "description": "As user \"lisa\", list the contents of the directory and their permissions. What is the permission of file1? What is the permission of file2? Which of these files can be read by other users on the system? Which of these files can be modified by other users on the system?", "evaluation": {"type": "ground-truth", "answer": "file1 has permission 600 and file2 has permission 640. Only file2 can be read by other users on the system, while neither file can be modified by other users.", "checking": null, "example": {"type": "command", "data": "ls -l"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/joe -m joe && useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/mike -m mike && cd /home/joe && mkdir dir1 dir2 && cd dir1 && echo 'secret data' > file1 && echo 'more secret data' > file2 && cd .. && chown -R joe:joe dir1 dir2 && chmod -R 750 dir1 dir2 && chmod 600 dir1/* && chmod 640 dir2/* && su - jane"}, "description": "jane needs access to file2 but not to file1, give her the required access and ensure she doesn't have write access to the parent directory containing dir1 and dir2.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/joe/dir2/file2 | grep 'more secret data' && ! sudo -l | grep '/bin/rm'"}, "example": {"type": "command", "data": "usermod -a -G joe jane && chmod 750 /home/joe && chmod 755 /home/joe/dir1 && chmod 750 /home/joe/dir2 && chmod 640 /home/joe/dir2/*"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/amy -m amy && echo 'secretpassword' | passwd amy --stdin && su - amy"}, "description": "What command do you use to change the password of the current user?", "evaluation": {"type": "ground-truth", "answer": "passwd", "checking": null, "example": {"type": "command", "data": "passwd"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m alice && useradd -m bob && echo 'Hello World!' > /home/alice/file.txt && chmod 750 /home/alice && chmod 640 /home/alice/file.txt && chown alice:alice /home/alice/file.txt && chmod 750 /home/bob && su - bob"}, "description": "As bob, try to read /home/alice/file.txt and see if it's possible or not", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/alice/file.txt 2>/dev/null && echo 'Access was granted' || echo 'Access was denied'"}, "example": {"type": "command", "data": "chmod 444 /home/alice/file.txt"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/susan -m susan && groups susan | tr ' ' '\\n' > susan_groups && chmod 550 susan_groups && chattr +i susan_groups && useradd -s /bin/bash -d /home/john -m john"}, "description": "As a new user, John should only be able to view his own user information and no one else's information. However, he can still see Susan's user groups when he types the 'groups' command. Fix the permissions so that John cannot see Susan's user groups when he types the 'groups' command.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -H -u john bash -c 'groups' | grep susan_groups && exit 1 || exit 0"}, "example": {"type": "command", "data": "chmod g=r ~/susan_groups && chmod o-rwx ~/susan_groups"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && touch file1 && chmod +x file1 && touch file2 && touch file3 && chown jane:root file2 && chown root:root file3 && chmod 640 file2 && chmod 500 file3 && echo 'password' | passwd jane --stdin"}, "description": "What are the permissions and ownerships of all the files in /home/jane and what is the password of the user jane?", "evaluation": {"type": "ground-truth", "answer": "file1: -rwxr-xr-x jane jane\nfile2: -rw-r----- jane root\nfile3: -r-x------ root root\nPassword: password", "checking": null, "example": {"type": "command", "data": "ls -l /home/jane && cat /etc/shadow | grep jane"}}, "labels": ["permission", "ownership", "password"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && cd /home/alex && mkdir folder && touch folder/file1 && touch folder/file2 && chown -R alex:alex /home/alex/folder/ && chmod -R 770 /home/alex/folder/"}, "description": "User alex and group alex should be able to add, read, and modify file1 and file2, while group root should not have any permissions to access these files", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/alex/folder/file* && sudo ls -l /home/alex/folder/file*) | awk '{if ($1 !~ /^-.rw..rw..../) { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "chmod -R 770 /home/alex/folder/ && chown -R alex:alex /home/alex/folder/"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/student -m student && mkdir /lab && chown root:student /lab && chmod 2770 /lab && touch /lab/secretfile && chown root:student /lab/secretfile && chmod 660 /lab/secretfile && echo 'student' > /lab/username"}, "description": "A new student, JohnDoe, has joined your lab. You need to give him access to the lab directory and its contents. However, he should not be able to read the contents of the secretfile or change the group ownership of the lab directory. Set the necessary permissions on the directory and the files", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u student cat /lab/username && sudo -u student ls /lab && sudo -u student touch /lab/newfile && sudo -u student echo 'new line' >> /lab/newfile && sudo -u student cat /lab/newfile && sudo -u student cat /lab/secretfile) | if [ \"$(cat -)\" = \"student\"$'\\n''newfile'$'\\n''new line'$'\\n'\"Permission denied\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G student JohnDoe && chmod 2775 /lab && chmod 660 /lab/secretfile && setfacl -m u:JohnDoe:r-x /lab"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'secret password' > password.txt && chmod o-rwx password.txt && chown john password.txt && su - john"}, "description": "John needs to share his password with another user, but he wants to make sure that only that user can read it. Create a new user 'jacob' and make sure that Jacob can read the password but no one else can.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/john/password.txt && runuser -l jacob -c 'cat /home/john/password.txt') | if [ \"$(cat -)\" = \"secret password\"$'\\n'\"secret password\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/jacob -m jacob && chown jacob /home/john/password.txt && chmod 640 /home/john/password.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && useradd -s /bin/bash -d /home/sam -m sam && cd /home/lisa && mkdir files && cd files && touch file1 && touch file2 && touch file3 && find ~/files -type f -exec chmod 640 {} + && find ~/files -type d -exec chmod 750 {} + && chown lisa:lisa ~/files/* && find . -exec touch -t 202209241200 {} + && cd /home/sam"}, "description": "Sam wants to modify file2 but not file1 and file3. Make sure Sam can read and write file2 but can only read file1 and file3", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/lisa/files/file1 /home/lisa/files/file2 /home/lisa/files/file3 | tail -n 2 | xargs -I {} bash -c 'echo \"{}\" | diff -q - /tmp/sam_file*' && (sudo cat /home/lisa/files/file1) | if [ \"$(cat -)\" = \"Permission denied\"$'\\n''Permission denied'$'\\n'\"Permission denied\" ]; then exit 0; else exit 1; fi && (sudo echo 'Sam can only read' > /home/lisa/files/file1 && sudo echo 'Sam can only read' > /home/lisa/files/file3) && cat /home/lisa/files/file1 /home/lisa/files/file2 /home/lisa/files/file3 | tail -n 2 | xargs -I {} bash -c 'echo \"{}\" | diff -q - /tmp/sam_file*'"}, "example": {"type": "command", "data": "sudo chown lisa:sam /home/lisa/files/file2 && sudo chmod 660 /home/lisa/files/file2"}}, "labels": ["permission", "file-permissions"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'secret message' > /home/john/message && chmod 0640 /home/john/message && chown john:john /home/john/message && su - john"}, "description": "John wants to share the message file with his friend Joey, but doesn't want anyone else to read or modify the file. Grant read access to Joey and make sure that no one else can read or modify the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/john/message && sudo -u joey cat /home/john/message) | if [ \"$(cat -)\" = \"secret message\"$'\\n'\"secret message\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G john,joey joey && chmod 640 /home/john/message && chown john:joey /home/john/message"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir -p confidential/finance && touch confidential/file.txt && echo 'top secret information' > confidential/file.txt"}, "description": "Allow Jane to read and modify the file at ~/confidential/file.txt, but do not let anyone else read or modify the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo ls -l /home/jane/confidential/file.txt | awk '{if ($1~/^-rw-------./ && $3~/^jane$/ && $4~/^jane$/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "sudo chmod 600 /home/jane/confidential/file.txt && sudo chown jane:jane /home/jane/confidential/file.txt"}}, "labels": ["permission", "file"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "echo \"file1 content\" > /home/user1/file1 && echo \"file2 content\" > /home/user1/file2 && groupadd group1 && usermod -a -G group1 user2 && chgrp group1 /home/user1/file1 /home/user1/file2 && chmod 640 /home/user1/file1 /home/user1/file2 && su - user2"}, "description": "As a user2, change the content of file1 to \"updated content\" without using sudo or switching to root user.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/user1/file1 | if [ \"$(cat -)\" = \"updated content\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo \"updated content\" > /home/user1/file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/sally -m sally && mkdir /company && touch /company/secret.txt && chown sally /company/secret.txt && chmod 600 /company/secret.txt"}, "description": "Create a group called \"marketing\", add John and Bob to this group and grant this group read access to the secret.txt file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(groups john | grep -q marketing) && (groups bob | grep -q marketing) && [ \"-r\" = \"$(sudo -u sally test -r /company/secret.txt && echo \"-r\" || echo \"-\")\" ] && sudo -u john test -r /company/secret.txt && sudo -u bob test -r /company/secret.txt | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd marketing && usermod -a -G marketing john && usermod -a -G marketing bob && chmod g+r /company/secret.txt"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lily -m lily && cd /home/lily && mkdir work && cd work && touch report1 && touch report2 && find . -type f -exec chmod 640 {} + && find . -type d -exec chmod 750 {} +"}, "description": "Set the setgid bit so that all new files and directories will inherit the group ownership of the parent directory 'work'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/lily/work | grep report1 | awk '{if ($4==\"lily\" && $6==\"lily\") { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod g+s /home/lily/work"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && useradd -s /bin/bash -d /home/alex -m alex && useradd -s /bin/bash -d /home/kate -m kate && echo 'lisa:alex' > /permission && echo 'alex:kate' >> /permission && echo 'kate:lisa' >> /permission && chown root:root /permission && chmod 600 /permission && touch /file && chmod 777 /file"}, "description": "There is a file named /file, three users lisa, alex and kate exist, and their group is arranged in a circular way like a ring. The permissions to access the file are arranged in the file called /permission, which consists of three lines, each line dictates the owner and group of the file (colons divide owner and group) , e.g. lisa:alex means lisa owns the file, and alex has the group permission to the file. Re-arrange the groups so that everyone can read and write the file but nobody can execute it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo ls -l / | grep file | awk '{if ($1~/^-..rw..rw./) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 666 /file && while IFS=: read -r owner group;do if [ \"$group\" = \"lisa\" ]; then chgrp alex /file && chown lisa /file; elif [ \"$group\" = \"alex\" ]; then chgrp kate /file; else chgrp lisa /file;fi; done < /permission"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && cd /home/user1 && touch file1 && cd .. && chmod g+s user1"}, "description": "Make the file1 accessible to user2 without compromising user1's ownership. user2 should be able to read, write and execute the file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - user2 && cd /home/user1 && touch file2 && chmod 777 file1 && chmod 777 file2 && ./file2 && rm -rf /home/user2/file1 /home/user2/file2 && exit) | if [ ! -f /home/user2/file1 ] && [ ! -f /home/user2/file2 ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+wxr file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && echo 'test123' > /home/bob/file1 && echo 'secret456' > /home/bob/file2 && cd /home/bob && chmod 600 file2 && chown root file2 && chgrp root file1"}, "description": "In the home directory of user bob, file1 should be readable and writable only by its owner and file2 should be readable only by root, but writable by its owner. Change file1 to be readable by the group 'users'.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/bob/file1 /home/bob/file2 | awk '{if ($1 != \"-rw-------\" && (NR==1 ? $1 != \"-rw-r--r--\" : $1 != \"-rw-------\" || $3 != \"root\")) { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "chmod g+r file1"}}, "labels": ["file permissions", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "sudo useradd -s /bin/bash -d /home/mark -m mark && sudo useradd -s /bin/bash -d /home/lisa -m lisa && sudo usermod -a -G sudo mark && sudo usermod -a -G sudo lisa"}, "description": "Mark and Lisa both belong to the group `sudo`. Grant only Mark permission to execute the `yum` command, while Lisa can't.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u mark yum list installed | if [ $? -eq 0 ] ; then sudo -u lisa yum list installed | if [ $? -eq 0 ] ; then exit 1 ; else exit 0 ; fi ; else exit 1 ; fi"}, "example": {"type": "command", "data": "echo \"mark ALL=(ALL) NOPASSWD:/usr/bin/yum\" | sudo tee -a /etc/sudoers.d/markfile && sudo chmod 440 /etc/sudoers.d/markfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/david -m david && useradd -s /bin/bash -d /home/sam -m sam && useradd -s /bin/bash -d /home/emma -m emma && echo 'group1:x:1001:david,sam' >> /etc/group && echo 'group2:x:1002:sam,emma' >> /etc/group && cd /home/david && mkdir directory1 && cd directory1 && touch file1 && touch file2 && touch file3 && touch file4 && cd /home/sam && mkdir directory2 && cd directory2 && touch file1 && touch file2 && touch file3 && cd /home/emma && mkdir directory3 && cd directory3 && touch file1 && touch file2 && touch file3"}, "description": "Change the group of /home/david/directory1/file4 to group2", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/david/directory1/file4 | awk '{if ($1~/^-.....-.--/) { if ($4 == \"sam\") { if ($5~/[^0-9]1002[^0-9]/) { exit 0; }; } } } ; exit 1;'"}, "example": {"type": "command", "data": "chgrp group2 /home/david/directory1/file4"}}, "labels": ["permission", "group"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir directory && cd directory && touch file && chown john:john file && chmod 470 file && find ./ -type d -exec chmod 300 {} +"}, "description": "Set file permissions so that only the owner can read it, and no one can modify or execute it. Set directory permissions so that only the owner can access it and its contents, but cannot modify the contents.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/directory | awk '{if ($1~/^d...------/ && $3==\"john\" && $4==\"john\" && system(\"ls -l /home/john/directory/file | awk '{if ($1==\"-r--r-----\" && $3==\"john\" && $4==\"john\") { exit 0; } else { exit 1; }}'\")==0) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 400 /home/john/directory/file && chmod 300 /home/john/directory"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m tester && cd /home/tester && touch testfile && chmod 400 testfile && chown tester testfile && su - tester"}, "description": "As a user named tester with only read permission to a file named testfile, how do you create a new file named newfile with read and write permission given to yourself?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(touch newfile && chmod 600 newfile && chown tester newfile && ls -l | grep \"^-rw-------\") | if [ \"$(cat -)\" = \"-rw-------\"$'\\n'\"-r--------\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "touch newfile && chmod 600 newfile && chown tester newfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && mkdir /home/bob/testdir && echo 'top secret content' > /home/bob/testdir/testfile && chmod 400 /home/bob/testdir/testfile && chown bob: /home/bob/testdir/testfile"}, "description": "Bob wants to let Alice access the file '/home/bob/testdir/testfile', but Alice should not be able to delete or modify the file. What commands does Bob need to run to grant Alice access to the file?", "evaluation": {"type": "free-form", "answer": "Bob needs to create a group that includes both him and Alice. He can then give the group read (and execute, for directories) permission on /home/bob/testdir. Finally, he can change the group ownership of the file /home/bob/testdir/testfile to the newly created group.", "checking": null, "example": null}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bill -m bill && mkdir /opt/fileshare && touch /opt/fileshare/file.txt && chown bill /opt/fileshare/file.txt"}, "description": "Give read-only access to /opt/fileshare/file.txt for the group named \"fileshare\" (which doesn't exist yet)", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(getfacl /opt/fileshare/file.txt | grep 'user::' -q && getfacl /opt/fileshare/file.txt | grep 'group::' -q && getfacl /opt/fileshare/file.txt | grep 'other::' -q && getfacl /opt/fileshare/file.txt | grep 'default:user::' -q && getfacl /opt/fileshare/file.txt | grep 'default:group::' -q && getfacl /opt/fileshare/file.txt | grep 'default:other::' -q && getfacl /opt/fileshare/file.txt | grep 'group:fileshare:r--' -q); if [ \"$(echo $?)\" = \"0\" ]; then echo 'OK'; fi"}, "example": {"type": "command", "data": "groupadd fileshare && chgrp fileshare /opt/fileshare/file.txt && chmod g+r /opt/fileshare/file.txt"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && useradd -s /bin/bash -d /home/bernie -m bernie && useradd -s /bin/bash -d /home/maya -m maya && echo 'this is a secret message' > /home/emma/secret && chown emma /home/emma/secret && chgrp bernie /home/emma/secret && chmod 640 /home/emma/secret && su - maya"}, "description": "Read the secret message by granting maya read permission to the file without changing ownership or group ownership of the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/emma/secret | if [ \"$(cat -)\" = \"this is a secret message\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod u+rx,g+r,o-rwx /home/emma/secret"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": ""}, "description": "What are the different types of permissions in Linux and what do they mean?", "evaluation": {"type": "ground-truth", "answer": "The different types of permissions in Linux are read (r), write (w), and execute (x), and they apply to three different entities: user, group, and others. Read permission (r) allows a file to be read and displayed, write permission (w) allows a file to be modified or deleted, and execute permission (x) allows a file to be executed as a program. The permission to perform a specific action can either be granted (allow) or denied (disallow).", "checking": null, "example": {"type": "command", "data": ""}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/charlie -m charlie && chmod -R 755 /home/alice && chmod -R 750 /home/bob && chmod -R 700 /home/charlie && cd /home/alice && mkdir documents && cd documents && touch confidential.txt && cd ../.. && chown bob:bob /home/bob && chown charlie:charlie /home/charlie && usermod -aG alice bob && usermod -aG alice charlie"}, "description": "Alice wants to share her 'confidential.txt' file located in '~/documents/' directory with Bob and Charlie, but she doesn't want to give them write permissions. Bob and Charlie should only be able to read and execute the file. Achieve this without modifying 'confidential.txt' or the 'documents' directory permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - bob -c 'cat /home/alice/documents/confidential.txt' && su - charlie -c 'cat /home/alice/documents/confidential.txt') | if [ \"$(cat -)\" = \"Hello, this is confidential information.\"$'\\n'\"Hello, this is confidential information.\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o=rx /home/alice && chmod o=rx /home/alice/documents && chmod o=r /home/alice/documents/confidential.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir confidential && chown john:john confidential && touch confidential/hidden.txt && chmod 0400 confidential/hidden.txt && su - john"}, "description": "John has created a confidential directory with a hidden file inside. You are a system administrator and must be able to access this file, add the line 'Hello, John!' to the file without changing its permissions or ownership, and then exit. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo cat /home/john/confidential/hidden.txt | awk '{if ($0~/^Hello, John!$/) { exit 0; } else { exit 1; } }' && sudo stat -c \"%a %U %G\" /home/john/confidential/hidden.txt | awk '{if ($1==\"400\" && $2==\"john\" && $3==\"john\") { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "echo 'Hello, John!' | sudo tee -a /home/john/confidential/hidden.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && touch file1 && chown jane:jane file1 && chmod 774 file1 && echo 'secret message' > file1 && useradd -s /bin/bash -d /home/david -m david"}, "description": "jane wants to give her friend david access to the file1 containing a secret message. But, she wants to ensure that david cannot modify the file. How can jane achieve this?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/jane/file1 | if [ \"$(cat -)\" = \"secret message\" ]; then exit 0; else exit 1; fi && (sed -i 's/secret message/modified message/' /home/jane/file1 || exit 0) && cat /home/jane/file1 | if [ \"$(cat -)\" = \"secret message\" ]; then exit 0; else exit 1; fi && (touch /home/david/cannot_modify || exit 0) && (echo 'attempt to modify a file owned by jane' >> /home/jane/file1 || exit 0) && if [ \"$(stat -c '%a %G' /home/jane/file1)\" = \"774 jane\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 766 /home/jane/file1 && setfacl -m u:david:r /home/jane/file1 && setfacl -m m::rx /home/jane && chmod -R g-w /home/jane && chmod o-w /home/jane/file1"}}, "labels": ["permission", "acl"], "difficulty": 2},
{"create": {"type": "text", "data": "What is the basic Linux permission model?"}, "init": null, "description": "Explain the three permission bits for each of the three classes (owner, group, others) and their effects on file/directory access.", "evaluation": {"type": "text", "answer": "The basic Linux permission model defines three classes of users: owner, group, and others. For each class, there are three permission bits: read (r), write (w), and execute (x). The read bit allows a user to open and read a file (or list the contents of a directory), the write bit allows a user to modify or delete a file (or create, delete, rename files in a directory), and the execute bit allows a user to execute a file or enter a directory. The owner of a file can change its permission bits using the chmod command, and users with appropriate permissions can change the file's ownership using the chown command.", "checking": null, "example": null}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/joe -m joe && echo 'This is a test file.' > /home/joe/file.txt && chmod 400 /home/joe/file.txt && chown joe /home/joe/file.txt && su - joe"}, "description": "As joe, try to modify the content of file.txt. Why can't you modify it? Fix the permission of file.txt so that you can modify it without changing ownership or group.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo su - joe -c 'echo \"New content.\" > /home/joe/file.txt && cat /home/joe/file.txt' | if [ \"$(cat -)\" = \"This is a test file.$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 /home/joe/file.txt"}}, "labels": ["permission", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/amy -m amy && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/cathy -m cathy && echo 'secret' > /tmp/secret.txt && chgrp root /tmp/secret.txt && chmod 640 /tmp/secret.txt && usermod -a -G cathy amy && usermod -a -G cathy bob"}, "description": "Modify the permissions of the '/tmp/secret.txt' file so that users in the 'cathy' group can read it, Amy can read and write, and Bob can only write to it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l amy -c 'cat /tmp/secret.txt' && echo; runuser -l bob -c 'echo bob was able to write' && echo; runuser -l cathy -c 'cat /tmp/secret.txt' && echo; runuser -l daria -c 'cat /tmp/secret.txt') | awk '{if ($1~/^secret$|^bob$|^secret$|^secret$/) { next; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 664 /tmp/secret.txt && chown amy:cathy /tmp/secret.txt"}}, "labels": ["permission", "users", "file"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/testuser -m testuser && cd /home/testuser && echo 'testing permission' > testfile && chmod 400 testfile"}, "description": "As a superuser, grant read access to testuser to the testfile located in the home directory of testuser.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo runuser -l testuser -c 'cat testfile') && (sudo chmod 444 /home/testuser/testfile || true) && (sudo ls -l /home/testuser/testfile | awk '{print $1}') | if [ \"$(cat -)\" = \"-r--r--r--\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo chmod 444 /home/testuser/testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && mkdir /data && chown root:dataaccess /data && chmod 2770 /data"}, "description": "Create a file called secret.txt inside /data that is readable and writable only by user1. user2 cannot read or modify the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - user2 -c 'echo Test > /data/secret.txt && echo $?'"}, "example": {"type": "command", "data": "su - user1 -c 'touch /data/secret.txt && chmod 600 /data/secret.txt && echo This is a secret text. > /data/secret.txt'"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && chmod +x /home/bob && su - bob"}, "description": "Why can't I execute a script file with chmod 700 permission? How do I fix it?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "/home/bob/test.sh | if [ $(cat -) = 'Hello World!' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod u+x /home/bob/test.sh && echo '#!/bin/bash\necho \"Hello World!\"' > /home/bob/test.sh"}}, "labels": ["permission", "script"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "cd ~ && mkdir myfiles && cd myfiles && touch file1 && touch file2 && mkdir folder1 && touch folder1/file3 && mkdir folder2 && touch folder2/file4"}, "description": "Give 'read' permission to 'myfiles' folder and all files within it to 'user' and 'group' only. Also, grant 'execute' permission to the folder but not the files.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -lR ~/myfiles | grep -v total | awk '{if ($1 !~ /^dr.....--x[gu]/ && $1 !~ /^-.....--[gu]/) { exit 1; } else { exit 0; } }'"}, "example": {"type": "command", "data": "chmod 570 ~/myfiles && chmod 470 ~/myfiles/* && chmod 570 ~/myfiles/folder* && chmod 470 ~/myfiles/folder*/file*"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir project && touch project/file && chown john:john project && chmod 700 project"}, "description": "Give user Mary access to the project folder and its contents, without giving her sudo permissions", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cd /home/mary && ls project && ls project/file) | if [ \"$(cat -)\" = \"file\"$'\\n'\"file\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/mary -m mary && usermod -a -G john mary && chmod g+rwx /home/john/project && chmod g+rw /home/john/project/file"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/david -m david"}, "description": "Give user 'david' read and execute permission on the directory '~/music' but deny any other user the access to this directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u david find ~/music -exec test -r {} \\; -and -exec test -x {} \\;"}, "example": {"type": "command", "data": "chmod 711 ~ && mkdir ~/music && touch ~/music/song.mp3 && chmod 711 ~/music && chown david ~/music && chmod 500 ~"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bill -m bill && echo 'bill ALL=(root) NOPASSWD: /usr/bin/apt' >> /etc/sudoers && su - bill"}, "description": "As user 'bill', install the 'nano' package using sudo without a password prompt.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "apt-cache policy nano | grep 'Installed: (none)' && dpkg -l | grep '^ii' | grep nano"}, "example": {"type": "command", "data": "sudo apt install nano"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/peter -m peter && echo 'Welcome to Linux' > /home/peter/welcome.txt && chmod 755 /home/peter && chmod 644 /home/peter/welcome.txt"}, "description": "Set permissions for user peter so that he can read the file /home/peter/welcome.txt but cannot modify or delete the file. Also, ensure he has full access to his home directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/peter/welcome.txt && echo 'test' > /home/peter/welcome.txt) | if [ \"$(cat -)\" = \"Welcome to Linux\"$'\\n' ]; then exit 0; else exit 1; fi && (rm /home/peter/welcome.txt && ls /home/peter | grep welcome.txt) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 700 /home/peter && chattr +i /home/peter/welcome.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir -p movies/old && mkdir -p movies/new && touch movies/new/testfile && chmod 000 movies/old && chmod 700 movies/new && chown john:john -R movies && su - john"}, "description": "From ~/movies/new directory, run the testfile and get the output", "evaluation": {"type": "ground-truth", "answer": "hello", "checking": null, "example": {"type": "command", "data": "(echo 'hello' > ~/movies/new/testfile && chmod 777 ~/movies/new/testfile && ~/movies/new/testfile) || echo 'fail'"}}, "labels": ["permission", "file ownership"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user -m user && echo 'user ALL=(ALL) NOPASSWD: /usr/bin/whoami' >> /etc/sudoers"}, "description": "Allow user to execute only /usr/bin/whoami command with sudo", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo whoami | if [ \"$(cat -)\" = \"root\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "vi /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && useradd -s /bin/bash -d /home/john -m john && cd /home && mkdir shared && cd shared && touch file1 && touch file2 && echo 'hello world' >> file1 && echo 'this is a secret' >> file2 && chown john:john file2 && chmod 0660 file2"}, "description": "Make it so that only mark and john can access the shared directory and its contents. Others shouldn't be able to even list the contents.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u mark cat /home/shared/file1 && sudo -u john cat /home/shared/file1 && sudo -u john cat /home/shared/file2 && ls /home/shared) | if [ \"$(cat -)\" = \"hello world$'\\n'hello world$'\\n'this is a secret$'\\n'file1$'\\n'file2$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 750 /home/shared && chgrp john /home/shared && chmod 660 /home/shared/file2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && groupadd mygroup && usermod -aG mygroup john && usermod -aG mygroup jane"}, "description": "Create a directory /myfolder and set the group ownership to mygroup. Give the group write and execute permissions but restrict all users who are not members of the group from accessing the directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l / | grep myfolder | awk '{if ($1~/^d..--..--x/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "mkdir /myfolder && chgrp mygroup /myfolder && chmod 770 /myfolder && chmod g+s /myfolder"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && echo 'This is a secret message' > secret.txt && chmod 640 secret.txt && chown jane:jane secret.txt && su - jane"}, "description": "You have permission to read the secret.txt file in Jane's home directory. How can you view the contents of the file without modifying or copying it?", "evaluation": {"type": "ground-truth", "answer": "You can use the 'cat' command to view the contents of the file without modifying it.", "checking": null, "example": {"type": "command", "data": "cat secret.txt"}}, "labels": ["permission", "file-management"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/richard -m richard && cd /home/richard && echo '7777777' > file1 && echo '8888888' > file2 && chmod 770 file* && chown richard:richard file* && su - richard"}, "description": "List all the permissions of the files in richard's home directory, make sure that the owner has full access and the group has read and write access, but others have no access", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/richard -maxdepth 1 -type f -ls | awk '{if ($3\":\"$4 != \"richard:richard\") { exit 1; } else { exit 0; } }') && (find /home/richard -maxdepth 1 -type f -ls | awk '{if ($1 !~ /^-..rw-------./) { exit 1; } else { exit 0; } }')"}, "example": {"type": "command", "data": "chmod 760 /home/richard/file*"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && echo 'secret' > /home/john/secret.txt && touch /home/jane/random.txt && chown john:john /home/john/secret.txt && chown jane:jane /home/jane/random.txt"}, "description": "Change the ownership of /home/john/secret.txt to jane and give jane read and write permissions while john retains read permission", "evaluation": {"type": "ground-truth", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/secret.txt | awk '{if ($1~/^-r.-r-xr--/) { if($3 == \"john\" && $4 == \"john\" && $5 == 7) { exit 0 } else { exit 1 } } else { exit 1 } }' && sudo su - jane -c 'cat /home/john/secret.txt' | if [ \"$(cat -)\" = \"secret\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chown jane /home/john/secret.txt && chmod 640 /home/john/secret.txt"}}, "labels": ["permission", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jenny -m jenny && cd /home && mkdir linux-permission && cd linux-permission && touch logfile && chmod 640 logfile && chgrp jenny logfile"}, "description": "jenny needs to read the content of logfile and modify it. However, john should not be able to do any of that. Provide a solution that grants read and write permission to jenny, but only read permission to john.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l jenny -c 'echo hi >> ~/linux-permission/logfile' && runuser -l john -c 'cat ~/linux-permission/logfile') | if [ \"$(cat -)\" = \"hi\"$'\\n'\"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 ~/linux-permission/logfile && setfacl -m u:jenny:rw ~/linux-permission/logfile && setfacl -m u:john:r ~/linux-permission/logfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir public_html && cd public_html && touch index.html && chmod 644 index.html && echo '<h1>Welcome to John's website!</h1>' > index.html && chown -R john:john /home/john && chmod -R 755 /home/john"}, "description": "Set permissions for a public_html directory available at /home/john/public_html/index.html allowing read access to the file and execute access to its parent directories for everyone, and at the same time, allowing for write access only to John.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john | grep public_html | awk '{if($1 != \"drwxr-xr-x\") {exit 1;}}' && ls -l /home/john/public_html | grep index.html | awk '{if($1 != \"-rw-r--r--\") {exit 1;}}' && sudo -u john touch /home/john/public_html/test-xyz && sudo -u john rm /home/john/public_html/test-xyz > /dev/null && if ! sudo -u guest touch /home/john/public_html/test-xyz 2>/dev/null; then exit 0; else exit 1; fi;"}, "example": {"type": "command", "data": "chmod 755 /home/john/public_html && chmod 644 /home/john/public_html/index.html && chmod 700 /home/john"}}, "labels": ["permission", "user", "directories"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && mkdir /data && chown john /data && chmod 700 /data"}, "description": "Make sure that john can only read and write to /data directory. No other user should have any access to this directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -ld /data | awk '{if ($1~/^drw-------/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 600 /data && chown john /data"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && useradd -s /bin/bash -d /home/user3 -m user3 && groupadd group1 && groupadd group2 && usermod -a -G group1 user1 && usermod -a -G group1 user2 && usermod -a -G group2 user3 && cd /home/user1 && echo 'confidential information' > secret.txt && chmod 770 secret.txt && chown user1:group1 secret.txt && su - user1"}, "description": "Set permissions and ownership so that only the members of group1 can read and write to the secret.txt file. user3 should not be able to read the file and should not be added to the group1. Assume that you do not have root access.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l user1 -c 'cat secret.txt' | if [ \"$(cat -)\" = \"confidential information\" ]; then runuser -l user2 -c 'echo hi >> /home/user1/secret.txt' && runuser -l user3 -c 'cat /home/user1/secret.txt' 2>/dev/null | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 770 /home/user1/secret.txt && chown user1:group1 /home/user1/secret.txt"}}, "labels": ["permission", "ownership", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && useradd -s /bin/bash -d /home/user3 -m user3 && touch /example.txt && chmod 600 /example.txt && chown user1:user1 /example.txt && echo 'Hello world!' > /example.txt"}, "description": "Make all three users be able to read /example.txt, but only user1 should be able to modify or delete it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l user1 -c 'cat /example.txt' && runuser -l user2 -c 'cat /example.txt' && runuser -l user3 -c 'cat /example.txt') | if [ \"$(cat -)\" = \"Hello world!\"$'\\n'\"Hello world!\"$'\\n'\"Hello world!\" ]; then exit 0; else exit 1; fi && runuser -l user1 -c 'echo \"new text\" >> /example.txt && cat /example.txt && rm /example.txt' && if [ ! -f /example.txt ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 644 /example.txt && chown user1:user1 /example.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir secret && touch secret/file.txt && echo 'this is a secret file' > secret/file.txt && chmod 400 secret/file.txt && chown jane:root secret/file.txt && su - jane"}, "description": "Jane has a secret file in her home directory called secret/file.txt. How can she allow John to read this file without changing its ownership or permissions? Execute the command to show that John can read the file contents.", "evaluation": {"type": "ground-truth", "answer": "this is a secret file\n", "checking": null, "example": {"type": "command", "data": "cat /home/jane/secret/file.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && touch /home/john/file.txt && touch /file.txt && chmod 777 /file.txt"}, "description": "Give john the ability to read and write to /file.txt, but not modify its permissions or delete it. Ensure the file's ownership is still root:root. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john cat /file.txt && (sudo -u john echo 'test' > /file.txt || exit 0) && sudo -u john cat /file.txt && (sudo -u john chmod 777 /file.txt && exit 1) || exit 0 && ls -l /file.txt | awk '{if ($1 ~ /-rwxrwxrwx./ && $3 == \"root\" && $4 == \"root\") { exit 0; } else { exit 1; }}')"}, "example": {"type": "command", "data": "chmod o-w /file.txt && chattr +i /file.txt && chown root:root /file.txt && setfacl -m u:john:rw /file.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "apt update && apt install apache2 -y && useradd -s /bin/bash -d /home/bob -m bob && cd /var/www/html && mkdir test && cd test && echo 'hello world!' > index.html && chown -R bob:bob /var/www/html/test"}, "description": "Bob wants to host a website in /var/www/html/test, but he can't access it. Help him by granting him the appropriate permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - bob -c 'cd /var/www/html/test && cat index.html' | if [ \"$(cat -)\" = \"hello world!\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod -R 755 /var/www/html/test"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && cd /home/john && echo 'Restricted' > restricted.txt && cd /home/jane && echo 'Top Secret' > topsecret.txt && chmod 440 restricted.txt && chmod 400 topsecret.txt"}, "description": "User `john` wants to view the content of `topsecret.txt` file owned by user `jane`. Give `john` permission to read the file without changing its ownership or permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/jane/topsecret.txt | if [ \"$(cat -)\" = \"Top Secret\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+r /home/jane/topsecret.txt"}}, "labels": ["permission", "read"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m bob && useradd -m alice && echo 'Hello, world!' > /home/bob/hello.txt && chmod 000 /home/bob/hello.txt && chown alice /home/bob/hello.txt && su - alice"}, "description": "Open /home/bob/hello.txt and read the content", "evaluation": {"type": "ground-truth", "answer": "Hello, world!", "checking": null, "example": {"type": "command", "data": "cat /home/bob/hello.txt"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /logs && touch /logs/access.log && touch /logs/error.log && chmod 740 /logs && chmod 640 /logs/*.log && chown root:users /logs"}, "description": "Create a directory /logs and add two files access.log and error.log to it. Set the directory permission in such a way that only root and users group can access it. Set access.log and error.log file permission in such a way that only root can read them whereas users group can't read or write to them.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -ld /logs | grep rwxr-----) && (ls -l /logs/access.log | grep -v rw------- || true) && (ls -l /logs/error.log | grep -v rw------- || true)"}, "example": {"type": "command", "data": "mkdir /logs && touch /logs/access.log && touch /logs/error.log && chmod 740 /logs && chmod 640 /logs/*.log && chown root:users /logs"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jimmy -m jimmy && cd /home/jimmy && mkdir music && cd music && mkdir rock && mkdir pop && touch rock/a && touch rock/b && touch pop/c && touch pop/d && find ~/music -type f -exec chmod 664 {} + && find ~/music -type d -exec chmod 775 {} + && chown -R jimmy:users /home/jimmy/music &&su - jimmy"}, "description": "jimmy wants to let bill access his music directory, but only to listen to rock music, not pop music. Help jimmy do that and give him access to only the \"rock\" directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l jimmy -c 'ls -l ~/music/rock' | awk '{if ($1~/^-rwxr-xr--/) { exit 0; } else { exit 1; } }') && (runuser -l bill -c 'ls -l ~/music' | awk '{if ((/^-r..r..../ && $NF==\"a\") || (/^-r..r..../ && $NF==\"b\")) { exit 0; } else { exit 1; } }') && (! runuser -l bill -c 'ls -l ~/music' | awk '{if ((/^-rwxr-xr--/)) { exit 0; } else { exit 1; } }')"}, "example": {"type": "command", "data": "usermod -a -G users bill && chmod 771 /home/jimmy/music && chmod 551 /home/jimmy/music/pop && chmod 771 /home/jimmy/music/rock && chmod 555 /home/jimmy/music/rock/pop && chown bill:jimmy /home/jimmy/music/rock && chgrp users /home/jimmy && chmod g+x /home/jimmy && chmod g+x /home/jimmy/music && chmod g+x /home/jimmy/music/rock && chmod g+x /home/jimmy/music/pop && find ~/music/rock -type f -exec chmod 664 {} + && find ~/music/rock -type d -exec chmod 775 {} +"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /data && chmod 777 /data && touch /data/file1 && touch /data/file2"}, "description": "Add a new group called \"datagroup\" and add \"user1\" to that group. Change the group owner of the /data directory and all its contents to \"datagroup\". Give read-write permission to the owner and group for the files in /data directory and its subdirectories, and read-write-execute permission for the owner and group for the directories in /data directory and its subdirectories", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -la /data | awk '{if (!($1~/^d..rw..rw./) || !($3~/^root$/) || !($4~/^datagroup$/)) { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "groupadd datagroup && usermod -a -G datagroup user1 && chgrp -R datagroup /data && chmod -R g+rw /data && find /data/ -type d -exec chmod g+rwx {} +"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && su - user1 && cd ~ && touch file1 && chmod 400 file1"}, "description": "Create a new user with the name user1, create a file named file1 in user1's home directory and make it read-only. As a superuser change the ownership of file1 to root.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l ~/file1 | awk '{if ($1~/^-r--------/) { exit 0; } else { exit 1; }}' && ls -l ~/file1 | awk '{if ($3~/user1/ && $4~/user1/) { exit 0; } else { exit 1; }}' && ls -l ~/file1 | awk '{if ($3~/root/ && $4~/root/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "sudo chown root:root ~/file1"}}, "labels": ["permission", "ownership"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir code && touch code/script.py && sudo chown jane:users code/script.py && sudo chmod g+w code/script.py"}, "description": "jane needs to share code/script.py with users group members, but doesn't want the group to have write permissions on the parent directory, how can this be done?", "evaluation": {"type": "ground-truth", "answer": "sudo chmod g+r code/script.py", "checking": null, "example": {"type": "command", "data": "sudo chmod g-w code"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir confidential && cd confidential && touch secret1 && touch secret2 && chmod 600 secret1 && chmod 640 secret2 && chown jane:jane secret1 && chown jane:jane secret2 && useradd -s /bin/bash -d /home/kevin -m kevin && groupadd confidential && usermod -a -G confidential jane && usermod -a -G confidential kevin"}, "description": "Create a group called \"confidential\" and give it read access to secret2, but not secret1", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l jane -c 'cat /home/jane/confidential/secret1' && runuser -l jane -c 'cat /home/jane/confidential/secret2' && runuser -l kevin -c 'cat /home/jane/confidential/secret1' && runuser -l kevin -c 'cat /home/jane/confidential/secret2') | if [ \"$(cat -)\" = \"secret1\"$'\\n'\"secret2\"$'\\n''cat: /home/jane/confidential/secret1: Permission denied'$'\\n'\"secret2\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 /home/jane/confidential/secret2 && chgrp confidential /home/jane/confidential/secret2"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "touch /var/log/messages && useradd -r syslog && chown syslog:syslog /var/log/messages && chmod g+w /var/log/messages"}, "description": "Allow the group 'users' to read the file /var/log/messages, but not modify or delete it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /var/log/messages | grep 'rw-r--r-- 1 syslog users' | wc -l | awk '{if ($1 == 1) { exit 0 } else { exit 1 }}'"}, "example": {"type": "command", "data": "chmod 644 /var/log/messages && chgrp users /var/log/messages"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/fred -m fred && cd /home/john && mkdir important_files && cd important_files && touch file1 && touch file2 && touch file3"}, "description": "Give fred the permission to read, write and execute files in ~/important_files", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l fred -c 'cat /home/john/important_files/file1' && runuser -l fred -c 'echo \"hello\" > /home/john/important_files/file4 && ls /home/john/important_files/') | if [ \"$(cat -)\" = \"\nfile1\nfile2\nfile3\nfile4\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod u+rw,g+rw,o-rwx /home/john/important_files && chown john:john /home/john/important_files && gpasswd -a fred john"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && echo 'secret message' > /home/jack/message && chown jack:jack /home/jack/message && chmod 440 /home/jack/message"}, "description": "Only the user jack and the root user should have read access to /home/jack/message. Set permissions accordingly.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/jack/message | awk '{if ($1~/^.-r.--r--r/ && $3==\"jack\" && $4==\"jack\") { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 440 /home/jack/message"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/kate -m kate && useradd -s /bin/bash -d /home/tom -m tom && useradd -s /bin/bash -d /home/jim -m jim && mkdir /data && chown tom:dataaccess /data && chmod 2770 /data && cd /data && touch sensitive.txt && echo 'This is sensitive information' > sensitive.txt"}, "description": "There is a file called sensitive.txt, which only members of the group \"dataaccess\" should be able to view. Kate wants to read the file too. Help her to read the file without changing its permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l kate -c 'cat /data/sensitive.txt' | if [ \"$(cat -)\" = \"This is sensitive information\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G dataaccess kate && newgrp dataaccess"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'Hello World!' > file.txt && chmod 666 file.txt && chown john:john file.txt && su - john"}, "description": "Print the content of /home/john/file.txt in the console.", "evaluation": {"type": "ground-truth", "answer": "Hello World!", "checking": null, "example": {"type": "command", "data": "cat /home/john/file.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && useradd -s /bin/bash -d /home/tom -m tom && cd /home/lisa && mkdir shared && cd shared && touch file && cd .. && chgrp -R tom shared && chmod -R g+rw shared && su - tom"}, "description": "tom wants to modify the content of /home/lisa/shared/file. What should he do to grant himself write permission without changing the file owner or group?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cd /home/lisa/shared && touch temp && sudo -u tom echo 'test' > temp && if [ \"$(cat file)\" = \"test\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+s /home/lisa/shared"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && touch testfile && chmod 700 testfile && chown john testfile && su - john"}, "description": "What are the permissions on ~/testfile? How can you change them so that the file can be read by other users on the system?", "evaluation": {"type": "verification", "answer": "The permissions on testfile are 700. To allow other users to read the file, you can change the permission to 744 or 755 using the `chmod` command.", "checking": null, "example": {"type": "command", "data": "chmod 755 ~/testfile"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'this is top secret' > /home/john/top_secret.txt && chmod 400 /home/john/top_secret.txt"}, "description": "Give read-only permission to the group 'employees' for the file /home/john/top_secret.txt.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/john/top_secret.txt | grep -q -- 'r--r-----.\\+') && (groups john | grep -q -- employees)"}, "example": {"type": "command", "data": "usermod -aG employees john && chmod g+r /home/john/top_secret.txt"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user -m user && mkdir /src && touch /src/file.cpp && chmod 0644 /src/file.cpp && chown user:user /src/file.cpp"}, "description": "Give the user group read access but disable the reading of the contents of /src/file.cpp for everyone except user.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /src | awk '{print $1,$3,$4}' | grep user && sudo cat /src/file.cpp) | if [ \"$(cat -)\" = \"-rw-r----- user user\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+r /src/file.cpp && chmod o-r /src/file.cpp"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && useradd -s /bin/bash -d /home/nick -m nick && useradd -s /bin/bash -d /home/gary -m gary && echo 'hello world!' > /home/emma/hello.txt && echo 'goodbye world!' > /home/nick/goodbye.txt && echo 'good afternoon!' > /home/gary/afternoon.txt && chown emma:emma /home/emma/hello.txt && chown nick:nick /home/nick/goodbye.txt && chown gary:gary /home/gary/afternoon.txt && chmod 640 /home/emma/hello.txt && chmod 640 /home/nick/goodbye.txt && chmod 640 /home/gary/afternoon.txt && chmod g+s /home/emma && chmod g+s /home/nick && chmod g+s /home/gary"}, "description": "Set up a group 'greeting' and make it so that emma's group can read hello.txt, nick's group can read goodbye.txt, but gary's group cannot access any of those. Also make sure all new files created under /home will belong to the 'greeting' group", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u emma cat /home/emma/hello.txt | grep 'hello world!' && sudo -u nick cat /home/nick/goodbye.txt | grep 'goodbye world!' && sudo -u gary cat /home/gary/afternoon.txt | grep 'good afternoon!' && find /home -type f -exec ls -l {} + | awk '{if ($4!~/greeting/ || ($1!~/^-r..------/ && $1!~/^d..------/)) {exit 1} else {exit 0} }'"}, "example": {"type": "command", "data": "groupadd greeting && usermod -a -G greeting emma && usermod -a -G greeting nick && chgrp greeting /home/emma/hello.txt && chgrp greeting /home/nick/goodbye.txt && chmod 440 /home/emma/hello.txt && chmod 440 /home/nick/goodbye.txt && chmod g+s /home/greeting"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'hello world' > file.txt && chmod o-rwx file.txt"}, "description": "Give the group named \"friends\" read and write permissions on the file ~/file.txt without changing other permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l ~/file.txt | awk '{if ($1~/^-..-.rw----/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "groupadd friends && usermod -a -G friends john && chmod g+rw file.txt"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/ernest -m ernest && useradd -s /bin/bash -d /home/alex -m alex && useradd -s /bin/bash -d /home/nate -m nate && useradd -s /bin/bash -d /home/ryan -m ryan && useradd -s /bin/bash -d /home/matthew -m matthew"}, "description": "Create a directory called /secret and a file called secret.txt inside it. Set the permissions such that only ernest, alex, and nate can read or write to the file, but cannot delete either the directory or file. Also, allow ryan to be able to read the file, but not write to it. Finally, matthew should not have any permissions to access the file or directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -Hu ernest ls /secret && sudo -Hu alex ls /secret && sudo -Hu nate ls /secret && sudo -Hu ryan cat /secret/secret.txt) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "mkdir /secret && touch /secret/secret.txt && chmod 644 /secret/secret.txt && chmod 755 /secret && chown ernest:ernest /secret/secret.txt && chown ernest:ernest /secret && chmod +r /secret/secret.txt && chmod +r /secret && chmod u-w /secret/secret.txt && chmod u-w /secret"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user -m user && mkdir /home/user/dir && touch /home/user/dir/file && chmod 400 /home/user/dir/file"}, "description": "Give the user group read and execute permission for /home/user/dir and its contents", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(chmod 550 /home/user/dir && chmod 440 /home/user/dir/file && sudo -u user ls -l /home/user/dir && sudo -u user ls -l /home/user/dir/file) | if [ \"$(cat -)\" = \"total 0\n-r--r----- 1 user user 0 Jun 10 12:00 file\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 550 /home/user/dir && chmod 550 /home/user && chgrp user /home/user/dir /home/user/dir/file"}}, "labels": ["permission", "user", "group"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jack -m jack && chown john:jack /home/john && chmod 2775 /home/john"}, "description": "Create a directory called /home/john shared with user jack so that both john and jack can read, write, and execute files in this directory. Make sure that all new files and subdirectories created inside the directory inherit the setgid bit and the correct group ownership.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john touch /home/john/test_file && sudo -u jack touch /home/john/test_file && find /home/john -type d -exec ls -ld {} + | awk '{if ($1~/^drwxrwsr-x/) { exit 0; } else { exit 1; }}' && find /home/john -type f -exec ls -l {} + | awk '{if ($1~/^-rw-rw-r--/) { exit 0; } else { exit 1; }}') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "mkdir -m 2775 -p /home/john && chown john:jack /home/john && chmod 2775 /home/john"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && useradd -s /bin/bash -d /home/rich -m rich && chgrp mark /home/rich && chmod 2770 /home/rich"}, "description": "Give mark and rich permission to create, edit, and delete files in each other's home directories but not in other users\u2019 directories.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u mark touch /home/rich/mark_file && sudo -u rich touch /home/mark/rich_file) && (sudo -u mark rm /home/rich/mark_file && sudo -u rich rm /home/mark/rich_file) && (ls /home | grep -Ev '^mark$|^rich$') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 770 /home/mark && chmod 770 /home/rich"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/sam -m sam && touch /home/sam/notes && chown sam:sam /home/sam/notes && chmod 760 /home/sam/notes && su - bob"}, "description": "As bob, How can I change the contents of /home/sam/notes?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "grep 'new content' /home/sam/notes && cat /home/sam/notes | wc -l | awk '{if ($1==1) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "echo 'new content' >> /home/sam/notes"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jenny -m jenny && chown jenny:jenny /home/jenny && chmod 111 /home/jenny && cd /home/jenny"}, "description": "jenny is a new user with restricted permissions to the home directory. She wants to read the contents of the /etc/apt/sources.list file but is unable to. Give her necessary permissions to read the file without using the sudo command.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /etc/apt/sources.list | grep deb | head -n 1 | awk '{if ($0==\"deb http://archive.ubuntu.com/ubuntu/ focal main restricted\") { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod o+r /etc/apt/sources.list"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/charlie -m charlie && echo 'secretfile' > /home/alice/secretfile && chown alice /home/alice/secretfile && chmod 400 /home/alice/secretfile"}, "description": "Alice wants to share her secret file with Bob and Charlie. Give them read permissions to the file, but do not allow them to modify it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u bob cat /home/alice/secretfile && sudo -u charlie cat /home/alice/secretfile && sudo -u charlie echo 'I hacked the secret file!' >> /home/alice/secretfile && sudo -u alice cat /home/alice/secretfile | grep -q 'I hacked the secret file!' && sudo -u bob echo 'I love the secret file!' >> /home/alice/secretfile && sudo -u alice cat /home/alice/secretfile | grep -q 'I love the secret file!' || test ! -s /home/alice/secretfile"}, "example": {"type": "command", "data": "chmod 444 /home/alice/secretfile && chgrp users /home/alice/secretfile && chmod g+r /home/alice/secretfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/linda -m linda && useradd -s /usr/sbin/nologin -g lindaadmin -d /home/admin -m admin && mkdir /home/linda/files && echo 'This is a secret file' > /home/linda/files/secret.txt && chown linda:linda /home/linda/files/secret.txt && chmod 640 /home/linda/files/secret.txt"}, "description": "Create a group called 'lindaadmin'. Disable shell access for its members. Grant reading permissions of /home/linda/files/secret.txt to lindaadmin group so that group members can read the file, but they can't delete it or see its content by mistake.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/linda/files/secret.txt | if [ \"$(cat -)\" = \"This is a secret file\" ]; then exit 0; else exit 1; fi && rm /home/linda/files/secret.txt || true"}, "example": {"type": "command", "data": "groupadd lindaadmin && usermod -a -G lindaadmin admin && chown :lindaadmin /home/linda/files/secret.txt && chmod 640 /home/linda/files/secret.txt"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && useradd -s /bin/bash -d /home/user3 -m user3 && echo 'hello123' > /home/user1/file1 && echo 'world456' > /home/user1/file2 && echo 'bird987' > /home/user2/file1 && echo 'cat234' > /home/user2/file2 && echo 'russia123' > /home/user3/file1 && echo 'vodka456' > /home/user3/file2 && chmod -R 400 /home/user*/file? && chmod -R 500 /home/user*"}, "description": "In a Linux system, there are three users: user1, user2, and user3. User1 and User2 are in the same group. User1 has two files, file1 and file2. User2 has two files, file1 and file2. User3 has two files, file1 and file2. Give permission to view file2 to User2 while still denying file2 view permission to the other two users. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - user2 -c 'cat ~/file2' && su - user2 -c 'cat ~/file1' && su - user1 -c 'cat ~/file2' && su - user1 -c 'cat ~/file1' && su - user3 -c 'cat ~/file2' && su - user3 -c 'cat ~/file1') | if [ \"$(cat -)\" = \"world456$'\\n'bird987$'\\n'cat234$'\\n'russia123$'\\n'vodka456$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 440 /home/user2/file2 && chgrp $(id -gn user1) /home/user2/file2"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && touch file1 && touch file2 && touch file3 && chmod 640 file1 && chmod 740 file2 && chmod 660 file3 && chown jane:users file1 && chown jane:users file2 && chown jane:users file3"}, "description": "Reset the permissions on `/home/jane` and all its files and directories so only the owner has execute permissions, but the group and everyone else has read permissions", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/jane | awk '{if ($1~/^d/ && $1~/r-x/) { exit 1; } else if ($1~/^-/ && $1~/rw-r--r--/) { exit 1; } else { exit 0; }}'; ls -l /home/jane/*.txt | awk '{if ($1~/^-/ && $1~/rw-r--r--/ && $3~/^jane/ && $4~/^users/) { exit 1; } else if ($1~/^-/ && $1~/rw-r-----/ && $3~/^jane/ && $4~/^users/) { exit 1; } else { exit 0; }}') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod -R 640 /home/jane && chmod -R g+r /home/jane && find /home/jane -type d -exec chmod g+x {} +"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'hello world' > test && chmod 640 test && chown john:john test && su - john"}, "description": "Execute ~/test and get the output.", "evaluation": {"type": "ground-truth", "answer": "hello world", "checking": null, "example": {"type": "command", "data": "chmod 777 test && ~/test"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m test && mkdir /home/test/super-secret && echo 'This message is super secret!' > /home/test/super-secret/note && chmod 400 /home/test/super-secret/note"}, "description": "Give the user `bob` read-only access to `/home/test/super-secret/note` without changing the file's permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - bob -c 'cat /home/test/super-secret/note'"}, "example": {"type": "command", "data": "usermod -a -G test bob"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "cd / && mkdir myfolder && touch /myfolder/file.txt && chmod 400 /myfolder/file.txt"}, "description": "Give read permission to the file.txt for other users except for owner and group with one command.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /myfolder/file.txt | grep -q '^.r--------.'"}, "example": {"type": "command", "data": "chmod o+r /myfolder/file.txt"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lily -m lily && useradd -s /bin/bash -d /home/jack -m jack && cd /home/lily && mkdir project && chmod 3777 project && cd project && touch file1 && touch file2 && touch file3 && chmod 660 file1 && chmod 440 file2 && chmod 222 file3 && chown lily file1 && chown jack file2 && chown root file3"}, "description": "Give lily and jack access to file1 and file2. Give lily and jack execute permissions to file3", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "if [ \"$(sudo -u lily cat /home/lily/project/file1)\" = \"\" ] && [ \"$(sudo -u jack cat /home/lily/project/file2)\" = \"\" ] && [ \"$(sudo -u lily ls /home/lily/project/file3)\" != \"-bash: cd: /home/lily/project/file3: Permission denied\" ] && [ \"$(sudo -u jack ls /home/lily/project/file3)\" != \"-bash: cd: /home/lily/project/file3: Permission denied\" ] && [ \"$(sudo -u lily ls -l /home/lily/project/file3 | awk '{print $1}')\" = \"-rw--w--w-\" ] && [ \"$(sudo -u jack ls -l /home/lily/project/file3 | awk '{print $1}')\" = \"-rw--w--w-\" ] ; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 664 /home/lily/project/file1 && chmod 440 /home/lily/project/file2 && chmod +x /home/lily/project/file3 && chown lily /home/lily/project/file1 && chown jack /home/lily/project/file2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && touch secret && chmod go-r secret && chown jane secret &&su - jane"}, "description": "Create a file called 'secret' and make sure it's only readable by jane herself", "evaluation": {"type": "ground-truth", "answer": "You cannot read the file 'secret' because you are not the owner or in the group of the file", "checking": null, "example": {"type": "command", "data": "sudo su - jane && echo \"this is a secret message\" >> secret && chmod go-r secret && exit && cat /home/jane/secret"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir files && cd files && touch txt1.txt && touch txt2.txt"}, "description": "Give read and write permissions to user and group, but deny any access to everyone else for txt1.txt and txt2.txt", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/john/files/txt1.txt | awk '{if ($1~/^-..rw....-/) { exit 0; } else { exit 1; }}') && (ls -l /home/john/files/txt2.txt | awk '{if ($1~/^-..rw....-/) { exit 0; } else { exit 1; }}')"}, "example": {"type": "command", "data": "chmod ug=rw,o= /home/john/files/txt1.txt && chmod ug=rw,o= /home/john/files/txt2.txt"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/david -m david && useradd -s /bin/bash -d /home/greg -m greg && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/susan -m susan && cd /home && mkdir shared && chgrp shared && chmod 2775 shared"}, "description": "Make a directory called shared that everyone can write to, but only the owner of a file can delete it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home | grep shared | awk '{if ($1~/^d...rwxrwt./) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod g+ws /home/shared"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/cathy -m cathy && useradd -s /bin/bash -d /home/andy -m andy && cd /home/cathy && mkdir data && echo 'top secret data' > data/file1 && chown cathy data/file1 && cd /home/andy && echo '0123456789' > file2"}, "description": "Grant read permission to andy for file1 located in cathy's home directory, but make sure that cathy's read access isn't compromised. Also, make sure that andy doesn't have access to any other file or directory in cathy's home directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l andy -c 'cat /home/cathy/data/file1' && runuser -l andy -c 'ls /home/cathy/data/' && (runuser -l andy -c 'ls /home/cathy' | wc -l) == \"1\") | if [ \"$(cat -)\" = \"top secret datafile1\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o-rwx /home/cathy && chmod o+rx /home/cathy && setfacl -m u:andy:r /home/cathy/data/file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && mkdir /shared && chown alice /shared && chmod u+rwx,g+rx,o-rwx /shared && su - alice"}, "description": "Alice and Bob share a directory /shared - Alice can create, read, modify and delete files in it, whereas Bob can only read files but cannot create, modify or delete them.  Neither Alice nor Bob have root access.  Create a file in /shared, change its owner to bob, and ensure that Bob cannot modify or delete it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(echo 'data' > /shared/testfile && chown bob /shared/testfile && (echo 'new data' >> /shared/testfile 2>&1 || echo 'cannot modify') && (rm /shared/testfile 2>&1 || echo 'cannot delete')) | if [ \"$(cat -)\" = \"cannot modify$'\\n''cannot delete\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": ""}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && cd /home/sam && mkdir important-files && touch important-files/file1 important-files/file2 important-files/file3 && chmod 400 important-files/* && chown sam:sam important-files/* && su - sam"}, "description": "A user called Sam has created a set of important files in /home/sam/important-files. These files should be accessible to the user Sam only and should not be deletable, even by Sam. Please make sure that this requirement is fulfilled.", "evaluation": {"type": "command", "answer": null, "checking": {"type": "command", "data": "(find /home/sam/important-files -type f -perm -004 || ! find /home/sam/important-files -type f -perm -400 > /dev/null) && stat -c '%U %G' /home/sam/important-files/* | grep -v 'sam sam' | wc -l | grep -w 0"}, "example": {"type": "command", "data": "chmod 400 /home/sam/important-files/* && chattr +a /home/sam/important-files/*"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jimmy -m jimmy && useradd -s /bin/bash -d /home/sam -m sam && useradd -s /bin/bash -d /home/robin -m robin && chmod 777 /var/spool/cron/crontabs && echo '* * * * * echo \"hello\" >> /tmp/test.txt' > /var/spool/cron/crontabs/robin && chown robin:crontab /var/spool/cron/crontabs/robin && chmod 600 /var/spool/cron/crontabs/robin"}, "description": "Add a cron job to dump the content of /etc/passwd file every ten minutes and store the output in /home/sam/output.txt. Set appropriate permissions so that only the user robin can edit this job.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo grep -q '*/10 * * * * cat /etc/passwd >> /home/sam/output.txt' /var/spool/cron/crontabs/robin"}, "example": {"type": "command", "data": "echo '*/10 * * * * cat /etc/passwd >> /home/sam/output.txt' >> /var/spool/cron/crontabs/robin && chmod 600 /var/spool/cron/crontabs/robin"}}, "labels": ["permission", "cron"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && cd /home/jack && mkdir test && cd test && touch file1 && touch file2 && chmod 644 file1 && chmod 600 file2"}, "description": "Change the permission of file1 such that the owner, group, and others have read and write permission and the permission of file2 such that the owner has read and write permission, the group has read permission, and others have no permissions", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l file1 | grep -q 'rw-rw-r--') && (ls -l file2 | grep -q 'rw-r-----') && (stat -c \"%a\" file2 | grep -q '640')"}, "example": {"type": "command", "data": "chmod 666 file1 && chmod 640 file2"}}, "labels": ["permission", "file"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jim -m jim && touch /secure_file && chmod 400 /secure_file && chown root:root /secure_file"}, "description": "Grant user jim permission to read the contents of /secure_file without changing its ownership or permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - jim -c 'cat /secure_file' | if [ \"$(cat -)\" = \"Content of secure file\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G root jim && chmod g+r /secure_file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd user1 && useradd user2 && useradd user3 && mkdir /var/shared && chgrp users /var/shared && chmod g+rwxs /var/shared"}, "description": "Create a file called \"shared_doc\" in the /var/shared directory. Give user1 and user2 read and write access to the file and user3 read-only access. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /var/shared | grep shared_doc | awk '{if ($1~/^-..rw..w.(.*)/) { exit 0; } else { exit 1; } }') && (getfacl /var/shared/shared_doc | grep -q 'user::rwx' && getfacl /var/shared/shared_doc | grep -q 'group::rw-' && getfacl /var/shared/shared_doc | grep -q 'user:user1:rwx' && getfacl /var/shared/shared_doc | grep -q 'user:user2:rwx' && getfacl /var/shared/shared_doc | grep -q 'user:user3:r--') "}, "example": {"type": "command", "data": "touch /var/shared/shared_doc && chmod 640 /var/shared/shared_doc && chown root:users /var/shared/shared_doc && setfacl -m 'u:user1:rw-' /var/shared/shared_doc && setfacl -m 'u:user2:rw-' /var/shared/shared_doc && setfacl -m 'u:user3:r--' /var/shared/shared_doc"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && touch /home/john/purchases && touch /home/john/credit_card_info && chmod 440 /home/john/purchases && chmod 640 /home/john/credit_card_info"}, "description": "John needs to share /home/john/purchases with the accounting department so they can see his expenses, but nobody else should be able to view this file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(getfacl /home/john/purchases | awk '{if ($0~/^user::rw-$/ && $0~/^user:john:r--$/ && $0~/^group::r--$/ && $0~/^group:accounting:r--$/ && $0~/^other::---$/ && $0~/^default:user::rw-$/ && $0~/^default:group::r--$/ && $0~/^default:other::---$/) { exit 0; } else { exit 1; }}')"}, "example": {"type": "command", "data": "setfacl -m u:john:r-- /home/john/purchases && setfacl -m g:accounting:r-- /home/john/purchases && setfacl -m d:u::rw-,d:g::r--,d:o::--- /home/john && getfacl /home/john/purchases && getfacl /home/john"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/user && cd /home/user && touch file1.txt && touch file2.txt && touch file3.txt && chmod 755 . && chmod 744 file1.txt && chmod 664 file2.txt && chmod 600 file3.txt"}, "description": "What are the permissions of each file and directory in /home/user? Provide the output in the following format: [file/directory name]: [permission string]. For example, file1.txt: -rwxr--r--.", "evaluation": {"type": "ground-truth", "answer": "user: user\ngroup: user\n\n/home/user:\ndrwxr-xr-x\n\n/home/user/file1.txt:\n-rwxr--r--\n\n/home/user/file2.txt:\n-rw-rw-r--\n\n/home/user/file3.txt:\n-rw-------", "checking": null, "example": {"type": "command", "data": "ls -l /home/user/"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "sudo adduser testuser && cd /home/testuser && touch file1 && touch file2 && chown testuser file1 && chgrp testuser file1 && chmod 771 file1 && chmod 700 file2"}, "description": "Create a new user 'testuser' and make file1 accessible to the group 'testuser' with 'rwx' permission. Restrict file2 to the owner 'testuser' only", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u testuser ls -l | awk '{print $1, $3, $4}' | grep '^-rwxrwx--x testuser testuser' > /dev/null && sudo -u testuser ls -l | awk '{print $1, $3, $4}' | grep '^-r-------- testuser testuser' > /dev/null) || (sudo -u testuser ls -l | awk '{print $1, $3, $4}' | grep '^-rwxrwx--x testuser testuser' > /dev/null && ! sudo -u testuser ls -l | awk '{print $1, $3, $4}' | grep '^-r-------- testuser testuser' > /dev/null) || (! sudo -u testuser ls -l | awk '{print $1, $3, $4}' | grep '^-rwxrwx--x testuser testuser' > /dev/null && sudo -u testuser ls -l | awk '{print $1, $3, $4}' | grep '^-r-------- testuser testuser' > /dev/null)"}, "example": {"type": "command", "data": "chmod 771 /home/testuser/file1 && chmod 700 /home/testuser/file2"}}, "labels": ["permission", "user", "group"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jim -m jim && useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/mike -m mike && cd /home && mkdir shared_folder && chgrp shared_folder ./shared_folder && chmod 770 ./shared_folder && cd ./shared_folder && touch test_file && chown jim:jane ./test_file"}, "description": "Jim and Jane should have read/write access to test_file, and Mike should have no access. Ensure that any new files created in shared_folder automatically inherit the same access permissions, and that users can only delete files they own.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jim cat /home/shared_folder/test_file && sudo -u jane cat /home/shared_folder/test_file ) | if [ \"$(cat -)\" = \"test\"$'\\n'\"test\" ]; then exit 0; else exit 1; fi && ! (sudo -u mike cat /home/shared_folder/test_file)"}, "example": {"type": "command", "data": "cd /home && setfacl -d -m u::rwx,g::rwx,o::--- shared_folder && setfacl -R -m u::rwx,g::rwx,o::--- shared_folder && setfacl -R -m d:u::rwx,d:g::rwx,d:o::--- shared_folder"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && useradd -s /bin/bash -d /home/sue -m sue && groupadd fileadmin && usermod -a -G fileadmin sam && usermod -a -G fileadmin sue && mkdir /data && chgrp fileadmin /data && chmod 2775 /data"}, "description": "Create a directory named /data containing a file named file1 that has 400 permission and is owned by sam:fileadmin and a file named file2 that has 640 permission and is owned by sue:fileadmin. Give user sam read permission to both files. Give user sue write permission to file1 and file2", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /data/file1 | grep -q sam) && (ls -l /data/file1 | grep -q fileadmin) && (ls -l /data/file1 | grep -q '^......r--') && (ls -l /data/file2 | grep -q sue) && (ls -l /data/file2 | grep -q fileadmin) && (ls -l /data/file2 | grep -q '^.....rw-')"}, "example": {"type": "command", "data": "touch /data/file1 && touch /data/file2 && chmod 400 /data/file1 && chmod 640 /data/file2 && chown sam:fileadmin /data/file1 && chown sue:fileadmin /data/file2 && chmod u+r /data/file1 && chmod g+r /data/file1 && chmod u+rw /data/file2 && chmod g+rw /data/file2"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'my secret message' > top_secret && chmod 400 top_secret && chown john top_secret &&su - john"}, "description": "The user 'john' has a file named 'top_secret' in his home directory. You need to read the contents of the file without changing its permission or being the owner of the file.", "evaluation": {"type": "operation-checking", "answer": "my secret message", "checking": {"type": "command", "data": "cat /home/john/top_secret"}, "example": {"type": "command", "data": "sudo -u john cat /home/john/top_secret"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "apt update && apt install sudo -y && useradd -s /bin/bash -d /home/emma -m emma && useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && groupadd developers && usermod -a -G developers emma && usermod -a -G developers alice && usermod -a -G developers bob && chmod g+s /home/emma && touch /home/emma/file && echo 'emma ALL=(%developers) NOPASSWD: /usr/bin/vim' >> /etc/sudoers && chown alice:developers /home/emma/file"}, "description": "There are three users `emma`, `alice`, `bob`, and a group called `developers`, `emma` is a member of the group. `alice`'s primary group is `developers`, but `bob` is not in the group. `emma`'s home directory is `/home/emma` with permission 2770. Create a file inside `/home/emma` and set the group owner to `developers`. Set the file's group permission bits so that `alice` can read and write to it, while ensuring `bob` cannot. Finally, configure `emma`'s sudo access to allow members of the `developers` group to execute `/usr/bin/vim` with sudo, without password.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u alice cat /home/emma/file && sudo -u bob cat /home/emma/file && sudo -u emma vim) | if [ \"$(cat -)\" = \"alicecontent\"$'\\n''cat: /home/emma/file: Permission denied'$'\\n'; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 0660 /home/emma/file && chgrp developers /home/emma/file"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/susan -m susan && cd /home/susan && mkdir testdir && touch testdir/testfile && echo 'this is a test' > testdir/testfile"}, "description": "Give the group 'editors' write access to testfile, without changing any other permissions or ownerships.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "[[ $(stat -c '%a' /home/susan/testdir/testfile) == '640' ]] && [[ $(stat -c '%G' /home/susan/testdir/testfile) == 'editors' ]] && [[ $(sudo -u susan cat /home/susan/testdir/testfile) == 'this is a test' ]] && sudo -u susan sh -c 'echo add more text >> /home/susan/testdir/testfile' && sudo -u susan cat /home/susan/testdir/testfile | grep -q 'add more text' && sudo -u editors sh -c 'echo add edit text >> /home/susan/testdir/testfile' && sudo -u susan cat /home/susan/testdir/testfile | grep -q 'add edit text'"}, "example": {"type": "command", "data": "chgrp editors /home/susan/testdir/testfile && chmod 640 /home/susan/testdir/testfile"}}, "labels": ["linux permissions", "groups"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m alice && useradd -m bob && useradd -m charlie && echo 'topsecret' > /topsecret && chown root:root /topsecret && chmod 600 /topsecret && chattr +i /topsecret"}, "description": "Alice and Bob need to be able to read '/topsecret', but Charlie must not be able to do so. How can you achieve this while retaining the file's immutable attribute?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l alice -c 'cat /topsecret' && runuser -l bob -c 'cat /topsecret' && runuser -l charlie -c 'cat /topsecret') | if [ \"$(cat -)\" = \"topsecret\"$'\\n'\"topsecret\"$'\\n'\"cat: /topsecret: Permission denied\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "setfacl -m u:alice:rw /topsecret && setfacl -m u:bob:rw /topsecret && chattr +a /topsecret && chattr -i /topsecret"}}, "labels": ["permission", "file attribute"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/mary -m mary && useradd -s /bin/bash -d /home/anna -m anna && cd /home/ && touch test.txt && chmod 764 test.txt &&chown john test.txt && usermod -aG adm john && usermod -aG student anna && usermod -aG staff mary"}, "description": "Set the permission of test.txt to 774 for the owner and group and 666 for others without changing the ownership. Notice that both group members can't modify the file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "[ -r /home/test.txt ] && { { [ $(stat -c \"%a\" /home/test.txt) == \"664\" ] || [ $(stat -c \"%a\" /home/test.txt) == \"766\" ]; } && { [ $(stat -c \"%U\" /home/test.txt) == \"john\" ] && [ $(stat -c \"%G\" /home/test.txt) == \"john\" ]; } && { [ $(stat -c \"%A\" /home/test.txt) == \"rw-rw-r--\" ] || [ $(stat -c \"%A\" /home/test.txt) == \"rw-rw-rw-\" ]; } ; } || exit 1"}, "example": {"type": "command", "data": "chmod 774 /home/test.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /data && useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && chgrp dataaccess /data && chmod 770 /data && touch /data/secret_file && chown user1:dataaccess /data/secret_file"}, "description": "Give user2 read access to secret_file without changing ownership or group permissions. Verify that user2 can read the file and that user1 can still read and write to it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo su - user2 -c 'cat /data/secret_file' | if [ \"$(cat -)\" = \"This is a secret file.\"$'\\n' ]; then exit 0; else exit 1; fi && sudo su - user1 -c 'echo \"Adding a new line.\" >> /data/secret_file' && sudo su - user1 -c 'cat /data/secret_file' | if [ \"$(cat -)\" = \"This is a secret file.\"$'\\n'\"Adding a new line.\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+r /data/secret_file"}}, "labels": ["permission", "ownership", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user -m user && echo '1234' | passwd user --stdin"}, "description": "Change the password for user to mypass. User should not be able to change the password.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - user -c 'echo mypass | passwd --stdin user' && su - user -c 'echo 1234 | sudo -S echo 1' |& grep -q 'Sorry, user .* is not allowed to change the password\\.'"}, "example": {"type": "command", "data": "echo 'user:1q2w3e' | chpasswd && chage -m 90 -M 180 -W 7 user"}}, "labels": ["password", "permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "groupadd research && groupadd finance && useradd -m john && useradd -m sarah && usermod -aG research john && usermod -aG finance sarah && cd /home && mkdir research-dir && mkdir finance-dir"}, "description": "Set the correct permissions so that members of the research group can read and write files in /home/research-dir but not delete files, while members of the finance group can only read files in /home/finance-dir.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john touch /home/research-dir/test && sudo -u john rm -f /home/research-dir/test && sudo -u sarah touch /home/finance-dir/test && echo 'read-only' >> /home/finance-dir/test && grep -q sarah /etc/group && getfacl /home/research-dir | awk '{if ($0~/group:research:rwx/) { exit 0; } else { exit 1; } }' && getfacl /home/finance-dir | awk '{if ($0~/group:finance:r--/) { exit 0; } else { exit 1; } }') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g=rwx /home/research-dir && chmod g-w /home/research-dir && chgrp research /home/research-dir && chmod g=r /home/finance-dir && chgrp finance /home/finance-dir"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/maria -m maria && cd /home/maria && mkdir reports && cd reports && mkdir week1 && touch week1/report.txt && find ~/reports -type f -exec chmod 640 {} + && find ~/reports -type d -exec chmod 750 {} + && chown maria:maria week1/report.txt &&su - maria"}, "description": "Maria wants to give her colleague Alex read-only access to the week1 folder, but he should not be able to modify or delete any files in it or any subfolders. How can she achieve this?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l alex -c 'cd ~/reports/week1 && touch newfile.txt && echo testing123' > /dev/null ; echo $?) | if [ \"$(cat -)\" = \"1\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -aG maria alex && sudo chattr +i ~/reports/week1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && mkdir /home/john/photos && touch /home/john/photos/pic1 && chown john:john /home/john/photos/pic1 && chmod o+r /home/john/photos/pic1"}, "description": "john wants to share a picture with the group 'family.' But he doesn't want to make the whole directory readable. What permission settings should he use to allow members of the group 'family' to view the picture while maintaining the other permissions? Also, add a user 'jane' to the 'family' group and confirm that she can view the picture.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "getfacl /home/john/photos/pic1 | awk '{if ($1!~/^user/ || $2!~/^group:family:/ || $3~/^other/) { exit 1; } else { exit 0; } }'"}, "example": {"type": "command", "data": "chmod 640 /home/john/photos/pic1 && chgrp family /home/john/photos/pic1 && chmod g+r /home/john/photos/pic1 && usermod -a -G family jane"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/alice -m alice && touch /home/sharedfile && chown alice:bob /home/sharedfile && chmod 664 /home/sharedfile && usermod -g alice bob"}, "description": "Bob and Alice share a file in their new home directories /home/bob and /home/alice. How can we ensure Alice and Bob can both read and write to the file but nobody else can?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/sharedfile | grep alice && ls -l /home/sharedfile | grep bob && ls -l /home/sharedfile | grep 'rw..rw..r--') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 660 /home/sharedfile && chown alice:bob /home/sharedfile"}}, "labels": ["file", "permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/michael -m michael && useradd -s /bin/bash -d /home/samantha -m samantha && groupadd developers && usermod -a -G developers michael && usermod -a -G developers samantha && mkdir /var/project && chgrp developers /var/project && chmod 2770 /var/project"}, "description": "Create a directory '/var/project/sales' for users michael and samantha with no permissions for 'others'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -ld /var/project/sales | awk '{if ($1 == \"drwxrws---\") { exit 0; } else { exit 1; }}') && (sudo -u michael touch /var/project/sales/file1 && sudo -u samantha touch /var/project/sales/file2 && (ls -l /var/project/sales | grep -q \"^-rw\"))"}, "example": {"type": "command", "data": "mkdir /var/project/sales && chmod 770 /var/project/sales && setfacl -m u:michael:rwX /var/project/sales && setfacl -m u:samantha:rwX /var/project/sales"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir -p public/private && touch public/pub1 && touch public/pub2 && touch private/priv1 && touch private/priv2"}, "description": "Give your friend, Sarah, read access to John's public folder and write access to John's private folder", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/john/public -type f ! -perm /444 -ls && find /home/john/private -type d ! -perm /333 -ls && find /home/john/private -type f ! -perm /222 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod -R 755 /home/john/public && chmod -R 757 /home/john/private && chown john /home/john/private && chown john /home/john/public && setfacl -R -m u:sarah:r /home/john/public && setfacl -R -m u:sarah:rw /home/john/private"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && useradd -s /bin/bash -d /home/john -m john && echo 'secret text' > /home/alex/secret.txt && chmod 640 /home/alex/secret.txt && chown alex:alex /home/alex/secret.txt"}, "description": "Make the secret.txt file only readable by alex and writable only by john", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/alex | grep secret | awk '{if ($1~/^-r.....rwx/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 460 /home/alex/secret.txt && chown john:alex /home/alex/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && cd /home/jack && echo 'hello world' > test.txt && chmod a+x test.txt"}, "description": "How do you prevent the user 'bill' from viewing the contents of test.txt?", "evaluation": {"type": "ground-truth", "answer": "chmod o-r test.txt", "checking": "ls -l /home/jack/test.txt | awk '{if ($1 ~ /.*r--.*/ && $3 == \"jack\" && $4 == \"jack\") { exit 0; } else { exit 1; } }'", "example": {"type": "command", "data": "chmod o-r test.txt && su - bill && cat /home/jack/test.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/luke -m luke && useradd -s /bin/bash -d /home/max -m max && groupadd developers && usermod -a -G developers bob && usermod -a -G developers jane && cd /home && mkdir project && cd project && touch projectcode && chgrp developers projectcode && chmod g+w projectcode"}, "description": "Suppose you have a directory called /home/project that contains a file called projectcode that should only be writable to users in the group \"developers\". Set the appropriate permissions and group ownership so that only users in the group \"developers\" can edit the file and create new files in the directory, while also ensuring that files created by group members inherit the group ownership of the parent directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/project | awk '{if ($1~/^drwxrws---/ && $4==\"developers\") { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod g+s /home/project && chmod 770 /home/project"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jim -m jim && chown jim:jim /home/jim && chmod 700 /home/jim && su - jim"}, "description": "Create a new user named jim with a home directory and log in as jim. Ensure that no other user can access or modify jim's home directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -ld /home/jim | grep '^drwx------') && (ls -la /home | grep '^drwx------.*jim')"}, "example": {"type": "command", "data": "chmod 700 /home/jim && chown jim:jim /home/jim"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && echo 'hello world' > /home/bob/test && chmod 600 /home/bob/test"}, "description": "Bob wants to share the contents of his test file with Alice, how can he do that without giving her access to his user account?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - alice -c 'cat /tmp/alicefile' | if [ \"$(cat -)\" = \"hello world\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "touch /tmp/alicefile && chmod 660 /tmp/alicefile && chown bob:alice /tmp/alicefile && cat /home/bob/test > /tmp/alicefile"}}, "labels": ["permission", "file sharing"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": ""}, "description": "How to give a user read and write permissions on a file?", "evaluation": {"type": "ground-truth", "answer": "chmod u+rw FILENAME", "checking": null, "example": {"type": "command", "data": "touch testfile && chmod u+rw testfile && ls -l testfile"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jim -m jim && cd /home/jim && touch file.txt && chmod 444 file.txt"}, "description": "jim wants to delete and edit his file but he couldn't, help him to edit and delete file.txt but make sure he can't modify the file permissions", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(echo 'jim' > /home/jim/file.txt && rm /home/jim/file.txt && touch /home/jim/file.txt && chmod 444 /home/jim/file.txt && echo 'hello world' > /home/jim/file.txt && cat /home/jim/file.txt) | if [ \"$(cat -)\" = \"hello world\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod +w /home/jim/file.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && echo 'test' > test && chown bob test && chmod 460 test"}, "description": "As the user bob, try to modify the content of the test file. What was the error message and how can we fix it?", "evaluation": {"type": "multiple-choice", "options": ["Permission denied. We can fix it by adding write permission to the file.", "Permission denied. We can fix it by adding execute permission to the file.", "Permission denied. We can fix it by adding read permission to the file.", "Permission denied. We can fix it by changing the ownership of the file."], "answer": "Permission denied. We can fix it by adding write permission to the file.", "explanation": "The file has only read and write access for the owner, but bob needs write access to modify the file. We can fix it by adding write permission to the file using the command 'chmod u+w test'."}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /testdir && chmod 777 /testdir"}, "description": "What is the effect of setting 777 permission on /testdir and how can it be made more secure?", "evaluation": {"type": "ground-truth", "answer": "Setting 777 permission on /testdir gives read, write and execute access to all users on the system, including unauthorized users. To make it more secure, the permission can be changed to 755 which allows read, write and execute access to the owner and read and execute access to group and others.", "checking": null, "example": {"type": "command", "data": "chmod 755 /testdir"}}, "labels": ["permission", "security"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lucas -m lucas && touch /file && chmod 777 /file"}, "description": "How can lucas read /file without changing its permissions?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - lucas -c 'cat /file' | if [ \"$(cat -)\" = \"\" ]; then exit 1; else exit 0; fi"}, "example": {"type": "command", "data": "setfacl -m user:lucas:r /file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && useradd -s /bin/bash -d /home/jim -m jim && useradd -s /bin/bash -d /home/joe -m joe && touch /home/sam/top_secret.txt && chown sam:sam /home/sam/top_secret.txt && chmod 600 /home/sam/top_secret.txt && su - jim"}, "description": "jim needs to read /home/sam/top_secret.txt without modifying or deleting it. How can he do that?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jim cat /home/sam/top_secret.txt && sudo -u jim echo test > /home/sam/top_secret.txt && sudo -u jim mkdir /home/sam/test_dir) | if [ \"$(cat -)\" = \"Top secret.\" ]; then exit 0; else exit 1; fi && [ ! -d /home/sam/test_dir ] && [ \"$(sudo -u jim cat /home/sam/top_secret.txt)\" = \"Top secret.\" ] && [ \"$(sudo -u joe cat /home/sam/top_secret.txt)\" = \"Top secret.\" ] && [ \"$(sudo -u sam cat /home/sam/top_secret.txt)\" = \"Top secret.\" ]"}, "example": {"type": "command", "data": "chmod 644 /home/sam/top_secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jenny -m jenny && echo 'Where is the flag?' > secret_flag && chmod 400 secret_flag && chown jenny secret_flag"}, "description": "There is a file called \"secret_flag\" that only the user \"jenny\" can read. You need to find the flag without changing the ownership of the file or creating a new user.", "evaluation": {"type": "operation-checking", "answer": "Where is the flag?", "checking": {"type": "command", "data": "sudo -u jenny cat ~/secret_flag"}, "example": {"type": "command", "data": ""}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && cd /home/mark && mkdir important_directory && touch important_file.txt && echo 'this is a secret' > important_file.txt"}, "description": "Set permission for /home/mark/important_directory so that only the user 'mark' and the group 'admins' can access it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - mark -c 'ls -l /home/mark/important_directory' | awk '{if ($1 !~ /^d.rwxr-x--./) { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "groupadd admins && usermod -aG admins mark && chown mark:admins /home/mark/important_directory && chmod 750 /home/mark/important_directory"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'Africa54' > /home/john/file && chmod 470 /home/john/file && chown john /home/john/file"}, "description": "Change the file ownership to mike and give him read and write permission. Also make sure that he can't delete the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/john/file && sudo -u mike cat /home/john/file; sudo -u mike echo test > /home/john/file && echo success) | if [ \"$(cat -)\" = \"-r--rwx--- 1 mike john 8 Oct  6 07:34 /home/john/file\"$'\\n'\"Africa54\nsuccess\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chown mike /home/john/file && chmod u=rw,g=r,o= /home/john/file && chmod 700 /home/john"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/admin -m admin && useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && echo 'highsecurity' > /home/admin/securefile && echo 'somedata' > /home/user1/file1 && echo 'otherdata' > /home/user2/file2 && chmod 040 /home/admin/securefile"}, "description": "Give user1 and user2 read-only access to /home/admin/securefile, but user2 cannot see the file at all. Also, user1 should not have access to user2's file and vice versa.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u user1 cat /home/user1/file1 && sudo -u user1 cat /home/admin/securefile || true) | if [ \"$(cat -)\" = \"somedata$'\\n'highsecurity$'\\n'\" ]; then (sudo -u user2 cat /home/user2/file2 && sudo -u user2 cat /home/admin/securefile || true) | if [ \"$(cat -)\" = \"otherdata$'\\n'\" ]; then exit 0; else exit 1; fi; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 044 /home/admin/securefile && chown admin:user1 /home/user1/file1 && chown admin:user2 /home/user2/file2 && chmod 040 /home/admin/securefile && chmod 040 /home/user2/file2 && chmod 400 /home/admin/securefile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/dev -m dev && apt update && apt install vim -y && cd /home/dev && touch test.c && echo '#include <stdio.h>\n int main(){ \n\t printf(\"Hello, World!\\n\"); \n\t return 0; \n}' >> test.c && chown dev test.c && chgrp dev test.c && chmod 640 test.c"}, "description": "A developer needs to edit a C file located in his home directory, but cannot execute it. Change the file permissions so that the developer can edit the file and execute it when it is compiled without granting execution permission to other users.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/dev/test.c && gcc /home/dev/test.c -o /home/dev/test) | if [ \"$(cat -)\" = \"Hello, World!\\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod u+rwx,g+rwx,o-rwx /home/dev/test.c"}}, "labels": ["permission", "developer"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/user && touch /home/user/file && chown root:user /home/user/file && chmod 440 /home/user/file && useradd -m test && usermod -a -G user test"}, "description": "A user belonging to the group 'user' should be able to read the contents of the file '/home/user/file' . Fix the necessary permissions to enable this access.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - test -c 'cat /home/user/file') | if [ \"$(cat -)\" = \"Hello world\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+r /home/user/file"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/philip -m philip && mkdir /home/philip/myfolder && touch /home/philip/myfolder/myfile1 && touch /home/philip/myfolder/myfile2 && touch /home/philip/myfolder/myfile3 && chown philip /home/philip/myfolder/myfile1 && chgrp philip /home/philip/myfolder/myfile2 && chmod 640 /home/philip/myfolder/myfile3"}, "description": "List all the files in /home/philip/myfolder directory along with their permission details", "evaluation": {"type": "ground-truth", "answer": "total 12\n-rw-r----- 1 philip philip 0 Jun 10 12:00 myfile1\n-rw-r----x 1 philip philip 0 Jun 10 12:00 myfile2\n-rw-r----- 1 philip philip 0 Jun 10 12:00 myfile3", "checking": null, "example": {"type": "command", "data": "ls -l /home/philip/myfolder"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && cd /home/sam && touch foo && chmod 717 foo && su - sam"}, "description": "As an administrator, you need to make sure that sam is able to read the contents of the file 'foo' without being able to modify or execute it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo su sam -c 'cat /home/sam/foo' | if [ \"$(cat -)\" = \"hello\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 744 /home/sam/foo"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sarah -m sarah && touch file1 && touch file2 && chown sarah file1 && chgrp sarah file2 && chmod 440 file1 && chmod 460 file2"}, "description": "What are the permissions of file1 and file2? What is the significance of each permission (read, write, execute)? What commands can Sarah run on each file? Use the respective command for each file to demonstrate your answer.", "evaluation": {"type": "ground-truth", "answer": "file1: -r--r----- (readable only by sarah and users in sarah's group)\nfile2: -r--rw---- (readable only by sarah and users in sarah's group and writable only by sarah)\nsarah can run 'cat file1' on file1 and 'cat file2' and 'echo Hello > file2' on file2.", "checking": null, "example": {"type": "command", "data": "cat file1 && cat file2 && echo Hello > file2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'secret file' > /home/john/secret && chmod 400 /home/john/secret && su - john"}, "description": "As root user, change the owner of the file /home/john/secret to the user alice without changing the group", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/secret | awk '{if ($3~/^alice$/ && $4~/^john$/ && $1~/^-.r--------$/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chown alice /home/john/secret"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir test && touch test/file1 && touch test/file2 && chmod 440 test/* && chown john:john test/* &&su - john"}, "description": "Create a new user named 'john'. In his home directory '/home/john/test', he has two files ('file1' and 'file2') and 'test' directory. Set the correct permission and ownership. The user should be able to read but not modify or delete the files, and the user cannot modify or delete the 'test' directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/john/test | grep file1 | awk '{if ($1~/^-r--r-----/) { exit 0; } else { exit 1; } }') && (ls -l /home/john/test | grep file2 | awk '{if ($1~/^-r--r-----/) { exit 0; } else { exit 1; } }') && (ls -ld /home/john/test | awk '{if ($1~/^dr--r--r--/) { exit 0; } else { exit 1; } }') && if [ $(find /home/john/test -type d ! -perm -u=x | wc -l) -eq 0 ] && [ $(find /home/john/test -type f ! -perm -u=r | wc -l) -eq 0 ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 440 /home/john/test/* && chown john:john /home/john/test/* && chmod 550 /home/john/test"}}, "labels": ["permission", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'john:secret_password' | chpasswd && mkdir /var/secure_data && echo 'This is a secret file' > /var/secure_data/secret.txt && chmod 600 /var/secure_data/secret.txt && chown john:john /var/secure_data/secret.txt"}, "description": "Ensure that only user john can read the /var/secure_data/secret.txt file and that he cannot share it with anyone else.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john cat /var/secure_data/secret.txt && sudo -u john echo 'This is a test' > /var/secure_data/secret.txt && sudo -u john cat /var/secure_data/secret.txt) | if [ \"$(cat -)\" = \"This is a secret file\"$'\\n'\"cat: /var/secure_data/secret.txt: Permission denied\"$'\\n'\"This is a secret file\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chattr +i /var/secure_data/secret.txt"}}, "labels": ["permission", "security"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/jacob && touch /home/jacob/testfile && chmod 444 /home/jacob/testfile"}, "description": "In which ways can a user with no write permission to a file modify it?", "evaluation": {"type": "multiple-choice", "options": ["By deleting the file and recreating it", "By changing the ownership of the file", "By using a symbolic link to point to a new file", "By appending content to the file", "None of the above"], "answer": "By using a symbolic link to point to a new file", "checking": null, "example": null}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/peter -m peter && echo 'secret' > /home/peter/notes && chmod 400 /home/peter/notes"}, "description": "Give the user tom read access to /home/peter/notes file without changing its ownership", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - tom -c 'cat /home/peter/notes'"}, "example": {"type": "command", "data": "setfacl -m u:tom:r /home/peter/notes"}}, "labels": ["permission", "acl"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/james -m james && cd /home/james && mkdir project && cd project && touch important.txt && chmod 600 important.txt && chown james important.txt"}, "description": "Only the owner 'james' should have read and write permission on the file important.txt. Group members should only have read permission. Set the permissions to this.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/james/project/important.txt | awk '{if ($1!~/^-rw-------/) { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "chmod 640 /home/james/project/important.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && cd /home/mark && mkdir secret && cd secret && touch file1 && touch file2 && echo 'Testing access' >> file1 && chmod 600 file1 && chmod 640 file2 && chown mark:mark file1 && chown mark:mark file2"}, "description": "Allow a user named \"jane\" to read the contents of file1 and list the contents of the directory secret, but not read the contents of file2", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l jane -c 'cat /home/mark/secret/file1') | if [ \"$(cat -)\" = \"Testing access\"$'\\n' ]; then  runuser -l jane -c 'ls /home/mark/secret' | if [ \"$(cat -)\" = \"file2\"$'\\n''file1\"$'\\n' ]; then exit 0; else exit 1; fi; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G mark jane && chmod o-r /home/mark/secret/file2 && chmod o-rwx /home/mark/secret"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && cd /home/mike && echo 'This is a test file.' > testfile && chmod 760 testfile && chown mike:mike testfile && su - mike"}, "description": "Change the permissions on testfile so that the owner can read and write to it, the group can only read it, and other users have no access to it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l testfile | awk '{if ($1 != \"-rwxrw----\") { exit 1; } else { exit 0; }}') && (sudo -u mike cat testfile | if [ \"$(cat -)\" = \"This is a test file.\" ]; then exit 0; else exit 1; fi)"}, "example": {"type": "command", "data": "chmod 760 testfile"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sara -m sara && useradd -s /bin/bash -d /home/tina -m tina && useradd -s /bin/bash -d /home/rachel -m rachel && su - sara"}, "description": "set read, write and execute permission of /home/sara for sara's user, and read and write permission for tina's and rachel's user", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/ | grep sara | awk '{if ($1~/^drwxrwxr-x/ && $3~/sara/ && $4~/sara/ && $5~/[0-9]+/ && $6~/[a-zA-Z]+/ && $7~/[0-9]+/ && $8~/[0-9]+:[0-9]+/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 770 /home/sara && chown sara:sara /home/sara && chmod 660 /home/tina && chmod 660 /home/rachel"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && useradd -s /bin/bash -d /home/user3 -m user3 && touch /home/user1/file1 && su - user1"}, "description": "Give read and write permissions to user2 and user3 on /home/user1/file1", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l user2 -c 'cat /home/user1/file1' && runuser -l user3 -c 'cat /home/user1/file1') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o-rwx /home/user1/file1 && chmod g+rw /home/user1/file1 && chown user1:user2 /home/user1/file1 && chgrp user3 /home/user1/file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && echo 'alias ll=\"ls -la\"' >> /home/jane/.bashrc && su - jane"}, "description": "What command can Jane use to view hidden files in the current directory?", "evaluation": {"type": "ground-truth", "answer": "ls -a", "checking": null, "example": {"type": "command", "data": "ls -a"}}, "labels": ["command", "bash"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jerry -m jerry && mkdir -p /home/jerry/files && cd /home/jerry/files && touch file1 && touch file2 && touch file3 && chmod -R 600 /home/jerry/files && chown -R jerry:jerry /home/jerry/files && su - jerry"}, "description": "As user jerry, move file1 to /tmp and remove file2 and file3. Then, create a symbolic link to /bin/bash with the name mybash in the same directory as the removed files.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls /home/jerry/files | grep file1 && ls /home/jerry/files | grep file2 && ls /home/jerry/files | grep file3 && ls -l /home/jerry/files | grep mybash) | if [ \"$(cat -)\" = \"file1$'\\n''file2$'\\n''file3$'\\n''mybash\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "mv /home/jerry/files/file1 /tmp && rm /home/jerry/files/file2 && rm /home/jerry/files/file3 && ln -s /bin/bash /home/jerry/files/mybash"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && cd /home/alice && echo 'top secret info' > /home/alice/info && chmod 700 /home/alice/info"}, "description": "Alice wants to share the info file with Bob, but wants to make sure no one else can see it. Help her do that by adding Bob to a new group named 'secret', and allowing that group to read the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l bob -c 'cat /home/alice/info' | if [ \"$(cat -)\" = \"top secret info\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd secret && usermod -a -G secret bob && chgrp secret /home/alice/info && chmod 640 /home/alice/info"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/testuser -m testuser && cd /home/testuser && mkdir testdir && cd testdir && touch testfile && chmod 440 testfile && chown testuser:testuser testfile && echo \"Hello World!\" > testfile"}, "description": "What will happen if we execute \"sudo chmod 777 /home/testuser/testdir\"? Why? How can we fix it to ensure the file permissions are not too permissive?", "evaluation": {"type": "knowledge-based", "answer": "If we execute \"sudo chmod 777 /home/testuser/testdir\", everyone will have full permission to read, write, and execute files in the directory, which breaks the principle of least privilege and can lead to security risks. To fix it, we can set the directory permission to 770 or 750 depending on our needs. 770 allows group members to also have full permissions, while 750 only gives group members read and execute permissions.", "example": {"type": "command", "data": "sudo chmod 750 /home/testuser/testdir && ls -l /home/testuser/testdir"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && echo 'jane ALL=(ALL) NOPASSWD: /bin/cat' >> /etc/sudoers"}, "description": "Grant user 'jane' permission to execute the 'cat' command with sudo, but only on the file '/home/jane/secret.txt'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cd /home/jane && sudo cat secret.txt | if [ \"$(cat -)\" = \"I love Linux!\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'jane ALL=(ALL) NOPASSWD: /bin/cat /home/jane/secret.txt' >> /etc/sudoers"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && cd /home/lisa && mkdir work && touch work/report.txt && chmod 770 work && sudo chown :www-data work/report.txt && sudo chmod 460 work/report.txt"}, "description": "You are the owner of the work directory and the www-data group has read-only access to the report.txt file inside it. Allow the www-data group to have write access to the report.txt file but no other changes should be made to the directory or file permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u www-data touch /home/lisa/work/test.txt | if [ \"$(sudo -u www-data ls /home/lisa/work | grep -c test.txt)\" -gt \"0\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo chmod g+w /home/lisa/work/report.txt"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jim -m jim && su - jim"}, "description": "create a file called secret.txt and ensure that only the owner, jim, has read, write, and execute permissions, while no one else has any permission to access the file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "stat -c '%a' /home/jim/secret.txt | awk '{if ($1==700) {exit 0;} else {exit 1;}}'"}, "example": {"type": "command", "data": "touch /home/jim/secret.txt && chmod 700 /home/jim/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd amy && useradd bob && useradd carol && mkdir /opt/shared_folder && chown :shared_users /opt/shared_folder && chmod 770 /opt/shared_folder && usermod -a -G shared_users amy && usermod -a -G shared_users bob && usermod -a -G shared_users carol"}, "description": "Create a shared folder /opt/shared_folder to allow amy, bob, and carol full access to it. Ensure that the group owner is \"shared_users\" and that only those with permission can delete files in the folder. Bonus points if you can do this in one command.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /opt/shared_folder -maxdepth 0 -perm 770 ! -group shared_users -ls && getfacl /opt/shared_folder | grep -q 'other::---') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "mkdir /opt/shared_folder && chgrp shared_users /opt/shared_folder && chmod 2770 /opt/shared_folder && useradd amy && useradd bob && useradd carol && usermod -a -G shared_users amy && usermod -a -G shared_users bob && usermod -a -G shared_users carol"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'hello' > /home/john/file.txt && chown john /home/john/file.txt"}, "description": "As root, change the group of /home/john/file.txt to the group 'staff'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/file.txt | awk '{if ($4==\"staff\") { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chgrp staff /home/john/file.txt"}}, "labels": ["permission", "group"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/developer -m developer && echo 'export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin' >> /home/developer/.bashrc"}, "description": "As a developer, you need to execute a command that requires root privileges. However, you don't want to grant the developer user root access. How can you achieve this?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su -c 'whoami' -s /bin/bash developer | if [ \"$(cat -)\" = \"root\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'developer ALL=(root) NOPASSWD: /path/to/command' | tee /etc/sudoers.d/developer && chmod 440 /etc/sudoers.d/developer"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && touch /var/log/messages && chown root:adm /var/log/messages && chmod 640 /var/log/messages && su - mark"}, "description": "As the user 'mark', can you view the content of /var/log/messages? Why or why not?", "evaluation": {"type": "multiple-choice", "options": ["Yes, because 'mark' has read permission on the file", "No, because 'mark' needs to be a member of the 'adm' group to access the file", "No, because the file has the 'root' user as its owner"], "answer": "No, because 'mark' needs to be a member of the 'adm' group to access the file"}, "labels": ["permission", "user", "groups"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir documents && mkdir downloads && touch documents/doc1 && touch downloads/dwn1 && chown john:john documents/doc1 && chown john:john downloads/dwn1 && chown john:john documents && chown john:john downloads && chmod 750 documents && chmod 730 downloads -R && chmod 640 documents/doc1 && chmod 620 downloads/dwn1"}, "description": "John wants to allow his colleague Marc to read doc1 and execute dwn1, but Marc should not be able to modify any of these files. Provide a solution to this scenario and make sure Marc cannot modify the file. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - marc -c 'cat /home/john/documents/doc1') && (su - marc -c '/home/john/downloads/dwn1')"}, "example": {"type": "command", "data": "chmod 755 /home/john/downloads && chmod 755 /home/john && chmod 644 /home/john/documents/doc1 && chmod 755 /home/john/downloads/dwn1"}}, "labels": ["permission", "access control"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && useradd -s /bin/bash -d /home/user3 -m user3 && echo '12345' > /home/shared_file && chgrp users /home/shared_file && chmod 664 /home/shared_file"}, "description": "Give user1 and user2 read and write access to /home/shared_file, and user3 only read access", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - user1 -c 'echo \"hello\" > /home/shared_file && cat /home/shared_file' && su - user2 -c 'echo \"world\" > /home/shared_file && cat /home/shared_file' && su - user3 -c 'cat /home/shared_file' | if [ \"$(cat -)\" = \"hello$'\\n'world$'\\n'12345$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o-w /home/shared_file && chmod g+w /home/shared_file && chmod ugo-w /home/shared_file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/john -m john && mkdir /home/jane/txt && touch /home/jane/txt/file1.txt && touch /home/john/file2.txt"}, "description": "Give jane full access to /home/jane/txt, but don't let john access it at all.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jane ls /home/jane/txt && sudo -u john ls /home/jane/txt ) | if [ \"$(cat -)\" = \"/home/jane/txt/file1.txt\nls: cannot access '/home/jane/txt': No such file or directory\n\" ]; then exit 0 ; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 700 /home/jane/txt && chown jane:jane /home/jane/txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && touch file1 && touch file2 && touch file3 && chown bob:users file1 && chown bob:users file2 && chown bob:users file3 && chmod 754 file1 && chmod 644 file2 && chmod 400 file3 && su - bob"}, "description": "Bob has three files and wants his group \u2018users\u2019 to have read permission to file1 and file2, but not file3. At the same time only he should be able to read or execute file1 and no one else should be able to execute or read file3. How can he do this?", "evaluation": {"type": "ground-truth", "answer": "Bob needs to use chown to make sure that the user and group ownership is correct, and then chmod to set the correct permissions. For file1, he needs to set it as 750 so that only he and members of the group users can read and execute it, while others can't do anything with it. For file2, he needs to set it as 644 so that everyone can read but only he can write. For file3, he needs to set it as 400 so that only he can read and no one else can do anything with it.", "checking": null, "example": {"type": "command", "data": "chmod 750 file1 && chmod 644 file2 && chmod 400 file3 && chown bob:users file1 && chown bob:users file2 && chown bob:users file3"}}, "labels": ["permission", "user", "group"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'Hello, World!' > /home/john/hello.txt && chmod 444 /home/john/hello.txt"}, "description": "As a different user, how can I read the contents of /home/john/hello.txt?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/john/hello.txt"}, "example": {"type": "command", "data": "su - <username>"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && mkdir /home/john/documents && cd /home/john/documents && touch file1.txt && touch file2.txt && mkdir dir1 && touch dir1/file3.txt"}, "description": "Give john read and write permissions on all the files and directories inside /home/john/documents, but he should not be able to delete or rename file1.txt", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/documents | awk '{print $1,$3,$4}' | awk 'NR==1 {if ($1!~/rw..r..r../ || $2!=\"john\" || $3!=\"john\") {exit 1} } NR>1 {if ($1~/w/ && $2!=\"john\") {exit 1} if ($3!~/^john$/) {exit 1}} /^-.*file1.txt/ {if ($1!~/^-..--r--/) {exit 1} if ($2!~/^john$/) {exit 1}}' && ls -ld /home/john/documents | awk '{if ($1!~/^drwxr-xr-x/ || $3!=\"john\" || $4!=\"john\") {exit 1}}'"}, "example": {"type": "command", "data": "chmod -R u+rwX,g+rX,o-rwx /home/john/documents && chmod -w /home/john/documents/file1.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && groupadd group1 && groupadd group2 && usermod -a -G group1 john && usermod -a -G group2 john && su - john"}, "description": "Add read, write, execute permission for owner and group owner, and only read permission for others to /home/john directory. Change the group ownership of /home/john directory to group2 without changing the owner permission.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "[ `stat -c \"%a\" /home/john` = \"750\" ] && [ `stat -c \"%G\" /home/john` = \"group2\" ] && [ `stat -c \"%U\" /home/john` = \"john\" ]"}, "example": {"type": "command", "data": "chmod 750 /home/john && chown john:group1 /home/john && chgrp group2 /home/john"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jamie -m jamie && touch /home/jane/file && touch /home/john/file && touch /home/jamie/file && chmod 0640 /home/jane/file && chmod 0660 /home/john/file && chmod 0440 /home/jamie/file "}, "description": "Which user has the highest permissions for the file located in /home/jane? Add the answer to the 'answer' key as a string value.", "evaluation": {"type": "ground-truth", "answer": "john", "checking": null, "example": {"type": "command", "data": "ls -l /home/jane/file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && useradd -s /bin/bash -d /home/user3 -m user3 && mkdir /data && chown root:dataaccess /data && chmod g+s /data && cd /data && touch file1 && touch file2 && chown user1: /data/file1 && chown user2: /data/file2"}, "description": "How can we give user3 read permissions on /data and its files, without giving him write or execute permissions?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u user3 cat /data/file1 && sudo -u user3 cat /data/file2) | if [ \"$(cat -)\" = \"Successful Read\"$'\\n'\"Successful Read\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+r /data && chmod o+r /data/file1 && chmod o+r /data/file2 && chmod o-x /data && chmod o-w /data"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && useradd -s /bin/bash -d /home/john -m john && echo 'My awesome password' | passwd --stdin lisa && echo 'lisa ALL=(john) NOPASSWD: /bin/ls' >> /etc/sudoers"}, "description": "Lisa needs to be able to execute `/bin/ls` as John but without giving her elevated privileges. Help Lisa execute `/bin/ls` as John.", "evaluation": {"type": "ground-truth", "answer": null, "checking": null, "example": {"type": "command", "data": "sudo -u john /bin/ls"}}, "labels": ["permission", "sudoers"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && echo 'alice:pass1' | chpasswd && echo 'bob:s3cr3t' | chpasswd"}, "description": "Change the user password for alice to \"newpass\" and for bob to \"A!ice&Bob#2022\".", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(echo 'newpass' | su - alice -c \"sudo -S touch /tmp/perm_test\" >& /dev/null && echo 'A!ice&Bob#2022' | su - bob -c \"sudo -S touch /tmp/perm_test\" >& /dev/null) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'newpass' | sudo passwd alice && echo 'A!ice&Bob#2022' | sudo passwd bob"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && echo 'top secret information' > secret.txt && chmod 600 secret.txt && su - jane"}, "description": "jane has a secret.txt file in her home directory, but she wants to share it with bob. Ensure that bob can read the file, but nobody else can access it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/jane | grep secret.txt | awk '{if ($1~/^-..------/) { exit 0; } else { exit 1; } }' && runuser -l bob -c 'cat /home/jane/secret.txt' | if [ \"$(cat -)\" = \"top secret information\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G jane bob && chmod o-rwx /home/jane/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/kate -m kate && echo 'secret info' > /home/john/secretfile && chmod 640 /home/john/secretfile && chown john:john /home/john/secretfile"}, "description": "kate needs to access the secret info in /home/john/secretfile, how do you grant her permission without compromising the security of the file?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l kate -c 'cat /home/john/secretfile' | if [ \"$(cat -)\" = \"secret info\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G john kate && chmod 660 /home/john/secretfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jenny -m jenny && echo 'jenny ALL=/usr/sbin/useradd' >> /etc/sudoers && su - jenny"}, "description": "How can user 'jenny' use 'sudo' command ONLY to add new users? but no other sudo commands should be executed.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo reset; echo 'secret_password' | sudo -S whoami) | if [ \"$(cat -)\" = \"jenny\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'jenny ALL=/usr/sbin/useradd' >> /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && touch file1 && touch file2 && chmod 640 file1 && chmod 750 file2 && chown root:root file1 && chown root:bob file2"}, "description": "What are the permissions and ownerships of file1 and file2?", "evaluation": {"type": "ground-truth", "answer": "file1: -rw-r----- root:root, file2: -rwxr-x--- root:bob", "checking": null, "example": {"type": "command", "data": "ls -l file1 file2"}}, "labels": ["permission", "ownership"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir sensitive && echo 'HIGHLY CONFIDENTIAL' > sensitive/file.txt && chmod 600 sensitive/file.txt && chown john sensitive/file.txt &&su - john"}, "description": "Access the content of sensitive/file.txt without changing any permissions or ownership", "evaluation": {"type": "operation-checking", "answer": "HIGHLY CONFIDENTIAL", "checking": null, "example": {"type": "command", "data": "cat /home/john/sensitive/file.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/bob -m bob && mkdir /data && touch /data/file && chown jane:jane /data/file && chmod 640 /data/file"}, "description": "Bob needs to access data/file, but he is not part of the group. Add Bob to the group and check if he is able to access the file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(id bob | grep -q 'dataaccess') && (su bob -c 'cat /data/file') | if [ \"$(cat -)\" = \"Hello, World!\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G dataaccess bob"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jenny -m jenny && touch /home/jack/file1 && touch /home/jack/file2 && touch /home/jack/file3 && touch /home/john/file4 && touch /home/jenny/file5"}, "description": "Allow only jack to read and write to /home/jack/file1, all users to read and write to /home/jack/file2 and john and jenny to read and write to /home/jack/file3", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/jack/file1 | awk '{if ($1~/^-..rw----./) { exit 0; } else { exit 1; } }') && (ls -l /home/jack/file2 | awk '{if ($1~/^-..rw..rw./) { exit 0; } else { exit 1; } }') && (ls -l /home/jack/file3 | awk '{if ($1~/^-..rw.rw-./) { exit 0; } else { exit 1; } }') && (su - john -c 'touch /home/john/file6 && echo testing > /home/john/file6' && cat /home/john/file6 && su - jenny -c 'touch /home/jenny/file7 && echo testing2 > /home/jenny/file7' && cat /home/jenny/file7 && touch /home/jack/file8 && echo testing3 > /home/jack/file8 && cat /home/jack/file8 && rm /home/john/file6 /home/jenny/file7 /home/jack/file8 && ls /home/john /home/jenny /home/jack | if [ \"$(cat -)\" = \"/home/jack: file1 file2 file3\n/home/jenny: file5\n/home/john: file4\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 600 /home/jack/file1 && chmod 666 /home/jack/file2 && chmod 664 /home/jack/file3"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir permission_test && touch permission_test/testfile && chmod 400 permission_test/testfile && chown john permission_test/testfile && su - john"}, "description": "As John, add 'test' to the file without changing the file's permission", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat permission_test/testfile | if [ \"$(cat -)\" = \"test\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo -n 'test' >> permission_test/testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'secret info' > /home/john/private_file && chmod 400 /home/john/private_file"}, "description": "As root, read the contents of /home/john/private_file, without changing the file permissions or adding yourself to any groups", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john cat /home/john/private_file) | if [ \"$(cat -)\" = \"secret info\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": ""}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john"}, "description": "Give read and execute permissions on a file named myfile to the group developer", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l myfile | awk '{if ($1~/^-..r-x---/ && $4~/^developer/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod g+rx myfile && chgrp developer myfile"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && touch /testfile && chmod 750 /testfile"}, "description": "Mark needs to read and write to /testfile, but only root needs to execute it. Set the permissions accordingly and verify that Mark can write to /testfile but not execute it, and that root can execute /testfile", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u mark bash -c 'echo \"test mark\" >> /testfile && cat /testfile' | if [ \"$(cat -)\" = \"test mark\" ]; then exit 0; else exit 1; fi) && (sudo bash -c '/testfile && echo \"test root\"' | if [ \"$(cat -)\" = \"test root\" ]; then exit 0; else exit 1; fi)"}, "example": {"type": "command", "data": "chmod 760 /testfile && chown root /testfile && chgrp mark /testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /data && chgrp dataaccess /data && chmod 2770 /data"}, "description": "Suppose you have a directory called /data that contains sensitive files that should only be accessible to members of the group \"dataaccess\". Ensure that new files and directories created in this directory inherit the group ownership, and that users can only delete files and directories that they own", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l / | grep data | awk '{if ($1~/^d.....s..t/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod g+s /data && chmod +t /data"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'Hello world!' > greeting.txt; chmod 777 greeting.txt && chown john greeting.txt && su - john"}, "description": "Check the contents of the text file `greeting.txt`.", "evaluation": {"type": "ground-truth", "answer": "Hello world!", "checking": null, "example": {"type": "command", "data": "cat greeting.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /var/www/html/site && touch /var/www/html/site/index.php && touch /var/www/html/site/report.pdf && chmod 600 /var/www/html/site/report.pdf && useradd -g www-data -d /var/www -s /usr/sbin/nologin -p $(openssl passwd -1 P@ssW0rd) webuser && chown -R webuser:www-data /var/www/html/site"}, "description": "Set permissions for a web user to have read access to index.php, write access to a directory, and no access to report.pdf. Ensure the changes apply to all future files in the directory as well.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u webuser -i ls -l /var/www/html/site | grep -v report.pdf | awk '{if ($1 !~ /^.(r|w)..(r|w)..(r|w)./ && $1 !~ /^d..x..x..x/ ) { exit 1;} else { exit 0;}}') && (sudo -u webuser -i ls /var/www/html/site | grep -v report.pdf | xargs -n1 -I '{}' sudo -u webuser -i ls -l {} | awk '{if ($1 !~ /^.(r|w)..(r|w)..(r|w)./ && $1 !~ /^d..x..x..x/) { exit 1;} else { exit 0;}}')"}, "example": {"type": "command", "data": "chmod 640 /var/www/html/site/index.php && chmod 770 /var/www/html/site && chmod 0 /var/www/html/site/report.pdf && setfacl -R -m u:webuser:rwX /var/www/html/site"}}, "labels": ["permission", "web"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && touch /home/bob/confidential.txt && chmod 400 /home/bob/confidential.txt && echo 'Hello World!' > /home/bob/hello.txt && chmod 444 /home/bob/hello.txt && echo '123abc' > /home/bob/secret.txt && chmod 600 /home/bob/secret.txt"}, "description": "Bob wants to show his \"hello\" message to everyone but keep his confidential and secret files restricted. Set the permissions such that everyone can read hello.txt, users can read confidential.txt, and only bob can read secret.txt. Do this without using the numeric values for chmod.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/bob | awk '{if ($1~/^-..rw.r--/ && $NF == \"confidential.txt\") { exit 0; } else if ($1~/^-..------/ && $NF == \"secret.txt\") { exit 0; } else if ($1~/^-..r--r--/ && $NF == \"hello.txt\") { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod u+r,g+r,o-r /home/bob/confidential.txt && chmod u+r /home/bob/hello.txt && chmod 600 /home/bob/secret.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir files && cd files && touch file1.txt && touch file2.txt && touch file3.txt && chmod -R 0400 /home/jane/files && chmod 0500 /home/jane/files"}, "description": "Jill needs to be able to read file1.txt, but no other files in Jane's files directory. What permissions should be set for file1.txt and why?", "evaluation": {"type": "multiple-choice", "options": ["0400 - This gives Jill read-only access to file1.txt", "0500 - This gives Jill access to the files directory, allowing her to read file1.txt", "0600 - This gives Jill read and write access to file1.txt", "0700 - This gives Jill read, write, and execute access to file1.txt"], "answer": "0400 - This gives Jill read-only access to file1.txt", "explanation": "The permission value 0400 means that the user assigned to the file (in this case, Jane) has read-only access. No other permissions are granted for other users or groups. This means that only Jane can read and modify the file. Jill can only read the file, and cannot modify it in any way. The 0500 permission set for the directory only allows Jane, and not Jill, to have the ability to enter the files directory. It does not give Jill implicit access to read file1.txt."}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "cd /home && mkdir -p admin user1 user2 && touch admin/adminfile user1/user1file user2/user2file && chmod -R 770 /home/admin && chown -R admin:admin /home/admin && chmod -R 750 /home/user1 && chown -R user1:user1 /home/user1 && chmod -R 730 /home/user2 && chown -R user2:user2 /home/user2"}, "description": "You have a directory /home that contains three subdirectories - admin, user1, and user2. The administrative files contain classified information and only members of the admin user group should have access to those files. user1 can read, write, and execute files in its directory but user2 should only have read and execute permissions. Secure the directories appropriately and ensure that user2 can see the contents of the /home directory but can only traverse into the user2 directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/ && ls -l /home/admin/ && ls -l /home/user1/ && ls -l /home/user2/ && test -r /home/user1/user1file && test -w /home/user1/user1file && test -x /home/user1/user1file && ! test -w /home/user2/user2file && test -r /home/user2/user2file && test -x /home/user2/user2file && ! test -w /home/admin/adminfile && test -r /home/admin/adminfile && ! test -x /home/admin/adminfile && (ls /home/user2 | grep -q \"user2file\") && (ls /home/ | grep -q \"user2\") && ! (ls /home/user2/ | grep -q \"user1\") && ! (ls /home/user2/ | grep -q \"admin\") && ! (ls /home/admin/ | grep -q user1file) && ! (ls /home/user1/ | grep -q adminfile) && ! (ls /home/admin/ | grep -q user2file) && ! (ls /home/user2/ | grep -q adminfile) && ! (ls /home/user1/ | grep -q user2file) && ! (ls /home/user2/ | grep -q adminfile) && ! (ls /home/admin/ | grep -q user1file)"}, "example": {"type": "command", "data": "chmod 770 /home/admin && chown admin:admin /home/admin && chmod 750 /home/user1 && chown user1:user1 /home/user1 && chmod 730 /home/user2 && chown user2:user2 /home/user2"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && mkdir /home/john/personal && chgrp jane /home/john/personal && chmod 2770 /home/john/personal && su - john"}, "description": "john created a folder called personal, which he intends to share with jane. However, john wants to keep the folder private and ensures that jane can only access the directory and its contents, and modify it if required. Fix the permissions accordingly.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john | awk '{if ($9 != 'personal' || $4 != 'jane' || $1!~/^d.rwxrws.*/) { exit 1; }}' && ls -l /home/john/personal | awk '{if ($4 != 'jane' || ($1!~/^.rwxr..r..$/ && $1!~/^.rwxr..---$/)) { exit 1; }}'"}, "example": {"type": "command", "data": "chmod o-rwx /home/john/personal"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m tester && cd /home/tester && echo 'Hello, world!' > test && chown tester test && chmod 400 test"}, "description": "Create a group called 'testgroup' and make the group the only group that has read access to /home/tester/test", "evaluation": {"type": "command", "answer": null, "checking": {"type": "command", "data": "runuser -l tester -c 'cat test' && ls -l /home/tester/test | awk '{if ($1~/^-..r--------/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "groupadd testgroup && usermod -a -G testgroup tester && chgrp testgroup /home/tester/test && chmod 440 /home/tester/test"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home && mkdir data && cd data && touch sensitive.txt && echo 'I am confidential' > sensitive.txt && chmod 640 sensitive.txt && chown jane:jane sensitive.txt && su - jane"}, "description": "As a user named jane, copy /home/data/sensitive.txt to /home/jane/ using the most secure but simple way possible.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/jane/sensitive.txt | if [ \"$(cat -)\" = \"I am confidential\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "cp /home/data/sensitive.txt /home/jane/ && chown jane:jane /home/jane/sensitive.txt && chmod 400 /home/jane/sensitive.txt"}}, "labels": ["permission", "file copy"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /myfiles && mkdir /myfiles/personal && mkdir /myfiles/work && mkdir /myfiles/project && touch /myfiles/personal/info.txt && touch /myfiles/work/report.txt && touch /myfiles/project/specification.docx"}, "description": "Set the permission of /myfiles to 750 and each sub-directory (personal, work, and project) to 700, and the permissions of all the files inside /myfiles/personal to 600, /myfiles/work to 640, and /myfiles/project to 660. Additionally, set the owners of all files and directories inside /myfiles to user1, who is the owner of /myfiles.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /myfiles ! -perm 750 -type d -ls && find /myfiles/personal ! -perm 600 -type f -ls && find /myfiles/work ! -perm 640 -type f -ls && find /myfiles/project ! -perm 660 -type f -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chown -R user1 /myfiles && chmod 750 /myfiles && chmod 700 /myfiles/* && chmod 600 /myfiles/personal/* && chmod 640 /myfiles/work/* && chmod 660 /myfiles/project/*"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && touch /home/user1/file1 && touch /home/user2/file2 && chmod 444 /home/user1/file1 && chmod 222 /home/user2/file2"}, "description": "Change the permissions of /home/user1/file1 to be readable and writable by only user1 and user2. Also, change the permissions of /home/user2/file2 to be readable and writable by user2 only. Ensure that no other user can access these files.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/user1/file1 | awk '{print $1}' | grep -q '^.-rw--w--w-') && (ls -l /home/user2/file2 | awk '{print $1}' | grep -q '^.------w-') && ((ls -l /home/user1 | awk '{print $3}' | grep -q '^user1$') && (ls -l /home/user1 | awk '{print $4}' | grep -q '^user2$')) && (ls -l /home/user2 | awk '{print $3}' | grep -q '^user2$') && (ls -l /home/user2 | awk '{print $4}' | grep -q '^user2$')"}, "example": {"type": "command", "data": "chmod 660 /home/user1/file1 && chown user1:user2 /home/user1/file1 && chmod 620 /home/user2/file2 && chown user2:user2 /home/user2/file2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/mike -m mike && usermod -aG john mike && cd /home/john && echo 'insufficient permissions' > file && chmod o+x file && chown john:john file &&su - mike"}, "description": "As user mike, read the contents of file in john's home directory. What do you see? How can you see the contents of the file without changing the file permissions?", "evaluation": {"type": "ground-truth", "answer": "insufficient permissions", "checking": null, "example": {"type": "command", "data": "cat /home/john/file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'Hello World!' > test.txt && chmod 777 test.txt && chown john test.txt &&su - john"}, "description": "Display the contents of test.txt without modifying its permissions", "evaluation": {"type": "ground-truth", "answer": "Hello World!", "checking": null, "example": {"type": "command", "data": "cat test.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && mkdir secret && touch secret/message.txt && echo 'Top secret message for bob' > secret/message.txt && chmod -R 700 secret && chown -R bob:bob secret && su - bob"}, "description": "Bob has created a directory called /home/bob/secret and the file /home/bob/secret/message.txt. You, as another user, need to read the message inside the file. Perform this task without changing the permissions set by Bob.", "evaluation": {"type": "ground-truth", "answer": "Top secret message for bob", "checking": null, "example": {"type": "command", "data": "cat /home/bob/secret/message.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/johnny -m johnny && cd /home/johnny && mkdir documents && touch documents/file1 && chown johnny:johnny documents/file1 && chmod 760 documents/file1 && su - johnny"}, "description": "Johnny wants to grant read access to one of his friends named Max, who belongs to the group named \"sports\" to access the file1 in '/home/johnny/documents/',  help him to grant the required permission to Max", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/johnny/documents/ | grep file1 | awk '{print $1}') | if [ \"$(cat -)\" = \"-rwxrw----\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G sports max && chown johnny:johnny /home/johnny/documents/file1 && chmod 770 /home/johnny/documents/file1"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m -s /bin/bash sarah && useradd -m -s /bin/bash luke && mkdir /home/sarah/files && mkdir /home/luke/files && touch /home/sarah/files/secret_file && chmod 600 /home/sarah/files/secret_file && echo 'This is a secret text!' > /home/sarah/files/secret_file && touch /home/luke/files/not_so_secret_file && chmod 644 /home/luke/files/not_so_secret_file && echo 'This is not a secret text.' > /home/luke/files/not_so_secret_file"}, "description": "Set permissions to allow only sarah to read /home/sarah/files/secret_file, but allow both sarah and luke to read /home/luke/files/not_so_secret_file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u sarah cat /home/sarah/files/secret_file && sudo -u sarah test ! -r /home/luke/files/not_so_secret_file && cat /home/luke/files/not_so_secret_file) | if [ \"$(cat -)\" = \"This is a secret text!\nThis is not a secret text.\\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 /home/sarah/files/secret_file && chown sarah:sarah /home/sarah/files/secret_file && chmod 644 /home/luke/files/not_so_secret_file && chown luke:luke /home/luke/files/not_so_secret_file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/karen -m karen && echo 'secret data' > /home/karen/data && chown karen:karen /home/karen/data && chmod 600 /home/karen/data"}, "description": "Only karen should be able to read the data file in her home directory. Other users should not have access to it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/karen/data && sudo runuser -l bill -c 'cat /home/karen/data') | if grep 'secret data' && ! grep -q 'secret data' /home/karen/data ; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o-rwx /home/karen/data"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/johndoe -m johndoe && mkdir /home/johndoe/documents && cd /home/johndoe/documents && touch confidential.txt && echo 'Top secret content' > confidential.txt && chmod 600 confidential.txt"}, "description": "johndoe wants to give his coworker Sarah read access to his confidential.txt file but without the ability to modify it. How can he achieve this with changing the file owner?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo cat /home/johndoe/documents/confidential.txt || cat /home/johndoe/documents/confidential.txt) | tail -n1 | if [ \"$(cat -)\" = \"Top secret content\" ]; then exit 0; else exit 1; fi && (sudo -u sarah cat /home/johndoe/documents/confidential.txt || echo 'Permission denied') | tail -n1 | if [ \"$(cat -)\" = \"Top secret content\" ]; then exit 0; else exit 1; fi && (sudo -u sarah rm /home/johndoe/documents/confidential.txt || echo 'Permission denied') | if [ \"$(cat -)\" = \"Permission denied\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 644 /home/johndoe/documents/confidential.txt && chown johndoe:sarah /home/johndoe/documents/confidential.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && useradd -s /bin/bash -d /home/mark -m mark && cd /home/emma && mkdir pictures && cd pictures && mkdir private && touch private/private1 && touch public_pic1 && touch public_pic2 && chown -R emma:emma /home/emma/pictures && chmod -R u=rw,g=r,o= /home/emma/pictures && cd /home/mark && su - mark"}, "description": "Mark should be able to list all files and directories in the ~/pictures/ directory, but should only be able to read the files in ~/pictures/public_pic1 and ~/pictures/public_pic2. Let's give him the appropriate reading permissions", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/emma/pictures/private/private1 && cat /home/emma/pictures/public_pic1 && cat /home/emma/pictures/public_pic2) | if [ \"$(cat -)\" = \"private1public1public2\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -aG emma mark && chmod 750 /home/emma/pictures && chmod 750 /home/emma/pictures/private && chmod 640 /home/emma/pictures/public_pic1 && chmod 640 /home/emma/pictures/public_pic2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && touch file1 && chown bob:root file1 && chmod 700 file1"}, "description": "Set the correct permissions for file1 so that the members of group \"users\" can read it but cannot modify or execute it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u bob test -r /home/bob/file1 && sudo -u bob ! test -w /home/bob/file1 && sudo -u bob ! test -x /home/bob/file1 && ls -l /home/bob/file1 | awk '{if ($1~/^-rw-r--r--/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 744 /home/bob/file1 && chown :users /home/bob/file1"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && touch secret && chmod 400 secret && echo 'Jane is awesome!' > secret"}, "description": "Set the permission of the secret file in Jane's home directory to allow only Jane to read it, and no one else.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo cat /home/jane/secret; sudo -u guest cat /home/jane/secret) | if [ \"$(cat -)\" = \"Jane is awesome!\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod go-rwx /home/jane/secret"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/liz -m liz && useradd -s /bin/bash -d /home/mike -m mike && groupadd secret && usermod -a -G secret liz && usermod -a -G secret mike && cd /home/liz && mkdir secret-folder && touch /tmp/file1 && touch /tmp/file2 && cp /tmp/file1 secret-folder && cp /tmp/file2 secret-folder/file3 && cd secret-folder && chmod 400 file1 && chmod 440 file3"}, "description": "liz and mike are members of the group 'secret'. liz created a folder 'secret-folder' in her home directory and copied two files into it. the first file 'file1' should only be readable by liz. the second file 'file3' should only be readable by members of the 'secret' group. let's test if these permissions are set correctly.", "evaluation": {"type": "ground-truth", "answer": "readable", "checking": null, "example": {"type": "command", "data": "sudo -u mike -H sh -c 'cd ~liz/secret-folder && cat file3'"}}, "labels": ["permission", "group"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m sam && mkdir /data && echo 'g_allowed_users: sam' > /etc/security/access.conf"}, "description": "Allow only specific users to access the /data directory. Set the permissions so that the owner (sam) can read, write, and execute the files, while members of group \"data_group\" can only read files and execute directories. Other users should have no access at all.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cd /data && touch testfile && su sam -c 'echo hello > testfile' && su sam -c 'cat testfile' && touch /data/otherfile && runuser -l jim -c 'ls /data' && runuser -l john -c 'ls /data') | if [ \"$(cat -)\" = \"hello\"$'\\n'\"testfile\"$'\\n'\"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd data_group && usermod -a -G data_group sam && chown sam:data_group /data && chmod 750 /data && find /data -type f -exec chmod 640 {} + && find /data -type d -exec chmod 750 {} + && echo 'auth    required        pam_access.so' >> /etc/pam.d/su && echo '-:ALL EXCEPT sam:ALL' >> /etc/security/access.conf"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir workspace && touch workspace/file.txt && chmod 400 workspace/file.txt"}, "description": "Give read permission to the file 'file.txt' for the group 'users'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/jane/workspace/file.txt | awk '{if ($1~/^-r..------/ && $4~/users/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod g+r /home/jane/workspace/file.txt && chgrp users /home/jane/workspace/file.txt"}}, "labels": ["permission", "group"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/joe -m joe && useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/mary -m mary && cd /home/bob && mkdir dir1 && cd dir1 && touch file1 && cd .. && mkdir dir2 && chown jane:joe dir2 && cd dir2 && touch file2 && chmod 770 ."}, "description": "There are four users: bob, joe, jane, and mary. Bob created a directory called 'dir1' and file called 'file1' inside it. In this bstract scenario you are Jane who wants to delete 'dir1' as a root. Make it happen!", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cd /home/bob/dir1 && find . ! -type d -print0 | sudo xargs -0 chown jane:joe && sudo rm -rf ."}, "example": {"type": "command", "data": ""}}, "labels": ["permission", "deletion"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/mike -m mike && groupadd admin && usermod -a -G admin john && usermod -a -G admin mike && echo 'TEST' > /home/shared.txt && chmod 640 /home/shared.txt && chown john:admin /home/shared.txt"}, "description": "John and Mike are members of the \"admin\" group. John created a file called \"shared.txt\" and gave group \"admin\" read and write permission while excluding read and write permissions for others. Mike needs to be able to read \"shared.txt\" but not write to it. Give Mike read permission to the file without changing its group ownership.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l mike -c 'cat /home/shared.txt') | if [ \"$(cat -)\" = \"TEST\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+r /home/shared.txt"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/peter -m peter && useradd -s /bin/bash -d /home/david -m david && echo 'secret message for john' > /home/john/message && chown john /home/john/message && chmod 400 /home/john/message && echo 'secret message for peter' > /home/peter/message && chown peter /home/peter/message && chmod 400 /home/peter/message && echo 'secret message for david' > /home/david/message && chown david /home/david/message && chmod 400 /home/david/message"}, "description": "Read and show the content of the file /home/peter/message without changing the ownership of the file", "evaluation": {"type": "ground-truth", "answer": "secret message for peter", "checking": null, "example": {"type": "command", "data": "cat /home/peter/message"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && useradd -s /bin/bash -d /home/user3 -m user3 && cd /home/user1 && mkdir shared && cd shared && touch file1 && touch file2 && echo 'content' > file1 && chmod 660 file1 && chown user1:user2 file1 && chmod 2770 ."}, "description": "Create a directory '/home/shared' and give users user1 and user2 the ability to access files within that directory. Set file1's ownership to user1 and group ownership to user2 with a permission set of 660. Set directory permissions to 770.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su user2 -c 'cd /home/user1/shared && cat file1' | grep content | wc -l | if [ \"$(cat -)\" = \"1\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 770 /home/user1/shared && chown user1:user2 /home/user1/shared && chmod 660 /home/user1/shared/file1"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /database && touch /database/datafile && chmod 640 /database/datafile && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/alice -m alice && chown alice /database/datafile"}, "description": "Allow Bob and Alice to read /database/datafile, but not write to it. Ensure that future files and directories created in /database do not automatically receive alice as their owner, but only bob", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l bob -c 'cat /database/datafile' && runuser -l alice -c 'cat /database/datafile') | if [ \"$(cat -)\" = \"db contents\"$'\\n'\"db contents\" ]; then sudo find /database -type f ! -user bob ! -perm 440 -ls | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o-rwx /database && chmod g+r /database && chgrp bob /database && chmod g+s /database"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/devops && mkdir /home/devops/secret && touch /home/devops/secret/file.txt && chown root:devops /home/devops/secret/file.txt && chmod 640 /home/devops/secret/file.txt"}, "description": "A file `file.txt` is created inside a directory called `secret` inside `devops` home directory with `root` as the owner and `devops` as the group owner, with all other users having no permissions. Create a new user called `john` and ensure that he can read the contents of `file.txt`, but cannot delete, rename or modify the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - john -c 'cd /home/devops/secret && cat file.txt && echo \"new text\" > file.txt && rm file.txt && mv file.txt newfile.txt' |& grep -q 'Permission Denied' && su - john -c 'cd /home/devops/secret && cat file.txt' |& grep -q 'this is a secret file'"}, "example": {"type": "command", "data": "useradd -G devops john && chmod o+x /home/devops && chmod o+x /home/devops/secret && chmod g+r /home/devops/secret/file.txt"}}, "labels": ["permission", "owner", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && echo 'I love Linux' > /home/jane/doc.txt && chmod 644 /home/jane/doc.txt"}, "description": "Change the owner of /home/jane/doc.txt to the user 'john' and change its group ownership to the group 'staff'", "evaluation": {"type": "ground-truth", "answer": null, "checking": {"type": "command", "data": "ls -l /home/jane/doc.txt | awk '{if ($3 == \"john\" && $4 == \"staff\") { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chown john:staff /home/jane/doc.txt"}}, "labels": ["permission", "user", "ownership"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jimmy -m jimmy && echo 'jimmy:password123' | chpasswd"}, "description": "Change the password of user jimmy to jimmy5678", "evaluation": {"type": "ground-truth", "answer": "", "checking": null, "example": {"type": "command", "data": "echo 'jimmy5678' | chpasswd"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/john -m john && usermod -G john bob && cd /home/john && mkdir shared_folder && chmod 2770 shared_folder && echo 'Hello World!' > shared_folder/file.txt && chown john:bob shared_folder/file.txt"}, "description": "Bob needs to access the file.txt located in John's shared folder. How would you set the permissions so that Bob can read the file but cannot delete or modify it?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "stat -c \"%a %U %G\" /home/john/shared_folder/file.txt | if [ \"$(cat -)\" = \"640 john bob\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 /home/john/shared_folder/file.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd tester && mkdir /data && chgrp dataaccess /data && chmod 2770 /data"}, "description": "Create a file called \"test.txt\" inside /data directory with tester as user and dataaccess as group. Tester should only have read and write permissions while group should have read, write and execute permissions. Other users should not have any permissions of any kind.", "evaluation": {"type": "ground-truth", "answer": "", "checking": null, "example": {"type": "command", "data": "touch /data/test.txt && chmod 460 /data/test.txt && chown tester:dataaccess /data/test.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && echo 'Hello World' > /home/lisa/helloworld && chmod o-rwx /home/lisa/helloworld && chown lisa /home/lisa/helloworld && su - lisa"}, "description": "As user LISA, read the content of the file /home/lisa/helloworld and display it on the terminal", "evaluation": {"type": "ground-truth", "answer": "Hello World", "checking": null, "example": {"type": "command", "data": "cat /home/lisa/helloworld"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": ""}, "description": "List all the files in the /etc directory that are owned by root and have group write permissions but don't have world-writable permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /etc | awk '{if ($3==\"root\" && substr($1,6,1)==\"w\" && substr($1,9,1)\"-\"==\"-\") { print $NF; }}'"}, "example": {"type": "command", "data": "ls -l /etc | awk '{if ($3==\"root\" && substr($1,6,1)==\"w\" && substr($1,9,1)\"-\"==\"-\") { print $NF; }}'"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/engineer -m engineer && mkdir /projects && mkdir /projects/data && mkdir /projects/code && touch /projects/data/data.txt && find /projects -type f -exec chmod 660 {} + && find /projects -type d -exec chmod 770 {} +"}, "description": "Grant the group access to the /projects/code directory while preventing others from accessing it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /projects | grep code | awk '{if($1~/^drwxrws---/) {exit 0;} else {exit 1;}}'"}, "example": {"type": "command", "data": "chmod 2770 /projects/code && chown :dataaccess /projects/code"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/charlie -m charlie && echo 'red' > /home/alice/file && echo 'blue' > /home/bob/file && echo 'yellow' > /home/charlie/file"}, "description": "Group users Alice and Bob under group 'cool' and modify permissions when its files are accessed. Files owned by Alice(like /home/alice/file) should only be readable by Alice and members of group cool. Files owned by Bob(like /home/bob/file) should only be readable and writable by Bob and members of group cool. Files not owned by Alice or Bob(like /home/charlie/file) should only be readable by group cool.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l alice -c 'id' | awk -F' ' '{print $3}') | if [ \"$(cat -)\" = \"cool\" ]; then (runuser -l alice -c 'cat /home/alice/file' 2>/dev/null | awk '{if ($0~/red/) { exit 0; } else { exit 1; }} && runuser -l bob -c 'cat /home/alice/file' 2>/dev/null | awk '{if ($0~/red/) { exit 0; } else { exit 1; }} && runuser -l charlie -c 'cat /home/alice/file' 2>/dev/null | awk '{if ($0~/red/) { exit 1; } else { exit 0; }}') && (runuser -l bob -c 'id' | awk -F' ' '{print $3}') | if [ \"$(cat -)\" = \"cool\" ]; then (runuser -l alice -c 'cat /home/bob/file' 2>/dev/null | awk '{if ($0~/blue/) { exit 1; } else { exit 0; }} && runuser -l bob -c 'cat /home/bob/file' 2>/dev/null | awk '{if ($0~/blue/) { exit 0; } else { exit 1; }} && runuser -l charlie -c 'cat /home/bob/file' 2>/dev/null | awk '{if ($0~/blue/) { exit 1; } else { exit 0; }}') && (runuser -l charlie -c 'id' | awk -F' ' '{print $3}') | if [ \"$(cat -)\" = \"cool\" ]; then (runuser -l alice -c 'cat /home/charlie/file' 2>/dev/null | awk '{if ($0~/yellow/) { exit 1; } else { exit 0; }} && runuser -l bob -c 'cat /home/charlie/file' 2>/dev/null | awk '{if ($0~/yellow/) { exit 1; } else { exit 0; }} && runuser -l charlie -c 'cat /home/charlie/file' 2>/dev/null | awk '{if ($0~/yellow/) { exit 0; } else { exit 1; }}') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd cool && usermod -a -G cool alice && usermod -a -G cool bob && chmod 0640 /home/alice/file && chown alice:cool /home/alice/file && chmod 0660 /home/bob/file && chown bob:cool /home/bob/file && chmod 0440 /home/charlie/file && chgrp cool /home/charlie/file"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/alex -m alex && useradd -s /bin/bash -d /home/brad -m brad && echo 'jane ALL=(alex) NOPASSWD:/usr/bin/cat' >> /etc/sudoers && echo 'brad ALL=(alex) NOPASSWD:/usr/bin/whoami' >> /etc/sudoers"}, "description": "Set up a sudoers file to allow user jane to execute `/usr/bin/cat` as alex without entering a password, but only for this specific command and not others. Similarly, set up a sudoers file to allow user brad to execute `/usr/bin/whoami` as alex without entering a password, but only for this specific command and not others.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u alex cat /etc/passwd | if [ \"$(cat -)\" = \"alex:x:1002:1003::/home/alex:/bin/bash\" ]; then exit 0; else exit 1; fi) && (sudo -u alex whoami | if [ \"$(cat -)\" = \"alex\" ]; then exit 0; else exit 1; fi)"}, "example": {"type": "command", "data": "echo 'jane ALL=(alex) NOPASSWD:/usr/bin/cat' >> /etc/sudoers && echo 'brad ALL=(alex) NOPASSWD:/usr/bin/whoami' >> /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'secret content' > secret-file && chmod 400 secret-file && su - john"}, "description": "As a root user, change the ownership of secret-file to user 'bill'. Check the content by switching to user 'bill'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - bill -c '[ -f /home/john/secret-file ] && cat /home/john/secret-file'"}, "example": {"type": "command", "data": "chown bill:bill /home/john/secret-file"}}, "labels": ["permission", "ownership", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && touch test.txt && chmod 740 test.txt && chown john:testgrp test.txt && echo 'test file content' > test.txt"}, "description": "Create a new user 'john' with a home directory, a file 'test.txt' with 'test file content' as content, and set the file permissions to be readable by the owner, readable and writable by the group 'testgrp', and not readable, writable, or executable by others. Then switch to user 'john' and try to read the 'test.txt' file. What is the output?", "evaluation": {"type": "ground-truth", "answer": "test file content", "checking": null, "example": {"type": "command", "data": "su - john && cat test.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && mkdir /var/www/html && touch /var/www/html/index.html && echo 'Go to Jane's home page' > /var/www/html/index.html && chmod 750 /var/www/html && chown jane:jane /var/www/html && su - jane"}, "description": "Jane has created a website in /var/www/html and wants to allow members of her group (jane) to create and modify files in the directory. Set the appropriate permissions for the directory and verify that members of the group can create and modify files in the directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cd /var/www/html && sudo -u jane touch test_file && sudo -u jane echo 'test' > test_file && cat test_file) | if [ \"$(cat -)\" = \"test\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 770 /var/www/html"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && chmod 751 /home/john"}, "description": "Allow user1(jane) to access user2(john)'s home directory '/home/john'?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - john -c 'echo test > file_in_johns_home' && su - jane -c 'cat /home/john/file_in_johns_home') | if [ \"$(cat -)\" = \"test\"$'\\n'\"test\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+x /home/john"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/tim -m tim && cd /home/tim && mkdir data && cd data && mkdir sensitive && mkdir non-sensitive && touch sensitive/a && touch non-sensitive/b && chmod 770 sensitive && chmod 750 non-sensitive"}, "description": "Allow user 'susan' to have read and write access to the 'sensitive' folder only, while also allowing her to execute the 'non-sensitive' folder. She must not have access to any other directories in the file system.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - susan -c 'ls /home/tim/data' && su - susan -c 'ls /home/tim/data/sensitive' && su - susan -c 'echo \"Hello, World!\" > /home/tim/data/sensitive/testfile' && su - susan -c 'cat /home/tim/data/sensitive/testfile') | if [ \"$(cat -)\" = \"sensitive  testfile\nHello, World!\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G sensitive susan && chmod g+rx /home/tim/data/non-sensitive && chmod 770 /home/tim/data/sensitive"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'secret data' > top_secret.txt && chmod 600 top_secret.txt && useradd -s /bin/bash -d /home/smith -m smith && echo 'smith may have access to top_secret' > /home/john/perm.txt && chown john /home/john/perm.txt"}, "description": "Allow user smith to read 'top_secret.txt' without giving him/her any other permissions on john's home", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l john -c 'cat top_secret.txt' && runuser -l smith -c 'cat /home/john/top_secret.txt') | if [ \"$(cat -)\" = \"secret data$'\\n'may have access to top_secret$'\\n'secret data\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "setfacl -m u:smith:r /home/john/top_secret.txt"}}, "labels": ["permission", "access control"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'secret code' > /home/john/top_secret.info && chmod 600 /home/john/top_secret.info"}, "description": "Give group 'admin' access to read John's top_secret.info file without actually adding 'admin' to the file's group owner", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john cat /home/john/top_secret.info && sudo -u john id -Gn) | if [ \"$(cat -)\" = \"secret code$'\\n'john\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd admin && usermod -aG admin john && setfacl -m g:admin:r /home/john/top_secret.info"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && echo 'hello' > /hellofile && chmod 000 /hellofile && chown alice /hellofile && echo 'world!' > /worldfile"}, "description": "Alice needs to be able to read /hellofile and /worldfile, while Bob should only be able to read /worldfile. How would you set the permissions to achieve this?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l alice -c 'cat /hellofile' && runuser -l alice -c 'cat /worldfile' && runuser -l bob -c 'cat /worldfile' && runuser -l bob -c 'cat /hellofile') | if [ \"$(cat -)\" = \"hello$'\\n'world!$'\\n'world!$'\\n''$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 400 /hellofile && chmod 444 /worldfile && chown bob /worldfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/charlie -m charlie && mkdir /shared && chmod 777 /shared && chown root:root /shared"}, "description": "Create a directory called /shared that is owned by root and is group-readable and writable. Add users alice, bob, and charlie to a new group called sharedusers, and change the directory's group ownership to sharedusers. Alice, Bob, and Charlie should be able to add and delete files in this directory but should not be able to delete files created by other users.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -ld /shared && getent group sharedusers | awk -F':' '{ print $3 }' && ls -ld /shared/* | awk '{ print $3 }') | if [ \"$(cat -)\" = \"drwxrwxrwx 2 root sharedusers\nsharedusers\nroot\nroot\nroot\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd sharedusers && usermod -a -G sharedusers alice && usermod -a -G sharedusers bob && usermod -a -G sharedusers charlie && chgrp sharedusers /shared && chmod g+rwxs /shared"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -ms /bin/bash becky && cd /home/becky && touch file1 && echo 'hello' > file1 && chmod 640 file1 && su - becky"}, "description": "Becky needs to read file1 but cannot access it. Add a new user to the file's group, and give the group read permission, but make sure becky does not have write access.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(stat -c \"%a\" /home/becky/file1 | grep -q '4..') && (stat -c \"%G\" /home/becky/file1 | grep -q 'newgroup') && (sudo -u newguy cat /home/becky/file1 | grep -q 'hello') && (echo 'hi' >> /home/becky/file1 2>&1 | grep -q 'Permission denied') && ! (stat -c \"%a\" /home/becky/file1 | grep -q '.2.')"}, "example": {"type": "command", "data": "groupadd newgroup && useradd -m newguy && usermod -a -G newgroup newguy && chgrp newgroup /home/becky/file1 && chmod 460 /home/becky/file1"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && mkdir /home/jane/docs && touch /home/jane/docs/file1 && touch /home/jane/docs/file2 && chown -R jane:jane /home/jane/docs/ && chmod -R 750 /home/jane/docs/ && touch /home/jane/docs/file3 && chmod 600 /home/jane/docs/file3"}, "description": "Give jane permission to view and modify file3, but not file1 and file2. Also, ensure that members of group 'users' can only view, but not modify all files in jane's 'docs' directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/jane/docs/ | awk '{if ($1 !~ /^drwxr-x---/){exit 1;} if ($1 ~ /^-rwxr-x--x/ || $1 ~ /^-rw-------/) {exit 1;} if ($6 != \"file3\" && $9 != \"file3\"){ exit 1;}}END{print \"\"}'"}, "example": {"type": "command", "data": "chmod 640 /home/jane/docs/file1 && chmod 640 /home/jane/docs/file2 && chmod 660 /home/jane/docs/file3 && chgrp users /home/jane/docs/ && chmod -R 750 /home/jane/docs/"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir data && touch data/file1 && touch data/file2 && touch data/file3 && chmod 700 data && echo 'jane ALL=(ALL) NOPASSWD:/bin/cat' >> /etc/sudoers && su - jane"}, "description": "Jane wants to give Mike access to one of her files without giving him sudo permissions. What is the most secure way to do this?", "evaluation": {"type": "ground-truth", "answer": "Jane can add Mike to her group and grant group read access to the specific file she wants him to access. Alternatively, she could create a new group specifically for this file and add both herself and Mike to that group with the appropriate permissions.", "checking": null, "example": {"type": "description", "data": "Jane can create a new group called 'fileshare'. She can then add both herself and Mike to this new group and grant the group read access to the file she wants him to access.\n\nAlternatively, Jane can add Mike to her primary group. She can then grant group read access to the specific file she wants him to access."}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && chmod o+x /home/emma"}, "description": "Why can't other users access the home directory of emma? Help me fix it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cd /home && sudo -u mike ls emma | if [ \"$(cat -)\" = \"Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+x /home/emma"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/kate -m kate && cd /home/kate && touch important && chmod 400 important && echo 'echo \"This is an important file\"' >> .bashrc && su - kate"}, "description": "Kate has an important file called \"important\" that she cannot afford to have deleted. Can you set up a system where no user besides the owner of the file can delete or modify the file? Also, make sure that in the event of a system crash, the file will be recoverable.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(echo '\"This is an important file\"' && find / -name important -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "touch /etc/important && chattr +i /etc/important && chmod 744 /etc && chmod 744 / && chmod -R 755 /home/kate/ && chown -R kate:kate /home/kate"}}, "labels": ["permission", "system failure"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jdoe -m jdoe && touch /etc/passwd && chmod 600 /etc/passwd"}, "description": "jdoe wants to change his password. Help him change his password without giving him read permissions to /etc/shadow file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - jdoe -c 'echo MyNewPass | passwd jdoe --stdin --force' && ls -l /etc/passwd | awk '{if ($1 == \"-rw-------.\") { exit 0; } else { exit 1; } }') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o-rx /etc/shadow && chmod g-w /etc/shadow"}}, "labels": ["permission", "password"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'This is a secret message' > /home/john/message && chown john:john /home/john/message && chmod 500 /home/john/message && su - john"}, "description": "Read the contents of /home/john/message without changing any permissions", "evaluation": {"type": "ground-truth", "answer": "This is a secret message", "checking": null, "example": {"type": "command", "data": "cat /home/john/message"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && useradd -s /bin/bash -d /home/jill -m jill"}, "description": "Give user 'jill' read and write permission to a file owned by 'jack' without changing the owner.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jill cat /home/jack/testfile && sudo -u jill touch /home/jack/newfile) | if [ \"$(cat -)\" = \"test$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+rw /home/jack/testfile"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/employee1 -m employee1 && useradd -s /bin/bash -d /home/employee2 -m employee2 && useradd -s /bin/bash -d /home/employee3 -m employee3 && useradd -s /bin/bash -d /home/manager -m manager && echo 'manager ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && su - employee1"}, "description": "employee1 needs to access a file in employee2's home directory /home/employee2/important_info.txt for some work purpose, how can he access it?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/employee2/important_info.txt | if [ \"$(cat -)\" = \"This is important information\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 755 /home/employee2 && chmod 644 /home/employee2/important_info.txt && chgrp employee1 /home/employee2/important_info.txt"}}, "labels": ["permission", "user", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "usermod -G www-data $(whoami)"}, "description": "Add the current user to the `www-data` group.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "groups | grep -q www-data && echo true || echo false"}, "example": {"type": "command", "data": "usermod -a -G www-data $(whoami)"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/chris -m chris && echo 'Secret message for Chris' > /home/chris/secret && chmod 600 /home/chris/secret && chown chris:chris /home/chris/secret && su - alex"}, "description": "Read the message inside the /home/chris/secret file. Note that only Chris has access to the file.", "evaluation": {"type": "ground-truth", "answer": "Secret message for Chris", "checking": null, "example": {"type": "command", "data": "su - chris && cat /home/chris/secret"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && touch /home/emma/salesfile && touch /home/emma/customerfile && chown emma:emma /home/emma/salesfile && chown emma:emma /home/emma/customerfile && chmod 600 /home/emma/salesfile && chmod 640 /home/emma/customerfile && useradd -s /bin/bash -d /home/ella -m ella && useradd -s /bin/bash -d /home/alex -m alex"}, "description": "Only emma can write to salesfile, ella can only read it and alex should not have any access to this file. Ella and alex have read and write access to customerfile.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - ella -c 'cat /home/emma/salesfile && echo hello >> /home/emma/salesfile 2>&1' | (grep -q 'Permission denied' && [ ! -f /home/emma/salesfile ]) || exit 1 ) && (su - alex -c 'cat /home/emma/salesfile' | grep -q 'Permission denied' || exit 1) && su - ella -c 'echo hello >> /home/emma/customerfile && cat /home/emma/customerfile' | grep -q hello && su - alex -c 'echo bye >> /home/emma/customerfile && cat /home/emma/customerfile' | grep -q bye"}, "example": {"type": "command", "data": "chmod 600 /home/emma/salesfile && chmod 640 /home/emma/customerfile && chown emma:sales /home/emma/salesfile && chown emma:emma /home/emma/customerfile"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'Test message for john' > message.txt && chmod 400 message.txt && su - john"}, "description": "Only allow the owner of the file ~/message.txt to read the file. Prevent all other users, except root, from accessing the file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/john/message.txt && sudo cat /home/john/message.txt) | if [ \"$(cat -)\" = \"Test message for john\"$'\\n'$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 400 /home/john/message.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && chown root:jack /home/jack && chmod 750 /home/jack && su - jack"}, "description": "Why can't I create a file or directory in jack's home directory, and how can I fix it?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cd ~ && touch test && echo 'hello' > test2 && mkdir test_dir && rmdir test_dir && rm test2 && rm test"}, "example": {"type": "command", "data": "chmod 700 /home/jack"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir testdir && cd testdir && touch testfile && chmod u+s /bin/cat && chmod 700 ."}, "description": "As a user 'john', how can you read the contents of 'testfile' without changing the permission of testdir or testfile themselves? Hint: you need to use the 'cat' command with elevated privileges.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u john cat testdir/testfile | grep -q '^test content$' && echo 'correct' || echo 'incorrect'"}, "example": {"type": "command", "data": "echo 'test content' > testdir/testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && touch secret_file && chmod 600 secret_file && chown john secret_file && su - john"}, "description": "As a superuser, add the user mike to a group such that mike can read but not delete the file located in /home/john/secret_file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u mike cat /home/john/secret_file) && (sudo -u mike rm /home/john/secret_file 2>&1 | if grep -q 'Permission denied'; then echo 'Success: mike can read but not delete the file'; else echo 'Failed'; fi)"}, "example": {"type": "command", "data": "sudo usermod -a -G john mike && chgrp john /home/john/secret_file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && touch file1 && chown bob file1 && chmod o-rwx file1 && find . -type d -exec chmod 755 {} + && find . -type f -exec chmod 644 {} +"}, "description": "Bob wants to allow Alice to read file1 but not modify or delete it. What series of commands should Bob run?", "evaluation": {"type": "operation-checking", "answer": "Bob should run the command 'setfacl -m u:alice:r file1' to grant Alice read permission on file1. Then, he should run the command 'getfacl file1' to check that the new permissions were applied correctly.", "checking": {"type": "command", "data": ""}, "example": {"type": "command", "data": "setfacl -m u:alice:r file1 && getfacl file1"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && echo 'hello world!' > test && chmod 444 test && su - jane"}, "description": "Try to change the content of ~/test, what happens? Why?", "evaluation": {"type": "short-text", "answer": "Permission denied. The file is only readable, not writable.", "checking": null, "example": null}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && echo 'test' > /home/user1/testfile && chmod 000 /home/user1/testfile"}, "description": "As root, give user1 read and write permissions for /home/user1/testfile without modifying the permissions for other users. Also, verify that user1 can read and write to the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - user1 -c 'echo \"hello\" >> /home/user1/testfile && cat /home/user1/testfile' | if [ \"$(cat -)\" = \"test\"$'\\n'\"hello\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod u+rw /home/user1/testfile"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /opt/program && touch /opt/program/config.json && echo '{\"port\":8888, \"use_ssl\":false, \"data_file\":\"/var/data/file.txt\"}' > /opt/program/config.json && chown root:root /opt/program/config.json && chmod 600 /opt/program/config.json && useradd -s /bin/bash -d /home/worker -m worker"}, "description": "Suppose a program requires access to /opt/program/config.json with the same permissions as the program executable, but the file should still be owned by root. How would you set this up so that the worker user can run the program?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u worker ls -l /opt/program/ | awk '{if ($1~/^..x/) { exit 1; } else { exit 0; } }'"}, "example": {"type": "command", "data": "chmod go+x /opt/program/ && setfacl -m u:worker:r-x /opt/program/ && setfacl -m u:worker:r-- /opt/program/config.json"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir files && cd files && touch file1 && touch file2 && chown john:john file1 && chmod 640 file2"}, "description": "Give user bill the permission to read file1 and write to file2 in the directory /home/john/files. However, user george should not have any access to this directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(getfacl /home/john/files/file1 | grep -q 'bill:r--' && getfacl /home/john/files/file2 | grep -q 'bill:w-' && ls -alhd -- /home/john/files | awk '{if($1~/^drwxr-x---/) { exit 0; } else { exit 1; } }' && getfacl /home/john/files | awk '{if($2~/bill/) { if ($4~/^r[a-z-]$/) { exit 0; } }}' && getfacl /home/john/files | awk '{if($2~/bill/) { if ($6~/^w[a-z-]$/) { exit 0; } }}') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G john bill && chmod g+rx /home/john && chgrp john /home/john/files && chmod g+rx /home/john/files && setfacl -m u:bill:r /home/john/files/file1 && setfacl -m u:bill:w /home/john/files/file2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/user1 && mkdir /home/user2 && touch /home/user1/file1.txt && touch /home/user2/file2.txt"}, "description": "Add user1 and user2 to a group called \"fileaccess\" and configure group permissions so that members of the \"fileaccess\" group can read and write all files in each other's home directories.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l user1 -c 'echo \"test\" > ~/test.txt' && runuser -l user2 -c 'cat /home/user1/file1.txt') | if [ \"$(cat -)\" = \"test\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd fileaccess && usermod -a -G fileaccess user1 && usermod -a -G fileaccess user2 && chmod -R g+rwX /home/user*"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "sudo touch /var/log/mylog && sudo chmod o+w /var/log/mylog"}, "description": "You need to give a user named 'testuser' write permission to a log file located at /var/log/mylog. The other users should have no permission to read, modify or execute the mylog file. Additionally, you need to create a backup file of mylog file with read and write permission for root user only. Execute the logical command.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u testuser echo 'Test message' >> /var/log/mylog && sudo tail -n 1 /var/log/mylog | grep -q 'Test message') && (ls -l /var/log/mylog | awk '{if ($1~/^-.-----.--$/ && $3~/^root$/ && $4~/^root$/ && $5~/^0$/ && $6~/^6$/ && $7~/^10$/ && $8~/^backup$/ ) { exit 0; } else { exit 1; }}')"}, "example": {"type": "command", "data": "sudo chmod 600 /var/log/mylog && sudo chown root:root /var/log/mylog && sudo dd if=/var/log/mylog of=/var/log/mylog.backup && sudo chmod o-rwx,g-rwx /var/log/mylog.backup"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user -m user && echo 'Hello World!' > /home/user/hello.txt"}, "description": "Give user permission to read hello.txt but not modify it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u user cat /home/user/hello.txt && sudo -u user echo 'test' > /home/user/hello.txt && sudo -u user cat /home/user/hello.txt) | if [ \"$(cat -)\" = \"Hello World!$'\\n'$'\\n'test\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 444 /home/user/hello.txt"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sally -m sally && useradd -s /bin/bash -d /home/joe -m joe && echo 'sally1' | passwd --stdin sally && echo 'joe2#%' | passwd --stdin joe && mkdir /data && cd /data && touch secret.txt && echo 'top secret data' > secret.txt && chown sally secret.txt && chmod 640 secret.txt"}, "description": "Change the owner of `/data/secret.txt` to `joe` and make it readable only to `joe` (owner) and `sally` (group).", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /data/secret.txt | awk '{print $3\" \"$4\" \"$1}' | grep 'joe sally -rw-r-----') && (sudo -u joe cat /data/secret.txt | grep 'top secret data') && (sudo -u sally cat /data/secret.txt | grep 'top secret data') && (sudo -u nobody cat /data/secret.txt) | if [ \"$(cat -)\" = \"joe sally -rw-r-----\\ntop secret data\\ntop secret data\\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chown joe /data/secret.txt && chmod 640 /data/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && echo 'Hello, World!' > /home/jack/testfile && chmod 700 /home/jack/testfile && chown jack:jack /home/jack/testfile && su - jack"}, "description": "As user jack, read the contents of /home/jack/testfile", "evaluation": {"type": "ground-truth", "answer": "Hello, World!", "checking": null, "example": {"type": "command", "data": "cat /home/jack/testfile"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jason -m jason && cd /home/jason && echo 'Hello, I am a file!' > file.txt"}, "description": "Give the group 'developers' read and write access to file.txt, while giving others no permissions. If the 'developers' group does not exist, create it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/jason/file.txt | awk '{print $1}' | cut -c 2-4 | grep 'rw-' && getent group developers | grep developers) | if [ \"$(cat -)\" = \"rw-devel\ndevelopers:x:\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd developers && chown jason:developers /home/jason/file.txt && chmod 640 /home/jason/file.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jim -m jim && useradd -s /bin/bash -d /home/jack -m jack && mkdir /home/kickass && chown root:john /home/kickass && chmod 750 /home/kickass"}, "description": "Give the user jack the ability to write in the directory '/home/kickass' without modifying the permissions for any other user. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo su - jack -c 'cd /home/kickass && touch hacked' && sudo su - john -c 'cd /home/kickass && touch unhacked') | if [ \"$(ls /home/kickass | wc -l)\" = 1 ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+s /home/kickass && chgrp john /home/kickass && chmod 770 /home/kickass"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/harry -m harry && cd /home/harry && mkdir music && cd music && mkdir jazz && touch jazz/miles_davis && chown harry jazz/miles_davis && chmod 400 jazz/miles_davis && su - harry"}, "description": "As harry, try to remove jazz/miles_davis. What error message do you get? How can you delete it without changing its permission?", "evaluation": {"type": "ground-truth", "answer": "rm: cannot remove 'jazz/miles_davis': Permission denied", "checking": null, "example": {"type": "command", "data": "sudo rm jazz/miles_davis"}}, "labels": ["permission", "removal"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && cd /home/user1 && mkdir testdir && cd testdir && touch testfile && echo 'hello world' > testfile && chown user1:user1 testfile && chmod 600 testfile && su - user1"}, "description": "As user1, change the permissions of testfile to deny write access but still allow user1 to read the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u user1 sh -c '[ -r /home/user1/testdir/testfile ] && ! [ -w /home/user1/testdir/testfile ]' && sudo -u user1 cat /home/user1/testdir/testfile | grep 'hello world' > /dev/null"}, "example": {"type": "command", "data": "sudo chmod u-w /home/user1/testdir/testfile"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/sally -m sally && mkdir /home/jane/Sales && mkdir /home/sally/Sales && echo 'Sale Report' > /home/jane/Sales/report.txt && chmod 640 /home/jane/Sales/report.txt && chown jane:jane /home/jane/Sales/report.txt && echo 'confidential' > /home/sally/Sales/report.txt && chmod 640 /home/sally/Sales/report.txt && chown sally:sally /home/sally/Sales/report.txt"}, "description": "jane wants to see sally's sale report but doesn't have the permission. Add jane to sally's group and let jane read sally's sale report. Don't change the permission of any file or directory in the system", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l jane -c 'cat /home/sally/Sales/report.txt') | if [ \"$(cat -)\" = \"confidential\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G sally jane && su - jane"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m sam && useradd -m mike && useradd -m steve && touch /home/sam/file.txt && chown sam /home/sam/file.txt"}, "description": "Change the group ownership of /home/sam/file.txt to mike's primary group, without changing other file permissions", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/sam/file.txt | awk '{if ($3~/^mike$/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chgrp $(id -gn mike) /home/sam/file.txt"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/kate -m kate && cd /home/kate && touch file1 && chown kate:kate file1 && chmod 600 file1 && su - kate"}, "description": "As a regular user kate, create a directory called 'confidential' in your home directory. Only kate can access it (not even the group owner should have access), and kate should be able to read, write, and execute files in this directory. Additionally, the directory should be hidden from any other users who are not kate.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "[ -d /home/kate/.confidential ] && [ $(stat -c \"%a\" /home/kate/.confidential) -eq 700 ] && [ $(stat -c \"%U:%G\" /home/kate/.confidential) = \"kate:kate\" ] && [ $(ls -A /home/kate/ | egrep '^(\\.[^.]|[^.])*$' | wc -l) -eq 2 ] && [ $(ls -A /home/kate/.confidential | wc -l) -eq 0 ]"}, "example": {"type": "command", "data": "mkdir /home/kate/.confidential && chmod 700 /home/kate/.confidential"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jon -m jon && touch /myfile && chown jon /myfile && chmod 754 /myfile && su - jon"}, "description": "As user \"jon\", edit /myfile and save the changes. Allow read and write permissions to jon only.", "evaluation": {"type": "ground-truth", "answer": null, "checking": {"type": "command", "data": "ls -l / | grep myfile | awk '{if ($1~/^-rwxr-x--x/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 600 /myfile && nano /myfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user -m user && cd /home/user && mkdir data && chmod 700 data && cd data && touch file && chmod 600 file"}, "description": "Give read and write permission to the group \"admins\" to the file /home/user/data/file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/user/data/file && stat -c %G /home/user/data/file) | awk '{if ($1~/^-rw-------/ && /user/) { exit 1; } else if ($1~/^-rw-rw----/ && /admins/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "groupadd admins && usermod -a -G admins user && chmod g+rw /home/user/data/file"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jimmy -m jimmy && cd /home/jimmy && touch hello.txt && chmod 777 hello.txt && su - jimmy"}, "description": "How can you make it so that only the owner of the file can read and write to hello.txt, but all users can execute it? ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/jimmy | grep hello.txt | awk '{if ($1 == \"-rwxr-xr-x\" && $3 == \"jimmy\" && $4 == \"jimmy\") { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 755 hello.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && echo 'secret' > /home/jack/secret.txt && chmod 400 /home/jack/secret.txt"}, "description": "Grant 'r' permission to users in the same group for the file '/home/jack/secret.txt'.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/jack/secret.txt | awk '{print $1}' | cut -c 5 | grep r) && (getent group | grep $(getent passwd jack | awk -F':' '{print $4}')) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+r /home/jack/secret.txt"}}, "labels": ["permission", "group"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && useradd -s /bin/bash -d /home/tim -m tim && mkdir /home/sam/secret && touch /home/sam/secret/secret.txt && echo 'top secret' > /home/sam/secret/secret.txt && chown sam /home/sam/secret/secret.txt && chmod 660 /home/sam/secret/secret.txt && su - tim"}, "description": "As Tim, access the contents of the secret.txt file created by Sam.", "evaluation": {"type": "output-regex", "answer": "Permission denied", "checking": {"type": "command", "data": "cat /home/sam/secret/secret.txt"}, "example": {"type": "command", "data": "sudo chmod u+r /home/sam/secret/secret.txt && cat /home/sam/secret/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m bob && touch /home/bob/file && chown bob /home/bob/file"}, "description": "Give read and write permissions to 'bob' for /home/bob/file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - bob -c 'test -r /home/bob/file && test -w /home/bob/file' && echo 'Success' || echo 'Failure'"}, "example": {"type": "command", "data": "chmod +rw /home/bob/file"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && echo 'janepwd' | passwd --stdin jane && useradd -s /bin/bash -d /home/bob -m bob && echo 'bobpwd' | passwd --stdin bob && useradd -s /bin/bash -d /home/ted -m ted && echo 'tedpwd' | passwd --stdin ted"}, "description": "Give Jane, Bob, and Ted full read, write, and execute permissions to a new directory called \"shared\" that is located in the home directory of the user who executes this command", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home | grep shared | awk '{if ($1~/^d.rwxrwxr-x/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "mkdir ~/shared && chown :shared ~/shared && chmod 777 ~/shared && chmod g+s ~/shared"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && cd /home/mark && touch secret && chmod 600 secret"}, "description": "Only users in the group 'admins' should have read and write permissions for the file /home/mark/secret. Set appropriate permissions so that other users cannot access the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -la /home/mark/secret | grep -e rw-------) && (getfacl /home/mark/secret | grep -e 'user::rw-' -e 'group::rw-' -e 'other::---')"}, "example": {"type": "command", "data": "chgrp admins /home/mark/secret && chmod 660 /home/mark/secret"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir workdir && cd workdir && touch private.txt && touch public.txt && chmod 600 private.txt && chmod 644 public.txt && chown john:john *"}, "description": "John wants to grant access of public.txt to the group 'colleagues' but restrict access of private.txt only to himself. Help John in achieving this.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u john ls -l /home/john/workdir | grep -E '^(drw-rw-r--|drwx------|-rw-r--r--|-rw-------)' | wc -l | awk '{if($1 == 2) exit 0; else exit 1;}'"}, "example": {"type": "command", "data": "sudo addgroup colleagues && sudo usermod -a -G colleagues john && chgrp colleagues public.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'sensitive info' > /home/john/sensitive.txt && chmod 400 /home/john/sensitive.txt && su - john"}, "description": "How can you view the content of /home/john/sensitive.txt as another user without changing the permission of the file?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u john cat /home/john/sensitive.txt | if [ \"$(cat -)\" = \"sensitive info\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": ""}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m -s /bin/bash bob && useradd -m -s /bin/bash alice && useradd -m -s /bin/bash charlie && echo 'secret data' > /home/bob/file.txt && chmod 600 /home/bob/file.txt && chown bob:bob /home/bob/file.txt"}, "description": "Alice needs to access /home/bob/file.txt for a short time. What command should she use to access it?", "evaluation": {"type": "ground-truth", "answer": "cat /home/bob/file.txt", "checking": null, "example": {"type": "command", "data": "su - alice && cat /home/bob/file.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/michel -m michel && useradd -s /bin/bash -d /home/kim -m kim && useradd -s /bin/bash -d /home/david -m david && mkdir /data && cd /data && touch secret && chgrp admin secret && chmod 440 secret && mkdir all && mkdir all/readable && mkdir all/readable/writeable && mkdir all/readable/writeable/executable && cd /data/all && touch a_file && touch b_file && chmod 660 * && chgrp admin * && cd readable && touch c_file && touch d_file && chmod 640 * &&chgrp admin * && cd ../writeable && touch e_file && touch f_file && chmod 620 * && chgrp admin * && cd ../executable && touch g_file && touch h_file && chmod 700 * && chgrp admin * && cd / && echo \"michel ALL=(ALL) ALL\" >> /etc/sudoers && echo \"david ALL=(ALL) NOPASSWD: /bin/cat /data/secret\" >> /etc/sudoers"}, "description": "Create a command that will allow kim to read any file in the /data directory except for /data/secret, without being able to modify any file content.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - kim -c 'cat /data/all/readable/*' | if [ \"$(cat -)\" = \"$(cat /data/all/readable/a_file)$'\\n'\"$(cat /data/all/readable/b_file)$'\\n'\"$(cat /data/all/readable/c_file)$'\\n'\"$(cat /data/all/readable/d_file)$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G admin kim"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir important && echo 'top secret' > important/file1 && chmod 600 important/file1 && chown jane:jane important/file1 && su - jane"}, "description": "Jane has a file named 'file1' inside a directory named 'important'. Give only the read permission to the group and others for the file and remove the write permission for Jane to the file. Can Jane still read the file? Check it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u jane cat /home/jane/important/file1 | if [ \"$(cat -)\" = \"top secret\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod go+r /home/jane/important/file1 && chmod go-w /home/jane/important/file1"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "sudo useradd -s /bin/bash -d /home/rachel -m rachel && echo 'rachel ALL=(root) NOPASSWD:/usr/bin/less' >> /etc/sudoers && su - rachel"}, "description": "As user Rachel, view the contents of etc/group without modifying the file using the /usr/bin/less command.", "evaluation": {"type": "ground-truth", "answer": "Displays the contents of etc/group using the /usr/bin/less command.", "checking": null, "example": {"type": "command", "data": "sudo less /etc/group"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /workspace && chmod 777 /workspace && touch /workspace/file.txt && echo 'Hello World!' > /workspace/file.txt"}, "description": "Give user John read-only access to /workspace/file.txt and make sure no other users can access this file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john cat /workspace/file.txt && sudo -u mike cat /workspace/file.txt) | if [ \"$(cat -)\" = \"Hello World!\"$'\\n'\"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chown john /workspace/file.txt && chmod 400 /workspace/file.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && touch /etc/appointments && touch /etc/tasks && mkdir /etc/logs && chown jane /etc/appointments && chgrp jane /etc/tasks && chmod 750 /etc/logs"}, "description": "Create a group called `jane_group` and add yourself and Jane to the group. Give the group read-write access to `/etc/appointments` and `/etc/tasks`. Give the group full permissions to everything in the `/etc/logs` directory and all subdirectories.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jane cat /etc/appointments && sudo -u jane cat /etc/tasks && sudo -u jane touch /etc/logs/test_log) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd jane_group && usermod -a -G jane_group $(whoami) && usermod -a -G jane_group jane && chmod g+rw /etc/appointments && chmod g+rw /etc/tasks && chmod -R g+rwx /etc/logs"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /data"}, "description": "Create a new group called \"dataaccess\", add users 'bob' and 'alice' to the group, and ensure that new files and directories created under /data inherit the group ownership 'dataaccess'.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -ld /data | awk '{if ($4 == \"dataaccess\") { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "groupadd dataaccess && usermod -aG dataaccess bob && usermod -aG dataaccess alice && chmod g+s /data"}}, "labels": ["group", "permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/linuxuser -m linuxuser && cd /home/linuxuser && touch important_file.txt && chmod 600 important_file.txt"}, "description": "Grant read and write permissions to group members and other users for important_file.txt", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/linuxuser/important_file.txt | awk '{if ($1~/^-rw-rw-rw-/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod go+rw /home/linuxuser/important_file.txt"}}, "labels": ["permission", "user", "group"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/mydir && useradd -s /bin/bash -d /home/user -m user && touch /home/mydir/myfile && chown user:user /home/mydir/myfile && chmod 760 /home/mydir && chmod 640 /home/mydir/myfile"}, "description": "Create a new user and directory, and ensure that only the owner and group can read and write files within the directory. However, ensure that members of the group can navigate to the directory and execute files within it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cd /home/mydir && test -r myfile && test -w myfile && ! test -x myfile) && (cd /home && test -x mydir && test -r mydir && test -x mydir)"}, "example": {"type": "command", "data": "chmod g+x /home/mydir && chmod o-rwx /home/mydir"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/peter -m peter && touch /confidential && touch /public && echo 'sensitive data' > /confidential && echo 'not sensitive data' > /public && chmod 600 /confidential && chmod 644 /public && chown jane /confidential"}, "description": "Only user 'jane' should be able to read the file '/confidential', but all users should be able to read '/public'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /confidential && cat /public) | if [ \"$(cat -)\" = \"sensitive data$'\\n'not sensitive data$'\\n'\"]; then exit 0; else exit 1; fi && (ls -l /confidential | awk '{if ($1 != \"-rw-------\") { exit 1; } else { exit 0; }}' && ls -l /public | awk '{if ($1 != \"-rw-r--r--\") { exit 1; } else { exit 0; }}') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi && (echo \"john\" | tee -a /dev/null) | if [ \"$(stat -c %U /confidential)\" = \"jane\" ] && [ \"$(stat -c %U /public)\" = \"root\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 644 /public && chmod 600 /confidential && chown jane /confidential"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir files && cd files && mkdir public && mkdir private && touch public/file1 && touch private/file2 && echo 'content' > public/file1 && echo 'content' > private/file2 && chmod -R 750 /home/john && find /home/john -type f -name file2 -exec chmod 600 {} + && cd /home && useradd -s /bin/bash -d /home/mike -m mike && echo 'john ALL=(ALL) NOPASSWD: /bin/cat /home/john/files/private/file2' >> /etc/sudoers"}, "description": "john has created two files in his home directory, public/file1 and private/file2. Give mike the ability to view the contents of private/file2 using sudo, without allowing mike to view the contents of public/file1.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u john cat /home/john/files/public/file1 && (sudo -u john cat /home/john/files/private/file2 | if grep 'content' &>/dev/null; then exit 0;else exit 1;fi)"}, "example": {"type": "command", "data": "echo 'mike ALL=(john) NOPASSWD: /bin/cat /home/john/files/private/file2' >> /etc/sudoers"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/peter -m peter && useradd -s /bin/bash -d /home/tom -m tom && chmod 777 /home && chmod 777 /home/*"}, "description": "Jane wants to allow Tom to read a file in her home directory, but Peter should have no access to it. How can Jane set permissions for this file to achieve the required level of access control?", "evaluation": {"type": "ground-truth", "answer": "Jane can set the owner of the file to herself (jane) and the group to tom, then set the file permissions to 640 (rw-r-----). This will enable Tom to read the file and Jane to have full control over it while disallowing Peter from accessing the file.", "checking": null, "example": {"type": "command", "data": "touch /home/jane/file && chown jane:tom /home/jane/file && chmod 640 /home/jane/file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && echo '127.0.0.1 admin.com' >> /etc/hosts"}, "description": "Grant jane user permission to edit /etc/hosts file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jane cat /etc/hosts && sudo -u jane chmod u+w /etc/hosts && sudo -u jane echo '128.0.0.1 test.com' >> /etc/hosts && sudo -u jane cat /etc/hosts) | if [ \"$(cat -)\" = \"127.0.0.1 admin.com\"$'\\n'\"127.0.0.1 admin.com'$'\\n'\"128.0.0.1 test.com\"$'\\n'\"127.0.0.1 admin.com'$'\\n']; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo usermod -a -G root jane"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -d /home/emma -m emma && echo 'file content' > /home/emma/file && chmod 400 /home/emma/file"}, "description": "Emma wants to share her file with her colleagues, but she doesn't want them to modify it. How can she allow her colleagues to read her file without allowing them to modify it?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo su -c 'cd /home/emma && cat file' <colleague_username> | if [ \"$(cat -)\" = \"file content\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo chmod 444 /home/emma/file"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && cp /etc/passwd ./passwords && chmod 444 passwords && su - john"}, "description": "Why can't I change my password? Fix it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "echo 'newpassword' | passwd john && echo 'newpassword' | sudo -S su - john -c 'exit' && sudo su - john && echo 'newpassword' | sudo -S su - john -c 'exit' && echo 'newpassword' | sudo -S passwd john"}, "example": {"type": "command", "data": "chmod 644 /etc/passwd"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && cd /home/mark && mkdir test && touch test/test.txt && chown mark:mark test/test.txt && chmod 0644 test/test.txt"}, "description": "Change the owner and group of '/home/mark/test' to 'www-data:www-data'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/mark/test | awk '{if ($3==\"www-data\" && $4==\"www-data\") {exit 0;} else {exit 1;}}'"}, "example": {"type": "command", "data": "chown -R www-data:www-data /home/mark/test"}}, "labels": ["permission", "ownership"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'test content' > /home/john/testfile.txt"}, "description": "Give john read and write permission to testfile.txt, but remove all permissions for group and others.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john | grep testfile.txt | awk '{if ($1~/^-rw-------/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 600 /home/john/testfile.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "apt update && apt install sudo -y && useradd -s /bin/bash -d /home/tina -m tina  && echo 'tina ALL=NOPASSWD: /bin/ps, /usr/bin/top' >> /etc/sudoers"}, "description": "Limit sudo privileges to specific commands: Allow tina to run /bin/ps and /usr/bin/top commands only with sudo, without password prompt", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - tina -c 'sudo ps -ef; sudo top -n 1' 2>/dev/null | if [ \"$(cat -)\" = \"$(ps -ef; top -n 1 | head -2)\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'tina ALL=NOPASSWD: /bin/ps, /usr/bin/top' >> /etc/sudoers"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir pics && cd pics && mkdir public && mkdir private && touch public/pic1.jpg && touch public/pic2.jpg && touch private/pic3.jpg && chmod 700 private && chmod 755 public && chmod 644 public/* && chmod 600 private/*"}, "description": "jane wants to share public pics with alice, but keep private pics secure. Set file permissions such that alice can only access public pics, and jane can access both public and private pics", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u alice ls -l /home/jane/pics/public/* && sudo -u alice ls -l /home/jane/pics/private/* | if [ \"$(cat -)\" = \"ls: cannot open '/home/jane/pics/private/*': Permission denied\"$'\\n'/home/jane/pics/public/pic1.jpg$'\\n'/home/jane/pics/public/pic2.jpg$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "adduser alice && usermod -aG jane alice && chmod o-rx /home/jane && chmod o-rwx /home/jane/pics/private"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && cd /home/sam && mkdir documents && cd documents && touch doc1 && touch doc2 && touch doc3 && chmod -R 777 /home/sam"}, "description": "Set file permissions so that only the owner of the file can read, write, and execute files, but other users can only read and execute files in /home/sam/documents/ directory and its contents.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/sam/documents -type f ! -perm -700 -ls && find /home/sam/documents -type d ! -perm -500 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod -R 700 /home/sam/documents/* && chmod 500 /home/sam/documents"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jenna -m jenna && cd /home/jenna && touch file1 && touch file2 && mkdir folder1 && mkdir folder2"}, "description": "Give jenna read access to file1 but not file2. Give jenna write access to folder1 but not folder2", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jenna cat file1 && sudo -u jenna cat file2 && sudo -u jenna touch folder1/test1 && sudo -u jenna touch folder2/test2) | if [ \"$(cat -)\" = \"''\ntouch: cannot touch 'folder2/test2': Permission denied\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 444 file1 && chmod 000 file2 && chmod 022 folder1 && chmod 200 folder2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && useradd -s /bin/bash -d /home/lisa -m lisa && usermod -a -G mark lisa && cd /home/mark && echo 'A1B2C3D4E5' > secret_file && chmod 660 secret_file && chown mark secret_file && su - lisa"}, "description": "lisa wants to read the contents of /home/mark/secret_file but isn't allowed to. She has requested mark to change the file permissions to allow her to read the contents. Change the permissions on /home/mark/secret_file to allow read access to the group lisa belongs to without changing the group ownership of the file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/mark/secret_file | if [ \"$(cat -)\" = \"A1B2C3D4E5\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+r /home/mark/secret_file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir -p /private/docs && cd /private/docs && touch doc1.txt && touch doc2.txt && touch doc3.txt && touch doc4.txt"}, "description": "Change permissions of /private/docs in such a way that only tom can read and write while for other users access is disabled", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -ld /private/docs | awk '{ print $1 }' | grep ^drwx------) && (ls -l /private/docs | awk '{ print $3,$4,$1 }' | sed -n 2p | grep '^tom.*rw-') && (ls -l /private/docs | awk '{print $3,$4,$1}' | sed -n 3,4p | grep '^root.*---')"}, "example": {"type": "command", "data": "chmod 700 /private/docs && chown tom /private/docs"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && mkdir /home/john/priv && echo 'hi john' > /home/john/priv/file && chmod 400 /home/john/priv/file && chown john /home/john/priv/file"}, "description": "Make sure only john can read the contents of /home/john/priv/file. Also, enable him to edit the file as well.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john cat /home/john/priv/file | grep 'hi john') && (sudo -u john sh -c 'echo \"bye john\" > /home/john/priv/file') && (sudo -u john cat /home/john/priv/file | grep 'bye john')"}, "example": {"type": "command", "data": "chmod u+rw /home/john/priv/file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/john -m john && echo 'jane ALL = (john) NOPASSWD: /bin/bash' > /etc/sudoers.d/jane"}, "description": "Grant user jane permission to execute /bin/bash as user john without password. Test that the configuration is correct by running `/usr/bin/sudo /bin/bash -c 'whoami' -u john` as user jane.", "evaluation": {"type": "operation-checking", "answer": "john", "checking": null, "example": {"type": "command", "data": "/usr/bin/sudo /bin/bash -c 'whoami' -u john"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/kate -m kate && useradd -s /bin/bash -d /home/emma -m emma && mkdir /var/info && echo 'Hello, World!' > /var/info/file && chown root:kate /var/info/file && chmod 640 /var/info/file"}, "description": "Kate needs to access /var/info/file without using sudo or changing her own user. Add her to the correct group with minimum privileges needed and test that she can read the contents of /var/info/file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l kate -c 'cat /var/info/file' | if [ \"$(cat -)\" = \"Hello, World!\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -aG kate $(stat -c %U /var/info/file) && chmod g+r /var/info/file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && echo 'sensitive_info' > /home/user1/passwords.txt && chmod 400 /home/user1/passwords.txt"}, "description": "Give user2 read access to passwords.txt without changing its ownership or permissions", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - user2 -c 'cat /home/user1/passwords.txt' | if [ \"$(cat -)\" = \"sensitive_info\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G user1 user2"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "apt update && apt install sudo -y && useradd -s /bin/bash -d /home/jack -m jack && useradd -s /bin/bash -d /home/bill -m bill && useradd -s /bin/bash -d /home/tom -m tom && useradd -s /bin/bash -d /home/george -m george"}, "description": "Make the user jack able to execute `sudo reboot` command but others not allowed", "evaluation": {"type": "command-based", "answer": null, "checking": {"type": "command", "data": "echo \"password\" | sudo -S -u jack sudo -l | awk '{if ($0~/.*reboot/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "echo 'jack ALL=(ALL) NOPASSWD:/sbin/reboot' >> /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/olivia -m olivia && useradd -s /bin/bash -d /home/sam -m sam && touch /home/john/file1 && touch /home/olivia/file2 && touch /home/sam/file3"}, "description": "Set the permissions so that John can read and write to file1, Olivia can only read file1 and file2, Sam can only write file3 and no one else has any access to these files", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "([ -r /home/john/file1 ] && [ -w /home/john/file1 ] && ! [ -x /home/john/file1 ] && ! [ -r /home/olivia/file1 ] && [ -r /home/olivia/file2 ] && ! [ -w /home/olivia/file2 ] && ! [ -x /home/olivia/file2 ] && ! [ -r /home/sam/file1 ] && ! [ -w /home/sam/file1 ] && ! [ -x /home/sam/file1 ] && ! [ -r /home/sam/file2 ] && ! [ -w /home/sam/file2 ] && ! [ -x /home/sam/file2 ] && [ -w /home/sam/file3 ] && ! [ -r /home/sam/file3 ] && ! [ -x /home/sam/file3 ] && ! [ -rwx------ /home/john/file1 ] && ! [ -r--r----- /home/olivia/file1 ] && ! [ -rw-r--r-- /home/olivia/file2 ] && ! [ -------w- /home/sam/file3 ]) || exit 1"}, "example": {"type": "command", "data": "chmod 640 /home/john/file1 && chmod 440 /home/olivia/file1 && chmod 440 /home/olivia/file2 && chmod 200 /home/sam/file3"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/guest -m guest && cd /home/guest/ && touch testfile && echo 'hello' > testfile && chmod 644 testfile && chown guest testfile && su - guest"}, "description": "Print the contents of the testfile without changing its permissions.", "evaluation": {"type": "ground-truth", "answer": "hello", "checking": null, "example": {"type": "command", "data": "cat /home/guest/testfile"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jim -m jim && su - jim"}, "description": "How can I see the permissions of the current directory without typing 'ls -l'?", "evaluation": {"type": "ground-truth", "answer": "stat .", "checking": null, "example": {"type": "command", "data": "stat ."}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && cd /home/alex && touch new_file && chmod o+x new_file"}, "description": "Restrict read and write permissions for a user or group on a file, but allow execution permissions", "evaluation": {"type": "ground-truth", "answer": "chmod 711 new_file", "checking": null, "example": {"type": "command", "data": "chmod 711 new_file && ls -l new_file"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/john -m john"}, "description": "Set read and write permissions for user jane and group bob on all files and directories in john's home directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/john -type f ! -perm /u+rw,g+rw -ls && find /home/john -type d ! -perm /u+rwX,g+rwX -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chown john:bob /home/john -R && chmod u+rw,g+rw /home/john -R && chmod u+rwx,g+rx /home/john -R"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && cd /home/emma && touch file1 && echo 'Hello World!' > file1 && chmod 640 file1 && chown emma:emma file1"}, "description": "Change the group owner of file1 to 'users' and ensure that all members of the group 'users' can read the file, but only emma can write to it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/emma | grep file1 | awk '{if ($1!~/^-..rw----/) { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "groupadd users && usermod -a -G users emma && chgrp users file1 && chmod 640 file1"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "apt update && apt install sudo -y && useradd -s /bin/bash -d /home/mike -m mike"}, "description": "Add mike to the sudoers list with ALL permissions without requiring a password", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -l -U mike | if grep -q 'ALL: ALL' /dev/stdin; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'mike ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /public && cd /public && touch publicfile && chown root:root publicfile && chmod 744 publicfile && chmod g+s /public"}, "description": "Create a directory called /public where users can create, read and modify files but cannot remove or rename them. What command would you use to achieve this?", "evaluation": {"type": "command", "answer": "chmod +t /public", "checking": null, "example": {"type": "command", "data": "chmod 1775 /public"}}, "labels": ["permission", "directory"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/ryan -m ryan && cd /home/ryan && mkdir -p workspace/dir1 && touch workspace/file1 && cd workspace && mkdir -p dir2/dir3 && touch file2 && touch dir2/file3 && touch dir2/dir3/file4 && cd .. && chown ryan:ryan -R workspace"}, "description": "Give user mike access to /home/ryan/workspace/dir1 and its contents without giving him access to any other directory in the workspace. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u mike ls /home/ryan/workspace/dir1 && (sudo -u mike ls /home/ryan/workspace && exit 1) || exit 0 ) && ((sudo -u mike ls /home/ryan/workspace/dir2 || sudo -u mike ls /home/ryan/workspace/file1 || sudo -u mike ls /home/ryan/workspace/dir2/dir3/file4) && exit 1 || exit 0)"}, "example": {"type": "command", "data": "chmod o-rwx /home/ryan/workspace && chmod o+rx /home/ryan/workspace/dir1 && chown ryan:ryan /home/ryan/workspace/dir1 && usermod -aG ryan mike"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && useradd -s /bin/bash -d /home/bob -m bob && echo 'test' > /home/bob/file && chmod 750 /home/bob/file && chown bob:bob /home/bob/file && cd /home/lisa"}, "description": "As Lisa, how can I read, but not modify Bob's file?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cp /home/bob/file ./ && chmod -w file && cat file | if [ \"$(cat -)\" = \"test\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+r file && chgrp bob file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "apt update && apt install sudo -y && useradd -s /bin/bash -d /home/jack -m jack && useradd -s /bin/bash -d /home/bill -m bill && useradd -s /bin/bash -d /home/tom -m tom && useradd -s /bin/bash -d /home/george -m george"}, "description": "Ensure that only jack can access the file /home/jack/sample.txt. Provide user and group ownership to jack, deny group read and write permission and completely deny other users' permission", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "stat -c '%U:%G' /home/jack/sample.txt | if [ \"$(cat -)\" = \"jack:jack\" ]; then exit 0; else exit 1; fi && [ \"$(stat -c '%a' /home/jack/sample.txt)\" = \"600\" ] && [ \"$(ls -l /home/jack/sample.txt | awk '{print $4}')\" = \"jack\" ]"}, "example": {"type": "command", "data": "touch /home/jack/sample.txt && chown jack:jack /home/jack/sample.txt && chmod 600 /home/jack/sample.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/mark -m mark && usermod -aG sudo mark && echo 'ALL ALL=(ALL) NOPASSWD: ALL' | sudo tee /etc/sudoers.d/password_no_need && mkdir /data && chgrp dataaccess /data && chmod g+rwx /data"}, "description": "Create a group called \"dataaccess\" that will grant members read, write, and execute permissions on the directory /data. Add user john and mark to the group, and grant user mark superuser permission without the need for a password. Test that john can access /data correctly.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -n -u mark id && sudo -n -u john test -w /data && sudo -n -u john test -r /data && sudo -n -u john test -x /data) | if [ \"$(cat -)\" = \"uid=0(root) gid=0(root) groups=0(root)\\n\"true\"true\"true ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": ""}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/andy -m andy && cd /home/andy && touch testfile && chmod 777 testfile && su - andy"}, "description": "Andy wants to revoke write permission for all users except himself on the file 'testfile'. Set the necessary permissions so that only Andy has write access to the file while other users have read and execute permissions. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "test -w /home/andy/testfile && test ! -r /home/andy/testfile && test -x /home/andy/testfile && (echo 'testing' >> /home/andy/testfile && exit 1) || (chmod 750 /home/andy/testfile && sudo -u andy echo 'testing' >> /home/andy/testfile && cat /home/andy/testfile | grep testing)"}, "example": {"type": "command", "data": "chmod 750 /home/andy/testfile"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && touch secret_file && chmod 600 secret_file && echo 'secret message' > secret_file && chown john:john secret_file && chmod 400 /home/john"}, "description": "As the root user, how can you view the contents of /home/john/secret_file without changing the file permissions or ownership?", "evaluation": {"type": "ground-truth", "answer": "sudo cat /home/john/secret_file", "checking": null, "example": {"type": "command", "data": "sudo cat /home/john/secret_file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/james -m james && useradd -s /bin/bash -d /home/emma -m emma && useradd -s /bin/bash -d /home/jack -m jack && echo 'test-james' > /home/james/testfile && echo 'test-emma' > /home/emma/testfile && echo 'test-jack' > /home/jack/testfile"}, "description": "Give james and emma read and write access, but not jack, to the testfile that they respectively own. For contrasting clarity, permission levels assigned to the home directories should be set to 755 for all users. Set only the necessary permissions and make sure the command is not performed recursively.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(stat -c \"%a %U\" /home/james/testfile | awk '{if ($1 != 600 || $2 != \"james\") { exit 1; }}' && stat -c \"%a %U\" /home/emma/testfile | awk '{if ($1 != 600 || $2 != \"emma\") { exit 1; }}' && stat -c \"%a %U\" /home/jack/testfile | awk '{if ($1 != 400 || $2 != \"jack\") { exit 1; }}' && stat -c \"%a\" /home/* | awk '{if ($1 != 755) { exit 1; }}') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 600 /home/james/testfile && chmod 600 /home/emma/testfile && chmod 400 /home/jack/testfile && chmod 755 /home/james && chmod 755 /home/emma && chmod 755 /home/jack"}}, "labels": ["permission", "user", "directory"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/larry -m larry && useradd -s /bin/bash -d /home/curly -m curly && useradd -s /bin/bash -d /home/moe -m moe && chmod 700 /home/larry && chmod 700 /home/curly && chmod 700 /home/moe"}, "description": "Set Linux permissions so that only the owner of a home directory can access its content and no one else can, including the superuser. Test this on the home directories of larry, curly, and moe.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home | grep -v root | awk '{if (!/drwx------/) { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "chmod 700 /home/larry && chmod 700 /home/curly && chmod 700 /home/moe"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m john && useradd -m jacob && useradd -m jingle && useradd -m heimer && echo 'secretinfo' > /home/john/topsecret && echo 'classified' > /home/john/classified && echo 'notsecret' > /home/john/notsecret && echo 'unclassified' > /home/jacob/unclassified && touch /home/jingle/nofile && touch /home/heimer/nofile && chmod o-rwx /home/john/topsecret && chmod o-rwx /home/john/classified && chmod o-rwx /home/jaco/unclassified && chmod o-rwx /home/john/notsecret"}, "description": "You have 4 users: john, jacob, jingle, heimer. john has 3 files and only john can read them, jacob has 1 file but they should be able to read and write it, jingle and heimer have no file but they should be able to create new files in their home directories. Give permissions accordingly.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/john/topsecret && echo && cat /home/john/classified && echo && cat /home/john/notsecret && echo && cat /home/jacob/unclassified && echo && touch /home/jingle/newfile && touch /home/heimer/newfile && ls -l /home/jingle/ | grep newfile | awk '{if ($1~/^-.......w./) { exit 0; } else { exit 1; }}' && ls -l /home/heimer/ | grep newfile | awk '{if ($1~/^-.......w./) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 400 /home/john/topsecret && chmod 400 /home/john/classified && chmod 444 /home/john/notsecret && chmod 644 /home/jacob/unclassified && chmod 700 /home/jingle && chmod 700 /home/heimer"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/sarah -m sarah && echo 'dataaccess:x:1000:john,sarah' >> /etc/group && mkdir /data && chmod 770 /data && chown root:dataaccess /data"}, "description": "Suppose you have a directory called /data that contains sensitive files that should only be accessible to members of the group \"dataaccess\". Ensure that new files and directories created in this directory inherit the group ownership, and that users can only delete files and directories that they own. Also, make sure that both john and sarah can access /data.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /data -type f ! -perm /0660 -ls && find /data -type d ! -perm /02770 -ls && find /data -printf '%u %g %m %p\\n') | if [ \"$(cat -)\" = \"root dataaccess 2770 /data\\nroot dataaccess 660 /data/*\\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+s /data && setfacl -d -m g::rwx /data && setfacl -m g::rwx /data && find /data -type f -exec chmod 660 {} + && find /data -type d -exec chmod 2770 {} + && chown -R root:dataaccess /data && chmod g+s /data"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jhon -m jhon && echo 'Jhon' > /tmp/file && chown jhon:jhon /tmp/file && chmod 400 /tmp/file"}, "description": "Execute a command that will allow user Jhon to read /tmp/file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u jhon cat /tmp/file | grep -q 'Jhon'"}, "example": {"type": "command", "data": "chmod o+rx /tmp"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && groupadd programmers && usermod -a -G programmers john && usermod -a -G programmers jane && mkdir /programmers && chgrp programmers /programmers && chmod g+rwx /programmers"}, "description": "Set up a directory /programmers which is writable and readable by group 'programmers' only. Add two users john and jane and add both of them to the group programmers. Check if john can access/write the /programmers directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u john ls /programmers/"}, "example": {"type": "command", "data": "sudo chmod -R o-rwx /programmers"}}, "labels": ["permission", "user", "group"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jenny -m jenny && cd /home/jenny && mkdir testdir && touch testfile && chmod o-rwx testfile && chown jenny:jenny testfile && cd testdir && touch child && chmod o-rwx child && chown jenny:jenny child"}, "description": "Set the permissions such that jenny can only read, write testfile and list the contents of testdir (not access its contents), but no one else can access or read the file/directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/jenny | grep testdir | awk '{if ($1~/drwx------/) { exit 0; } else { exit 1; }}') && (ls -l /home/jenny/testdir | grep child | awk '{if ($1~/^-.*r.*-.*-*/) { exit 0; } else { exit 1; }}') && (ls -l /home/jenny | grep testfile | awk '{if ($1~/^-.*rw-------/) { exit 0; } else { exit 1; }}')"}, "example": {"type": "command", "data": "chmod 700 /home/jenny && chmod 700 /home/jenny/testdir && chmod 600 /home/jenny/testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/paul -m paul && useradd -s /bin/bash -d /home/ringo -m ringo && useradd -s /bin/bash -d /home/george -m george"}, "description": "Set the permissions on a directory, so that only the user john and members of his group can create, edit and delete files, while the other users cannot do anything within the directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - paul -c 'touch /home/john/testfile && rm /home/john/testfile' && su - ringo -c 'touch /home/john/testfile' && su - george -c 'touch /home/john/testfile' && su - john -c 'touch /home/john/testfile && rm /home/john/testfile && mkdir /home/john/test && touch /home/john/test/testfile && rm -r /home/john/test'"}, "example": {"type": "command", "data": "mkdir /home/john/testdir && chown john:john /home/john/testdir && chmod 770 /home/john/testdir"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m david && cd /home/david && echo 'david' > file1 && touch file2 && touch file3 && chown david file2 && chown david: staff file3 && chmod u=rxw,g=rw,o=r file1 && chmod u=r,g=wx,o=x file2 && chmod u=rw,g=rw,o=r file3"}, "description": "David wants to delete only file1. What permissions should he have? Adjust file permissions accordingly. Additionally, he should be able to list the contents of the directory, but not modify any files or directories.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l | awk '{if (!/^d/ && $1 !~/rw-r--r--/) { exit 1; }}') && (rm file1 && touch file1; exit 0)"}, "example": {"type": "command", "data": "chmod 755 . && chmod 640 file1 && chmod 711 file2 && chmod 664 file3 && chattr +i file1 && chown david: file1 && chown root:staff file2 && chown root:staff file3"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/emma -m emma && useradd -s /bin/bash -d /home/isaac -m isaac && useradd -s /bin/bash -d /home/nicole -m nicole && cd /home && mkdir shared_folder && cd shared_folder && touch file1 && touch file2 && echo 'Hello, World' > file1 && echo 'Welcome to Linux' > file2 && chown john:emma file1 && chown isaac:nicole file2 && chmod 764 . && chmod 000 file2"}, "description": "There's a shared folder that contains two files (file1 and file2). file1 is owned by john:emma while file2 is owned by isaac:nicole. The shared folder permissions are set to allow read, write for the owner, read for the group, and no permissions for others. file2 has no permissions set for anyone. Give nicole read and write access to file2 without changing any permissions on file1, or the shared folder.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo su - nicole -c 'cd /home/shared_folder && echo \"Linux is awesome\" > file2 && cat file2' | if [ \"$(cat -)\" = \"Linux is awesome\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo su - nicole -c 'cd /home/shared_folder && chmod o+w file2 && echo \"Linux is awesome\" > file2 && chmod o-w file2'"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && cd /home/mark && touch testfile && chown root:root testfile && chmod o-rwx testfile && chmod g+w testfile"}, "description": "Give read access of testfile to the user 'bob' without giving any other permission. If 'bob' does not exist, create it first.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - bob -c 'cat /home/mark/testfile' | if [ \"$(cat -)\" = \"Permission denied\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && setfacl -m u:bob:r /home/mark/testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && echo 'This is a secret message' > /home/bob/secret && chmod o-rwx /home/bob/secret"}, "description": "Add the user \"alice\" to the group \"bob\" so that Alice can read the secret file located at /home/bob/secret but cannot write to or delete the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(grep 'alice:x:[0-9]*:[^:]*,bob' /etc/group && ls -l /home/bob/secret | awk '{if ($1~/^-...--r--/) { exit 0; } else { exit 1; } }') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G bob alice && chown bob:bob /home/bob/secret"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/sales && touch /home/sales/file && chown -R root:sales /home/sales && chmod -R 2770 /home/sales && useradd -m -s /bin/bash -G sales john"}, "description": "Add user john to the sales group and set the default group to sales. Verify that john can create and modify files in the /home/sales directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l john -c 'touch /home/sales/johnsfile && echo \"newcontent\" > /home/sales/file && cat /home/sales/file && cat /home/sales/johnsfile' | if [ \"$(cat -)\" = \"newcontent$'\\n'$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G sales john && find /home/sales/ -type d -exec chmod g+s {} \\; && runuser -l john -c 'echo \"umask 002\" >> ~/.bashrc && source ~/.bashrc'"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "text", "data": ""}, "description": "What is the symbolic representation of the numeric mode 755?", "evaluation": {"type": "text", "answer": "-rwxr-xr-x", "checking": null, "example": null}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/kim -m kim && echo 'kim ALL=NOPASSWD: /usr/bin/find' > /etc/sudoers.d/kim"}, "description": "Give kim the permission to use find command with sudo, but not others", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u kim sudo /usr/bin/find / -iname 'passwd' 2>/dev/null | if [ \"$(cat - | wc -l)\" -lt 3 ]; then exit 1; else exit 0; fi"}, "example": {"type": "command", "data": "echo 'kim ALL=NOPASSWD: /usr/bin/find' > /etc/sudoers.d/kim"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && touch /var/log/access.log && chown root:sam /var/log/access.log && chmod 640 /var/log/access.log"}, "description": "Give the user \"sam\" permission to read and write to /var/log/access.log without elevating privileges.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u sam touch /var/log/access.log && sudo -u sam echo 'hello' >> /var/log/access.log && grep -q 'hello' /var/log/access.log"}, "example": {"type": "command", "data": "chmod o+w /var/log/access.log"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jessica -m jessica && echo 'Hello World!' > ~/message.txt && touch ~/secret.txt && chmod 600 ~/secret.txt"}, "description": "Jessica wants to share her message.txt file with the group 'friends' and allow them to read it. She also wants to deny all access to the secret.txt file. Help her achieve this goal.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l ~/message.txt | awk '{if ($1 !~ /^-rw-r--r--/){ exit 1;}}') && (ls -l ~/secret.txt | awk '{if ($1 !~ /^-rw-------/){ exit 1;}}')"}, "example": {"type": "command", "data": "sudo groupadd friends && sudo usermod -a -G friends jessica && sudo chown jessica:friends ~/message.txt && chmod 640 ~/message.txt && chmod 0 ~/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/linda -m linda && useradd -s /bin/bash -d /home/smith -m smith && useradd -s /bin/bash -d /home/jones -m jones && useradd -s /bin/bash -d /home/doe -m doe && echo 'grant ALL=(%admin) NOPASSWD: ALL' >> /etc/sudoers && groupadd admin && usermod -a -G admin linda && usermod -a -G admin smith && usermod -a -G admin jones && usermod -a -G admin doe && apt update && apt install tree -y"}, "description": "grant sudo privilege to group `admin`, but when using sudo, append a string 'admin user' at the beginning of the output", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo whoami && sudo tree /root) | if [ \"$(cat -)\" = \"admin user\\nroot\\n/root\\n0 directories, 0 files\\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'Defaults        env_reset\nDefaults        mail_badpass\nDefaults        secure_path=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin\"\nroot    ALL=(ALL:ALL) ALL\n%admin ALL=(ALL) NOPASSWD: ALL, syslog:ALL  Cmnd_Alias TREES = /usr/bin/tree*\\n%admin ALL=(syslog) NOPASSWD: TREES' > /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && echo 'Top-secret message' > /home/john/message.txt && chmod 400 /home/john/message.txt"}, "description": "Make the file /home/john/message.txt readable to the user 'jane' but not writable. The user 'john' should retain full access", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - jane -c 'cat /home/john/message.txt' && su - john -c 'echo success') | if [ \"$(cat -)\" = \"Top-secret message\"$'\\n'success ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod u+x /home/jane && chmod g+r /home/john/message.txt && chown john:john /home/john/message.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir docs && cd docs && mkdir personal && mkdir public && touch personal/note1 && touch personal/note2 && touch public/note3 && touch public/note4 &&chmod 700 personal && chmod 755 public"}, "description": "Give jane permission to read and write to all files in the 'personal' directory only and read-only permission to all files in the 'public' directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/jane/docs/personal -type d ! -perm 700 -ls && find /home/jane/docs/personal -type f ! -perm 600 -ls && find /home/jane/docs/public -type d ! -perm 755 -ls && find /home/jane/docs/public -type f ! -perm 644 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 600 /home/jane/docs/personal/* && chmod 700 /home/jane/docs/personal && chmod 644 /home/jane/docs/public/* && chmod 755 /home/jane/docs/public"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/susan -m susan && touch /home/bob/testfile && chown john:john /home/bob/testfile && chmod 664 /home/bob/testfile"}, "description": "Bob created a testfile in his home directory, but John needs to be able to read and write to it. Susan should have no access to this testfile. How do you change the file permissions accordingly?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/bob/testfile | awk '{if ($1~/^-rw-rw----/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 660 /home/bob/testfile && chown john:john /home/bob/testfile"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m sam -p $(echo test | openssl passwd -1 -stdin) && cd /home/sam && touch file1 && echo 'file1 content' > file1 && chmod 600 file1 && chown sam file1 && su - sam"}, "description": "As a user 'sam', append 'Hello World' to the file named 'file1' and make it read-only (400 permission)", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo cat /home/sam/file1 | if grep -q \"Hello World\" /home/sam/file1; then test \"$(stat -c '%a' /home/sam/file1)\" = \"400\"; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'Hello World' >> /home/sam/file1 && chmod 400 /home/sam/file1"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/marie -m marie && useradd -s /bin/bash -d /home/peter -m peter && echo 'marie ALL=(peter) /bin/cat' >> /etc/sudoers"}, "description": "Marie wants to execute 'cat /etc/shadow' as peter. Help her do that", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u peter cat /etc/shadow && sudo -u peter whoami) | if [ \"$(cat -)\" = \"root\"$'\\n'\"peter\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo -u peter cat /etc/shadow"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && cd /home/mark && mkdir projects && cd projects && mkdir important && mkdir less-important && touch important/file1 && touch important/file2 && touch less-important/file3 && touch less-important/file4 && chown mark:mark less-important && chmod 750 important && chmod 640 less-important/*"}, "description": "Give read, write and execute permissions to the group and other users on all files/directories inside /home/mark/projects/important directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "find /home/mark/projects/important/ -type f ! -perm 775 -ls && find /home/mark/projects/important/ -type d ! -perm 775 -ls"}, "example": {"type": "command", "data": "chmod -R 775 /home/mark/projects/important/"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir folder1 && mkdir folder2 && cd folder1 && echo 'this is folder1' > file1"}, "description": "Give read, write and execution permission to owner and group for both folder1 and folder2, also give read permission to others. Make sure this permission applies to all the content of both folders", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/john/folder1 -type f ! -perm 770 -ls && find /home/john/folder2 -type f ! -perm 770 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod -R 774 /home/john/folder* && chmod -R o+r /home/john/folder*"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/tony -m tony && useradd -s /bin/bash -d /home/steven -m steven && useradd -s /bin/bash -d /home/david -m david && echo 'Tony, Steven, and David are members of the group \"finance\"' && groupadd finance && usermod -a -G finance tony && usermod -a -G finance steven && usermod -a -G finance david"}, "description": "Grant the finance group read, write, and execute permissions for all files and directories in /home/finance. Ensure the owner of any new files or directories is set to the user creating them and the group is set to \"finance\".", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/finance -type f ! -perm 770 -ls && find /home/finance -type d ! -perm 770 -ls && ls -ld /home/finance | awk '{if ($1~/drwxrwx---/) { exit 0; } else { exit 1; } }') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+rwx /home/finance && chmod +t /home/finance && chgrp finance /home/finance && setfacl -R -m g:finance:rwx /home/finance && setfacl -R -d -m g:finance:rwx /home/finance"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'not_secret_file' > /home/john/not_secret_file && echo 'secret_file' > /home/john/secret_file && chmod 600 /home/john/secret_file && chown john /home/john/not_secret_file /home/john/secret_file &&useradd -s /bin/bash -d /home/mary -m mary"}, "description": "Make sure john can only read the contents of $HOME/not_secret_file, while mary should not have access to either file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john cat /home/john/not_secret_file && echo 'attempt_to_read_secret_file: $(sudo -u john cat /home/john/secret_file 2>&1)') | if [ \"$(cat -)\" = \"not_secret_fileattempt_to_read_secret_file: cat: /home/john/secret_file: Permission denied\"$'\\n' ]; then exit 0; else exit 1; fi && (sudo -u mary cat /home/john/not_secret_file 2>&1 && sudo -u mary cat /home/john/secret_file 2>&1) | if [ \"$(cat -)\" = \"cat: /home/john/not_secret_file: Permission deniedcat: /home/john/secret_file: Permission denied\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 400 /home/john/secret_file && chmod 400 /home/john/not_secret_file && chown john /home/john/not_secret_file && chown john /home/john/secret_file"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /var/log/messages && touch /var/log/messages/log1 && touch /var/log/messages/log2 && chown -R root:adm /var/log/messages && chmod -R 640 /var/log/messages && useradd -s /bin/bash -d /home/bob -m bob && usermod -aG adm bob && su - bob"}, "description": "Bob needs to read logs located at /var/log/messages but he's not able to access them. Help him access the logs.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cd /var/log/messages && cat log1 && cat log2"}, "example": {"type": "command", "data": "chmod o+rx /var/log/messages"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/dave -m dave && cd /home/dave && touch file1 && chown dave:root file1 && chmod 640 file1 && su - dave"}, "description": "Dave wants to give access to his file1 to group 'other'. Change the ownership and permissions accordingly and check if group 'other' can read the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo ls -l /home/dave/file1 | awk '{print $4}' | grep other) && cat /home/dave/file1 | if [ \"$(cat -)\" = \"Hello World\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo usermod -a -G other dave && sudo chown dave:other /home/dave/file1 && sudo chmod 664 /home/dave/file1"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && mkdir /restricted_folder && touch /restricted_folder/secret.txt && chmod 600 /restricted_folder/secret.txt && chown user1 /restricted_folder/secret.txt && chgrp user2 /restricted_folder/secret.txt"}, "description": "A file, called secret.txt, has been created in a restricted folder and has the permission of 660. The user1 owns the file, and user2 belongs to the group who owns the file. Please give user2 read-write access to the file without changing the owner or group of the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u user2 cat /restricted_folder/secret.txt && sudo -u user2 echo 'tester' > /restricted_folder/secret.txt && sudo -u user2 cat /restricted_folder/secret.txt) | if [ \"$(cat -)\" = \"tester$'\\n'\"tester$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+rw /restricted_folder/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/tom -m tom && touch /test-file && chown jane:bob /test-file"}, "description": "Give read and write access over /test-file to jack, read access to bob, and restrict all access to jane and tom, all of this without changing ownership of /test-file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l jack -c '[ -r /test-file ] && [ -w /test-file ]' && runuser -l bob -c '[ -r /test-file ] && [ ! -w /test-file ]' && runuser -l jane -c '[ ! -r /test-file ] && [ ! -w /test-file ]' && runuser -l tom -c '[ ! -r /test-file ] && [ ! -w /test-file ]') | if [ \"$(cat -)\" = \"true true true true\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 /test-file && setfacl -m u:jack:rw /test-file && setfacl -m u:bob:r /test-file && setfacl -m u:jane:0 /test-file && setfacl -m u:tom:0 /test-file"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/carla -m carla && useradd -s /bin/bash -d /home/mike -m mike && useradd -s /bin/bash -d /home/nick -m nick && echo 'carla:mike' > carla.txt && echo 'nick:mike' > nick.txt && find ~ -type d -exec chmod 770 {} + && find ~ -type f -exec chmod 660 {} +"}, "description": "Mike wants to be able to read the contents of carla's file and nick's file, and he should be able to delete them. Make this possible, limiting access to other files and directories to their usual owners.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/carla/carla.txt && cat /home/nick/nick.txt) | if [ \"$(cat -)\" = \"carla:mike$'\\n'nick:mike\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 640 /home/carla/carla.txt && chmod 640 /home/nick/nick.txt && chown carla:mike /home/carla/carla.txt && chown nick:mike /home/nick/nick.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/john -m john && cd /home/jane && mkdir files && cd files && touch file1 && touch file2 && cd .. && chmod 700 files && chown jane files && find . -exec touch -t 202206101200 {} + && su - john"}, "description": "john needs to copy file1 to his directory but cannot execute or read file2. set the necessary permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(test -r /home/john/files/file2 && exit 1) || cp /home/jane/files/file1 /home/john/file1_copy && test -r /home/john/file1_copy && ! test -x /home/john/file1_copy && (ls -l /home/john | grep file2 | wc -l | awk '{if ($1==0) { exit 0; } else { exit 1; }}')"}, "example": {"type": "command", "data": "chmod 400 /home/jane/files/file2 && chmod 600 /home/jane/files/file1 && chown jane:jane /home/jane/files/file1 && cp /home/jane/files/file1 /home/john/file1_copy"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && echo 'alice ALL=(ALL) NOPASSWD: /bin/chown' >> /etc/sudoers"}, "description": "How can Alice change owner of a file owned by root without using sudo or changing root's password?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo chown root:root / && cd ~ && touch test && sudo chown alice:alice /test && ls -l /test | awk '{if ($3~/^alice$/ && $4~/^alice$/) { exit 0; } else { exit 1; } }')"}, "example": {"type": "command", "data": "sudo chown :alice /path/to/file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/office && mkdir /home/office/docs && mkdir /home/office/secret_docs && touch /home/office/docs/public.txt && touch /home/office/secret_docs/secure.txt && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane"}, "description": "Give john and jane read access to /home/office/docs/public.txt but only jane should have read access to /home/office/secret_docs/secure.txt. Set proper permissions to accomplish this.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john cat /home/office/docs/public.txt && sudo -u jane cat /home/office/docs/public.txt && sudo -u jane cat /home/office/secret_docs/secure.txt) | if [ \"$(cat -)\" = \"public content$'\\n'public content$'\\n'secret content\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 644 /home/office/docs/public.txt && chmod 640 /home/office/secret_docs/secure.txt && chown jane:jane /home/office/secret_docs/secure.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "sudo useradd -u 2000 -g users -s /bin/bash -d /home/bob bob && sudo useradd -u 2001 -g users -s /bin/bash -d /home/tom tom && sudo useradd -u 2002 -g users -s /bin/bash -d /home/jerry jerry && sudo mkdir -p /data/shared && sudo chown -R root:users /data/shared && sudo chmod -R 2775 /data/shared"}, "description": "Create three new users bob, tom, and jerry who belong to the group users, set their home directory to /home/bob, /home/tom, and /home/jerry, respectively. Create a shared directory /data/shared whose owner is the root user and group owner is the users group. Set the SGID bit on the shared directory so that new files and directories inherit the group owner and have group write permission, and set permissions so that everyone in the users group can read, write, and execute files and directories in the shared directory. ", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo find /home/bob -type d -maxdepth 0 -printf '%u:%g\n' | grep 'bob:users' > /dev/null) && (sudo find /home/tom -type d -maxdepth 0 -printf '%u:%g\n' | grep 'tom:users' > /dev/null) && (sudo find /home/jerry -type d -maxdepth 0 -printf '%u:%g\n' | grep 'jerry:users' > /dev/null) && (sudo find /data/shared -type d -printf '%m %u %g %p\n' | awk '{if ($1 != \"2775\" || $2 != \"root\" || $3 != \"users\") { exit 1; } else { exit 0; }}')"}, "example": {"type": "command", "data": "sudo chmod g+ws /data/shared && sudo chown root:users /data/shared"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/susan -m susan && useradd -s /bin/bash -d /home/john -m john && echo 'susan ALL=(john) ALL' >> /etc/sudoers && su - susan"}, "description": "How can Susan run a specific command as John without being asked for a password?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u john whoami | if [ \"$(cat -)\" = \"john\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'susan ALL=(john) NOPASSWD:/bin/ls' >> /etc/sudoers"}}, "labels": ["sudo", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -m -d /home/admin admin && echo 'password' | passwd --stdin admin"}, "description": "How can I allow the user 'admin' to make changes to the entire system by adding them to the sudoers file?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo su - admin -c 'sudo whoami' | if [ \"$(cat -)\" = \"root\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'admin ALL=(ALL) ALL' >> /etc/sudoers && chmod 0440 /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && echo 'mike   ALL=(ALL) /bin/chown' >> /etc/sudoers"}, "description": "Grant mike permission to use the chown command, but only for files owned by himself, and files owned by the group to which he belongs", "evaluation": {"type": "command", "data": null}, "labels": ["permission", "user", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/nick -m nick && echo 'nick ALL=(ALL:ALL) ALL' >> /etc/sudoers && su - nick"}, "description": "How can I see my user's sudo privileges?", "evaluation": {"type": "ground-truth", "answer": "Run `sudo -l` or `sudo -v` commands to check your user's sudo privileges.", "checking": null, "example": {"type": "command", "data": "sudo -l"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir personal && cd personal && touch file1 && touch file2 && echo 'personal info' > file1 && echo 'general info' > file2 && chmod 700 /home/jane && chmod 600 /home/jane/personal/* && chown jane:jane /home/jane/personal/*"}, "description": "Allow user 'john' to read file2 but not file1 under /home/jane/personal/", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john cat /home/jane/personal/file2 && sudo -u john cat /home/jane/personal/file1 && ls -l /home/jane/personal | awk '{if ($1 != \"total 0\") {exit 1;} else {exit 0;}}') | if [ \"$(cat -)\" = \"general info\\n\\n-rw------- 1 jane jane    13 Sep 20 10:30 file1\\n-rw------- 1 jane jane    13 Sep 20 10:30 file2\\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G jane john && chmod 640 /home/jane/personal/file2"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/bob -m bob && cd /home/jane && mkdir test && cd test && touch file1 && touch file2 && chmod 660 file1 && chmod 640 file2 && chown bob file1 && chown jane file2 && su - jane"}, "description": "In /home/jane/test, give 'bob' permissions to read and write file1, and prevent everyone except 'jane' and 'bob' from accessing file2", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l bob -c 'echo success' && runuser -l jane -c 'echo success' && runuser -l alice -c 'echo failure') | if [ \"$(cat -)\" = \"success\"$'\\n'\"success\"$'\\n'\"failure\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 664 file1 && chown bob file1 && chmod 640 file2 && chown jane:bob file2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && echo 'test' >> file && chmod 444 file && chown jane file &&su - jane"}, "description": "Read the contents of file (/home/jane/file) and display on the screen", "evaluation": {"type": "ground-truth", "answer": "test", "checking": null, "example": {"type": "command", "data": "cat /home/jane/file"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && cd /home/jack && echo 'Welcome, Jack!' > test && chmod 400 test && chown jack test &&su - jack"}, "description": "Execute ~/test and get the output. Why can't another user do the same?", "evaluation": {"type": "ground-truth", "answer": "Welcome, Jack!", "checking": null, "example": {"type": "command", "data": "sudo -u jack cat ~/test"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && echo '1234' | passwd jane --stdin && useradd -s /bin/bash -d /home/tom -m tom && echo '5678' | passwd tom --stdin && useradd -s /bin/bash -d /home/jack -m jack && echo 'abcd' | passwd jack --stdin && mkdir /home/shared && chmod 777 /home/shared && touch /home/shared/file1 && chmod 440 /home/shared/file1 && touch /home/shared/file2 && chmod 660 /home/shared/file2 && chown jane /home/shared/file1 && chown tom /home/shared/file2 "}, "description": "There is a shared directory with two files inside it. file1 has read permission for jane only, and file2 has read and write permissions for tom only. Jack needs to be able to read both files. Give jack permissions to read files inside /home/shared.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - jack -c 'cat /home/shared/file1' && su - jack -c 'cat /home/shared/file2' | if [ \"$(cat -)\" = \"file1 contents$'\\n'file2 contents\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G jane jack && usermod -a -G tom jack && chmod 664 /home/shared/*"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/ben -m ben && echo 'admin ALL=(ALL) NOPASSWD: /bin/ls' >> /etc/sudoers && su - ben"}, "description": "Create a script called `myscript.sh` that will perform a `sudo ls` command. Then, ensure that only the user `admin` can run this script and all users in the `sudo` group can execute it as the `admin` user without a password.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "echo 'admin' | sudo -S /home/ben/myscript.sh  | if [ \"$(cat -)\" = \"hello world\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'echo hello world' > /home/ben/myscript.sh && chmod +x /home/ben/myscript.sh && chown admin:admin /home/ben/myscript.sh && chmod 750 /home/ben/myscript.sh"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /secret && cd /secret && touch secret.txt && echo 'top secret information here' > secret.txt && chmod 600 secret.txt && chown root:root secret.txt"}, "description": "Grant user 'john' read-only access to the /secret directory and its contents without giving him root privileges", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john cat /secret/secret.txt && sudo -u john cd /secret && pwd) | if [ \"$(cat -)\" = \"top secret information here$'\\n'/secret$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd secretgroup && usermod -a -G secretgroup john && chgrp -R secretgroup /secret && chmod -R 750 /secret"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir files && touch files/myfile.txt && echo 'hello world' > files/myfile.txt"}, "description": "Set permissions for files directory so that jane can create, delete, modify files in the directory and any newly created files have the same permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(touch /home/jane/files/testfile && rm /home/jane/files/testfile && echo 'test' > /home/jane/files/testfile && [[ \"$(cat /home/jane/files/testfile)\" == \"test\" ]] && [[ \"$(ls -ld /home/jane/files | awk '{print $1}')\" == \"drwxrwx---\" ]] && [[ \"$(ls -l /home/jane/files/myfile.txt | awk '{print $1}')\" == \"-rw-rw----\" ]]) || exit"}, "example": {"type": "command", "data": "chmod 770 /home/jane/files && chmod g+s /home/jane/files"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'my password is 1234' > password && chmod 444 password && chown root password"}, "description": "As a regular user, try to access the password file and explain what you see and why", "evaluation": {"type": "ground-truth", "answer": "You will not be able to access the file as it only allows read permission for its owner (root) but no other users or groups.", "checking": null, "example": {"type": "command", "data": "su - john && cat password"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "touch /opt/app/file.txt && chmod 750 /opt/app/file.txt"}, "description": "Give read-only access to the file /opt/app/file.txt to user 'guest'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u guest cat /opt/app/file.txt 2>/dev/null | if [ \"$(cat -)\" = \"Hello World\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo chown guest: /opt/app/file.txt && sudo chmod 755 /opt/app && sudo chmod 644 /opt/app/file.txt"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir myscripts && cd myscripts && touch script1.sh && touch script2.sh && chmod 755 *sh && touch temp_file && chown john:john temp_file"}, "description": "Make it so that only the owner can execute script2.sh while both owner and group members can execute script1.sh", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john /home/john/myscripts/script1.sh && sudo -u john /home/john/myscripts/script2.sh)|if [ \"$(cat -)\" = \"Hello from script1.sh\"$'\\n'\"Permission denied\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 751 /home/john/myscripts/script1.sh && chmod 700 /home/john/myscripts/script2.sh"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd john && useradd mary && mkdir /home/shared_folder && chmod 777 /home/shared_folder && chown john /home/shared_folder && usermod -aG john mary"}, "description": "Create a shared folder accessible to both John and Mary. Configure the permissions such that both can read, write and execute files in the folder. Also, ensure all new files created inside the shared folder have the same group ownership to that of the shared folder.", "evaluation": {"type": "ground-truth", "answer": null, "checking": "This question is already self-explanatory. Checking not required.", "example": {"type": "command", "data": "touch /home/shared_folder/example.txt && ls -l /home/shared_folder"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && cd /home/mike && mkdir project && cd project && touch file1 && touch file2 && mkdir folder1 && touch folder1/file3 && chown -R mike:mike /home/mike && su - mike"}, "description": "mike wants to give read and write permissions to user jack only for the /home/mike/project/folder1/file3 file. What is the command that mike should run?", "evaluation": {"type": "ground-truth", "answer": "chmod u+rw /home/mike/project/folder1/file3", "checking": null, "example": {"type": "command", "data": "chmod u+rw /home/mike/project/folder1/file3 && ls -l /home/mike/project/folder1/file3"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir documents && cd documents && touch file1 && touch file2 && mkdir testdir && touch testdir/test && chmod 704 testdir && chown john testdir/test &&chmod 600 file1 &&chmod 700 file2"}, "description": "User John is not able to access the file test, give him necessary permissions to access it. After the permissions are given, execute it and get its output", "evaluation": {"type": "ground-truth", "answer": "hello", "checking": null, "example": {"type": "command", "data": "chmod 777 testdir && su - john -c 'cd documents/testdir && ./test'"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/anna -m anna && useradd -s /bin/bash -d /home/bob -m bob && groupadd accounting && usermod -a -G accounting anna && usermod -a -G accounting bob && mkdir /var/accounting/ && chgrp accounting /var/accounting && chmod g+rwx /var/accounting && touch /var/accounting/logfile && chgrp accounting /var/accounting/logfile && chmod g+rw /var/accounting/logfile"}, "description": "Create a file that can be read and written by both users but can only be deleted by the group", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(touch /var/accounting/logfile2 && chgrp accounting /var/accounting/logfile2 && chmod g+rw /var/accounting/logfile2 && chmod g+t /var/accounting/ && chmod g+t /var/accounting/logfile2 && rm /var/accounting/logfile2 && ls /var/accounting/ | grep -c logfile2 ) | if [ \"$(cat -)\" = \"0\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": ""}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && cd /home/sam && echo 'password123' > file1 && chmod 400 file1 && su - sam"}, "description": "Change the permissions of file1 to ensure only the owner can read and write to it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/sam | grep file1 | awk '{if ($1~/^-..-------/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 600 file1"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/will -m will && useradd -s /bin/bash -d /home/bob -m bob && echo 'denyusers bob' >> /etc/ssh/sshd_config && systemctl restart sshd"}, "description": "Create a new user 'will' and deny ssh access to 'bob' while allowing access to 'will'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ssh bob@localhost -o ConnectTimeout=2 && ssh will@localhost -o ConnectTimeout=2 && echo 'SUCCESS') | awk '{if (!($1~/SUCCESS/)) { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "echo 'allowusers will' >> /etc/ssh/sshd_config && systemctl restart sshd"}}, "labels": ["permission", "user", "ssh"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir project && touch project/doc.txt && chmod 770 project && chown jane:jane project && chmod 640 project/doc.txt && chown jane:jane project/doc.txt && su - jane"}, "description": "Jane needs to share her project directory with her colleague John. Set the appropriate permissions so her colleague can read and write the files in the project directory but not be able to delete anything in the directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john touch /home/jane/project/test.txt && ls -l /home/jane/project/test.txt | awk '{if ($1~/^-..rw----./) { exit 0; } else { exit 1; }}') && (sudo -u john rm -f /home/jane/project/test.txt && ls -l /home/jane/project/test.txt &>/dev/null && exit 0 || exit 1) && (sudo -u john touch /home/jane/project/test.txt && echo 'test' >> /home/jane/project/test.txt && grep -q 'test' /home/jane/project/test.txt && exit 0 || exit 1) && (sudo -u john rm -f /home/jane/project/test.txt && ls -l /home/jane/project/test.txt &>/dev/null && exit 0 || exit 1)"}, "example": {"type": "command", "data": "chmod 775 /home/jane/project && chown jane:john /home/jane/project && chmod g+rw /home/jane/project/* && chmod g+t /home/jane/project"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/joe -m joe && useradd -s /bin/bash -d /home/jack -m jack && useradd -s /bin/bash -d /home/jill -m jill && touch /home/john/file1 && touch /home/john/file2 && touch /home/joe/file1 && touch /home/joe/file2 && mkdir /home/jack/folder && touch /home/jack/folder/file1 && touch /home/jack/folder/file2 && mkdir /home/jill/folder && touch /home/jill/folder/file1 && touch /home/jill/folder/file2 && chmod -R 764 /home/john && chmod -R 504 /home/joe && chgrp -R jill /home/jack/folder && chown -R john:joe /home/john/file1 /home/joe/file1 && chown -R jack /home/jack/folder/file2 && chown -R jill /home/jill"}, "description": "John needs to remove /home/joe/file1. What are the necessary permissions?", "evaluation": {"type": "ground-truth", "answer": "Write permission on /home/john and Write permission, Execute permission, and Read permission on /home and /home/joe", "checking": null, "example": {"type": "command", "data": "chmod u+w /home/john && chmod u+wrx /home/joe && su - john"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/kate -m kate && echo 'topsecret' > /home/emma/topsecret && chown emma:emma /home/emma/topsecret && echo 'public' > /home/john/public && echo 'forfriends' > /home/john/forfriends && echo 'ordinary' > /home/kate/ordinary"}, "description": "Set the permissions and ownerships of files and directories according to the following rules: emma should be the only user with read and write access to /home/emma/topsecret; john should be the only user with read and write access to /home/john/forfriends; all users should be able to read /home/john/public; kate should be the only user with write access to /home/kate/ordinary", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/emma/topsecret | awk '{if ($1!=\"-rw-------\") {exit 1;}} || ls -l /home/john/forfriends | awk '{if ($1!=\"-rw-------\" || $3!=\"john\") {exit 1;}} || ls -l /home/john/public | awk '{if ($1!=\"-rw-r--r--\") {exit 1;}} || ls -l /home/kate/ordinary | awk '{if ($1!=\"-rw-------\" || $3!=\"kate\") {exit 1;}}') && (cat /home/emma/topsecret && cat /home/john/forfriends && cat /home/john/public && cat /home/kate/ordinary) | awk '{if ($1!=\"topsecret\" || $2!=\"forfriends\" || $3!=\"public\" || $4!=\"ordinary\") {exit 1;}}'"}, "example": {"type": "command", "data": "chmod 600 /home/emma/topsecret && chown emma:emma /home/emma/topsecret && chmod 600 /home/john/forfriends && chown john:john /home/john/forfriends && chmod 644 /home/john/public && chmod 600 /home/kate/ordinary && chown kate:kate /home/kate/ordinary"}}, "labels": ["permission", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && useradd -s /bin/bash -d /home/bob -m bob && cd /home/jack && echo 'secret' > secret-file && chmod 600 secret-file && chown jack:jack secret-file && cd /home/bob && echo 'I am bob' > bob-file>"}, "description": "Jack needs to allow Bob to view the contents of /home/jack/secret-file without giving him permission to modify or delete the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - bob -c 'cat /home/jack/secret-file') >/dev/null 2>&1; if [ \"$?\" -eq \"0\" ]; then echo 'success'; else echo 'fail'; fi"}, "example": {"type": "command", "data": "chmod o+r /home/jack/secret-file"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/james -m james && useradd -s /bin/bash -d /home/lisa -m lisa && echo 'james lisa' > /home/sharing.txt && chmod o+r /home/sharing.txt"}, "description": "Make sharing.txt file only writable by james", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "[ $(stat -c '%a' /home/sharing.txt) -eq 604 ] && [ $(stat -c '%U' /home/sharing.txt) = james ] && [ $(stat -c '%G' /home/sharing.txt) = james ]"}, "example": {"type": "command", "data": "chmod 604 /home/sharing.txt && chown james:james /home/sharing.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && usermod -aG sudo jane"}, "description": "How can I temporarily elevate my privileges to run a command as a superuser without exiting from my current non-root session?", "evaluation": {"type": "ground-truth", "answer": "sudo <command>", "checking": null, "example": {"type": "command", "data": "sudo apt update"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/samantha -m samantha && mkdir /var/www/html && chown samantha:www-data /var/www/html && chmod 750 /var/www/html"}, "description": "Allow user 'samantha' to create, modify, and manage files in the '/var/www/html' directory with permissions set to 774 for files and 2775 for directories.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(test -w /var/www/html && ls -ld /var/www/html | awk '{if ($1~/^drwxrws.-*$/) { exit 0; } else { exit 1; } }') && (find /var/www/html -type f ! -perm 774 -ls && find /var/www/html -type d ! -perm 2775 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod -R 2775 /var/www/html && chmod -R g+w /var/www/html"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/carol -m carol && cd /home/carol && mkdir testdir && touch testdir/testfile && chmod 755 testdir && chmod 644 testdir/testfile && chown -R carol:carol testdir/ && su - carol"}, "description": "In the directory ~/testdir, the user carol needs only read and execute permissions, but not write permissions, while the file ~/testdir/testfile should have write permission only for carol and no one else. Achieve the desired permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -la /home/carol/testdir/ /home/carol/testdir/testfile | awk '{if (!($1~/^(dr-xr-xr-x|-.rw-r--r--)$/) || ($3!=\"carol\" && $4!=\"carol\" && $6!=\"carol\")) { exit 1; }}' && ls -la /home/carol/testdir/testfile | awk '{if ($1!~/^-..w-------$/) { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 755 /home/carol/testdir && chmod 644 /home/carol/testdir/testfile && chmod 600 /home/carol/testdir/testfile && chown -R carol:carol /home/carol/testdir/ "}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jessica -m jessica && cd /home/jessica && mkdir documents && cd documents && mkdir secret && touch file1 && touch file2 && echo 'this is a secret' >> secret/secret.txt && chmod 770 secret"}, "description": "Jessica wants to allow access to 'documents/secret' for everyone in the group 'secretgroup', but only give read permission to everyone else. Also, she wants to ensure that any new files or directories she creates will also have the same access restrictions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/jessica/documents/secret/secret.txt | awk '{if ($1~/^-..rwx---/) { exit 0; } else { exit 1; } }') && (find /home/jessica/documents -type f ! -perm 444 -exec ls -l {} + | awk '{if ($1~/^-..r..r..r/) { exit 0; } else { exit 1; } }') && (find /home/jessica/documents -type d ! -perm 770 -exec ls -ld {} + | awk '{if ($1~/^d..rwx---/) { exit 0; } else { exit 1; } }') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod g+rwx,o+r /home/jessica/documents/secret && chmod 777 /home/jessica/documents/secret && setfacl -d -m g:secretgroup:rwx,g::r-x,o::r-x /home/jessica/documents && setfacl -R -m g:secretgroup:rwx,g::r-x,o::r-x /home/jessica/documents"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && mkdir /home/mark/work && touch /home/mark/work/file.txt && chmod 640 /home/mark/work/file.txt && chown mark:mark /home/mark/work/file.txt &&su - mark"}, "description": "Mark needs to allow user Paul to read and write to the file.txt without adding Paul to the mark group. Set permissions to the file to allow Paul to read and write to it, but not execute.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo su - paul -c 'cd ~ && cat /home/mark/work/file.txt && echo test > /home/mark/work/file.txt && cat /home/mark/work/file.txt' | if [ \"$(cat -)\" = \"some text$'\\n'test$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 660 /home/mark/work/file.txt && chown mark:paul /home/mark/work/file.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /music && cd /music && mkdir rock && mkdir pop && cd rock && touch song1.txt && touch song2.txt && cd ../pop && touch song3.txt && touch song4.txt"}, "description": "Grant read-only permissions for rock directory and read-write permissions for pop directory to a new user named 'guest'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u guest ls /music/rock && sudo -u guest touch /music/pop/song5.txt) | if [[ $(echo $?) = '0 1' ]]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "useradd -m guest && usermod -aG www-data guest && chown www-data:www-data /music/rock && chmod 444 /music/rock && chown nobody:nobody /music/pop && chmod 774 /music/pop && setfacl -d -m u:guest:r /music/rock && setfacl -d -m u:guest:rw /music/pop"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && passwd john"}, "description": "How do I add John to the sudo group so he can execute commands with root privileges?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -l -U john | if [[ $(cat -) =~ .*root.* ]]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -aG sudo john"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/brian -m brian && touch /opt/files && chown brian /opt/files && chmod 600 /opt/files && echo 'example_file_contents' > /opt/files && su - brian"}, "description": "Read the contents of the file /opt/files as user brian.", "evaluation": {"type": "ground-truth", "answer": "example_file_contents", "checking": null, "example": {"type": "command", "data": "cat /opt/files"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/guest -m guest && echo 'guest:password' | chpasswd && cd /home/guest && mkdir test && cd test && touch file1 && touch file2 && chmod 600 file1 && chmod 700 file2 && cd ../ && chmod 700 test"}, "description": "As a root user, grant the guest user read and write permission to file1 and read permission to file2. guest should not be able to delete any of the files in the test directory nor add files to the test directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo su - guest -c \"( cat ~/test/file1 && cat ~/test/file2 ) >/dev/null && echo Access granted || echo Access denied\" | if [ \"$(cat -)\" = \"Access granted\" ]; then exit 0; else exit 1; fi && (sudo su - guest -c \"rm -f ~/test/file1\" >/dev/null 2>&1 && echo Cannot delete || echo Can delete\") | if [ \"$(cat -)\" = \"Cannot delete\" ]; then exit 0; else exit 1; fi && (sudo su - guest -c \"touch ~/test/newfile\" >/dev/null 2>&1 && echo Can write || echo Cannot write\") | if [ \"$(cat -)\" = \"Cannot write\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo chmod 640 /home/guest/test/file1 && sudo chmod 400 /home/guest/test/file2 && sudo chown root:guest /home/guest/test/file1 && sudo chown root:guest /home/guest/test/file2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && touch /home/john/secret && chmod 400 /home/john/secret"}, "description": "Allow user 'jane' to read the file /home/john/secret but not modify or delete it", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/john/secret && echo 'test') | if [ \"$(cat -)\" = \"secret\"$'\\n''test'$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "useradd jane && usermod -aG john jane && chmod 440 /home/john/secret"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/sarah -m sarah && chmod -R 600 /etc/passwd && chmod -R 600 /etc/shadow"}, "description": "Create a group called 'admin' that only members 'bob' and 'john' belong to. Also, make sure that members of this group can only read '/etc/passwd' and '/etc/shadow' files but not modify them. Members of this group should also be able to execute binary files in '/usr/sbin'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(groups bob | grep -qw admin) && (groups john | grep -qw admin) && (groups sarah | grep -qw admin) && ls -l /etc/passwd | awk '{if ($1~/^-r..------/) { exit 0; } else { exit 1; } }' && ls -l /etc/shadow | awk '{if ($1~/^-r..------/) { exit 0; } else { exit 1; } }' && ls -l /usr/sbin | awk '{if ($1~/^.{3}s/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "groupadd admin && usermod -a -G admin bob && usermod -a -G admin john && chown root:admin /etc/passwd && chown root:admin /etc/shadow && chmod 640 /etc/passwd && chmod 640 /etc/shadow && chmod g+x /usr/sbin"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && useradd -s /bin/bash -d /home/daniel -m daniel && su - emma && mkdir /home/emma/docs && cd /home/emma/docs && echo 'this is some confidential information' > confidential.txt && chmod 600 confidential.txt && chown emma:emma confidential.txt && su - daniel"}, "description": "You are user daniel. Find a way to access /home/emma/docs/confidential.txt without changing its permissions. Retrieve the content of this file and assign it to the variable ANSWER.", "evaluation": {"type": "operation-checking", "answer": "this is some confidential information\n", "checking": {"type": "command", "data": "echo $ANSWER | grep -q 'this is some confidential information'; echo $?"}, "example": {"type": "command", "data": "while read -r line; do export ANSWER=\"$line\"; echo $ANSWER; done < /home/emma/docs/confidential.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jackson -m jackson && echo 'alias update=\"sudo apt update\"' >> /home/jackson/.bashrc && echo 'alias install=\"sudo apt install\"' >> /home/jackson/.bashrc"}, "description": "Create an alias called 'update' that runs 'sudo apt update', and an alias called 'install' that runs 'sudo apt install'. These aliases should be accessible only to the user 'jackson' and no other user should be able to modify or execute these aliases.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - jackson -c 'alias' | if [ \"$(grep -E '^alias update' -A1 | tail -n 1)\" = \"sudo apt update\" ] && [ \"$(grep -E '^alias install' -A1 | tail -n 1)\" = \"sudo apt install\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 700 /home/jackson && chown jackson:jackson /home/jackson && chmod 700 /home/jackson/.bashrc"}}, "labels": ["permission", "user", "alias"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && useradd -s /bin/bash -d /home/nancy -m nancy && useradd -s /bin/bash -d /home/lucy -m lucy && echo 'nancy ALL=(mike) /bin/cat' >> /etc/sudoers && chmod 440 /etc/sudoers"}, "description": "nancy should be allowed to execute `cat` as mike's user, but other users should not be allowed to do so. Grant permission to nancy by modifying the /etc/sudoers file, without giving her access to any other mike's commands.", "evaluation": {"type": "ground-truth", "answer": "nancy ALL=(mike) /bin/cat", "checking": null, "example": {"type": "command", "data": "sudo -u mike cat /etc/sudoers"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/amy -m amy && cd /home/amy && mkdir folder1 && mkdir folder2 && touch folder1/file1.txt && touch folder1/file2.txt && touch folder2/file3.txt && touch folder2/file4.txt && chmod -R 644 /home/amy/* && chmod -R 755 /home/amy && chown -R amy: ."}, "description": "Create a group named 'members' if it doesn't exist, and add amy to that group. Set read and write permissions for group members on all files and directories in amy\u2019s home directory. They should not be able to delete any files but should be able to create new files and directories in amy's home directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(getent group members && ls -l -R /home/amy | grep -v '^total' | awk '{if ($1~/^-...r..r..$/) { exit 1; } else { exit 0; }}' && sudo -u amy touch ~/members-test && sudo -u amy mkdir ~/members-folder) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd members && usermod -a -G members amy && find /home/amy -type d -exec chmod g=rwx,o-rwx {} + && find /home/amy -type f -exec chmod g=rw,o-rwx {} + && find /home/amy -type d -exec chmod g+s {} +"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/myuser -m myuser && cd /home/myuser && echo 'I am the user myuser' > myfile && cd /home && chown -R myuser:myuser myuser"}, "description": "Can user 'myuser' execute the command 'ls /root'? Why or why not? Explain how to grant the user permission if necessary.", "evaluation": {"type": "ground-truth", "answer": "No, he can't execute the command since he doesn't have permission to access the root directory. To grant him permission, we can either add him to the 'root' group or use the 'sudo' command.", "checking": null, "example": {"type": "command", "data": "sudo usermod -a -G root myuser"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jenny -m jenny && useradd -s /bin/bash -d /home/tony -m tony && cd /home/jenny && mkdir secrets && cd secrets && echo 'top secret' > secret_file && cd /home/tony && mkdir secrets && cd secrets && echo 'Super secret' > secret_file && chmod 660 /home/jenny/secrets/secret_file && chmod 660 /home/tony/secrets/secret_file"}, "description": "Set read permissions to only jenny to read /home/jenny/secrets/secret_file. Make sure tony is unable to read this file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jenny cat /home/jenny/secrets/secret_file && sudo -u tony cat /home/tony/secrets/secret_file) | if [ \"$(cat -)\" = \"top secret\"$'\\n'\"cat: /home/tony/secrets/secret_file: Permission denied\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 600 /home/jenny/secrets/secret_file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && useradd -s /bin/bash -d /home/user3 -m user3 && echo 'user1 ALL=(user2:user3) /bin/bash' > /etc/sudoers && chmod 440 /etc/sudoers"}, "description": "User1 needs to execute /bin/bash as user2 and user3 with sudo permissions. Which sudoers file configuration makes it possible?", "evaluation": {"type": "ground-truth", "answer": "user1 ALL=(user2:user3) /bin/bash", "checking": "sudo -u user1 sudo -u user2 -g user3 /bin/bash -c 'echo Hello world!'", "example": {"type": "command", "data": "echo 'user1 ALL=(user2:user3) /bin/bash' > /etc/sudoers && chmod 440 /etc/sudoers"}}, "labels": ["sudo", "permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && cd /home/jack && echo 'echo a3b0c7' > test && chmod 000 test && chown jack test &&su - jack"}, "description": "execute ~/test and get the output", "evaluation": {"type": "ground-truth", "answer": "a3b0c7", "checking": null, "example": {"type": "command", "data": "chmod 777 test && ~/test"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && useradd -s /bin/bash -d /home/oliver -m oliver && useradd -s /bin/bash -d /home/lucas -m lucas && useradd -s /bin/bash -d /home/mia -m mia && ln -s /etc/passwd /home/emma/passwd && ln -s /etc/passwd /home/lucas/passwd && ln -s /etc/passwd /home/mia/passwd"}, "description": "There are multiple soft links to /etc/passwd in three home directories. Identify which users are the owners of those home directories and which account has access to another account's passwd file through a soft link.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home | awk '{if ($9~/^(emma|oliver|lucas|mia)$/) { system(\"ls -l /home/\"$9\"/passwd\"); }}' | awk '{if (NF>=9) { print $3\" has a soft link to /etc/passwd owned by \"$4; } }'"}, "example": {"type": "command", "data": "chown emma:emma /home/emma/passwd && chown lucas:lucas /home/lucas/passwd && chown mia:mia /home/mia/passwd"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "touch secret.txt && chmod go-rwx secret.txt"}, "description": "Create a file called secret.txt in your home directory and make it read and write only for the owner and executable for no one.", "evaluation": {"type": "command", "answer": null, "checking": {"type": "command", "data": "[[ $(stat -c '%a' ~/secret.txt) == '600' ]] && [[ $(stat -c '%U' ~/secret.txt) == $USER ]] && [[ $(stat -c '%G' ~/secret.txt) == $USER ]] || exit 1"}, "example": {"type": "command", "data": "touch secret.txt && chmod 600 secret.txt"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && cd /home/jack && echo 'echo hello world' > test && chmod 764 test && chown jack test && su - jack"}, "description": "execute ~/test and get the output", "evaluation": {"type": "ground-truth", "answer": "hello world", "checking": null, "example": {"type": "command", "data": "chmod 777 test && ~/test"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/mark -m mark && useradd -s /bin/bash -d /home/mike -m mike && touch /data && chown jane:jane /data && chmod 440 /data"}, "description": "Give mark and mike read-only permissions to /data, while jane has read-write permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jane touch /data/test_j && sudo -u mark touch /data/test_m && sudo -u mike touch /data/test_k && ls -l /data) | awk '{if ($3 == \"jane\" && $4 == \"jane\" && $1 == \"-r--r-----\") { e1=1; } if ($3 == \"mark\" && $4 == \"jane\" && $1 == \"-r--r--r--\") { e2=1; } if ($3 == \"mike\" && $4 == \"jane\" && $1 == \"-r--r--r--\") { e3=1; } } END {if (e1 && e2 && e3) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod g+r /data && chmod g+w /data"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jimmy -m jimmy && mkdir /home/jimmy/lesson1 && mkdir /home/jimmy/lesson2 && mkdir /home/jimmy/lesson3 && touch /home/jimmy/lesson1/a && touch /home/jimmy/lesson1/b && touch /home/jimmy/lesson1/c && touch /home/jimmy/lesson2/d && touch /home/jimmy/lesson2/e && touch /home/jimmy/lesson2/f && touch /home/jimmy/lesson2/g && touch /home/jimmy/lesson3/h && touch /home/jimmy/lesson3/i && touch /home/jimmy/lesson3/j && echo 'Lesson 1' > /home/jimmy/lesson1/a && echo 'Lesson 2' > /home/jimmy/lesson2/d && echo 'Lesson 3' > /home/jimmy/lesson3/h"}, "description": "Modify the permissions of the files in the folder `/home/jimmy/lesson1` so that only jimmy and the members of the group `learning` have read/write access. Make sure that the group can access newly created files and directories  within `/home/jimmy/lesson1` and `/home/jimmy` folders while still making jimmy as the owner.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/jimmy | awk '$3 != \"jimmy\" { exit 1 } $4 != \"learning\" { exit 1 }' && ls -l /home/jimmy/lesson1 | awk '$1 ~ /^.rw-rw----/{next} {exit 1}'"}, "example": {"type": "command", "data": "chmod 2770 /home/jimmy && chmod 660 /home/jimmy/lesson1/* && chgrp learning /home/jimmy && chgrp learning /home/jimmy/lesson1 && chmod g+s /home/jimmy && chmod g+s /home/jimmy/lesson1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && cd /home/mark && echo 'I am Mark' > testfile && chmod 444 testfile"}, "description": "As the root user, change testfile to be writable by the group 'users', and add 'tom' to the 'users' group without affecting other users currently in the group", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l testfile | awk '{if ($4!~/users/) { exit 1; }}' && groups tom | grep -q users) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chgrp users testfile && chmod g+w testfile && usermod -a -G users tom"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir files && touch files/file1 && echo 'Hello World!' > files/file1 && chmod 444 files/file1 && chown john:john files/file1 && cd /home && su - john"}, "description": "Change the content of file1 to 'Linux is Awesome!' without changing the file permissions and ownership.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cat /home/john/files/file1 | if [ \"$(cat -)\" = \"Linux is Awesome!\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'Linux is Awesome!' > /home/john/files/file1"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && echo 'some data' > /home/jane/test.txt && chmod 444 /home/jane/test.txt && chown jane /home/jane/test.txt"}, "description": "Your colleague Jane owns a file called test.txt in her home directory, but she needs you to access it and tell her the contents. Help her and make sure you don't modify the file in any way.", "evaluation": {"type": "ground-truth", "answer": "some data", "checking": null, "example": {"type": "command", "data": "cat /home/jane/test.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && mkdir /data && chown root:dataaccess /data && chmod 3770 /data"}, "description": "Create a group called 'dataaccess' which will have read and write access to the /data directory. Ensure that new files and directories created in this directory inherit the group ownership and that users can only delete files and directories that they own", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -ld /data | awk '{if ($1 == \"drwxrws---\") { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "groupadd dataaccess && chown root:dataaccess /data && chmod +t /data && chmod g+rwxs /data"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && touch testfile && chmod 555 testfile && chattr +i testfile"}, "description": "Why can't I delete my file 'testfile'? Help me remove the unremovable attribute.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "rm -f /home/john/testfile && [ ! -f /home/john/testfile ] && echo 'removed' || echo 'not-removed'"}, "example": {"type": "command", "data": "chattr -i /home/john/testfile"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && echo 'password' | passwd john --stdin && echo 'password2' | passwd jane --stdin"}, "description": "Change the password of the user 'jane' to 'newpassword'.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "echo 'newpassword' | passwd jane --stdin && su - jane -c 'echo success'"}, "example": {"type": "command", "data": ""}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && touch secret_file.txt && chmod 660 secret_file.txt && echo 'This is my secret' > secret_file.txt && useradd -s /bin/bash -d /home/mark -m mark && usermod -aG adm mark && su - mark"}, "description": "As a member of the 'adm' group, mark should be able to access the secret file in jane's home directory. Make sure it is accessible to him without changing group ownership of the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo runuser -l mark -c 'cat /home/jane/secret_file.txt' | if [ \"$(cat -)\" = \"This is my secret\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+x /home/jane && chmod g+x /home/jane && chmod o+r /home/jane/secret_file.txt"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'This is a secret file.' > /secret.txt && chmod 600 /secret.txt && chown john:john /secret.txt"}, "description": "Give a user named \"maggie\" read access to the file named \"secret.txt\" without providing any other permissions to that user or changing the permissions of the file itself.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u maggie cat /secret.txt | if [ \"$(cat -)\" = \"This is a secret file.\" ]; then exit 0; else exit 1; fi "}, "example": {"type": "command", "data": "sudo usermod -a -G john maggie && newgrp john"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/amy -m amy && useradd -s /bin/bash -d /home/becky -m becky && useradd -s /bin/bash -d /home/claire -m claire && cd /home && mkdir shared && cd shared && touch testfile && chmod 777 testfile && chown amy testfile && chgrp claire testfile"}, "description": "Amy, Becky, and Claire are members of a group called \"writers\". Give the group members read and write permissions to the file testfile. Others should have no access.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(getfacl /home/shared/testfile | grep -q 'group:writers:rwx,' && getfacl /home/shared/testfile | grep -q 'other::---') || (getfacl /home/shared/testfile | grep -q 'group:writers:rwx,' && getfacl /home/shared/testfile | grep -q 'other::---') || (getfacl /home/shared/testfile | grep -q 'group:writers:rwx,' && getfacl /home/shared/testfile | grep -q 'other::r--') || (getfacl /home/shared/testfile | grep -q 'group:writers:rwx,' && getfacl /home/shared/testfile | grep -q 'other::rw-') || exit 1"}, "example": {"type": "command", "data": "chmod g+rw /home/shared/testfile && setfacl -m g:writers:--- /home/shared/testfile && setfacl -m g:writers:rw- /home/shared/testfile"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir testdir && cd testdir && touch testfile && chmod 000 testfile"}, "description": "Give read-write-access to the file testfile for the owner and group, but deny access to everyone else.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "test -r testdir/testfile && test -w testdir/testfile && ! test -x testdir/testfile"}, "example": {"type": "command", "data": "chmod 660 testdir/testfile"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alex -m alex && cd /home/alex && touch topsecret && chmod 400 topsecret && su - alex"}, "description": "As the root user, modify the permissions of the file /home/alex/topsecret so that the user mike can read it but not modify it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo ls -l /home/alex/topsecret | awk '{if($1~/^-.r--------/) {exit 0} else {exit 1}}'"}, "example": {"type": "command", "data": "sudo chmod u+r,g+r,o-rwx /home/alex/topsecret && sudo chown alex:alex /home/alex/topsecret && sudo usermod -a -G alex mike"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/james -m james && useradd -s /bin/bash -d /home/peter -m peter && useradd -s /bin/bash -d /home/harry -m harry && usermod -a -G root james && usermod -a -G peter harry && cd /home && mkdir data && cd data && touch hello.txt && chmod 600 hello.txt && chown james hello.txt && chgrp root hello.txt"}, "description": "Make the 'data' folder only accessible to peter and harry (group permission).", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - peter -c 'ls /home/data' && su - harry -c 'ls /home/data' && su - james -c 'ls /home/data') | if [ \"$(cat -)\" = \"ls: cannot open directory '/home/data': Permission denied\nhello.txt\nls: cannot open directory '/home/data': Permission denied\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 770 /home/data && chown james:root /home/data"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jenny -m jenny && cd /home/jenny && mkdir documents && touch documents/file1 && touch documents/file2 && echo 'topsecret' > documents/file1 && echo 'notsosafe' > documents/file2"}, "description": "Set the permissions of /home/jenny/documents/file1 so that only the owner can read and write, others have no permissions. Set the permissions of /home/jenny/documents/file2 so that the owner, group, and others can only read but not write or execute.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/jenny/documents/file1 | awk '{print $1}') | grep '^-rw-------' && (ls -l /home/jenny/documents/file2 | awk '{print $1}') | grep '^-r--r--r--'"}, "example": {"type": "command", "data": "chmod 600 /home/jenny/documents/file1 && chmod 444 /home/jenny/documents/file2"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/daniel -m daniel"}, "description": "Give daniel read, write and execute permissions for 'file1' but explicitly deny execution permission for 'file2'. Ensure that no other user can access these files", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l / | grep file1 | awk '{ if ($1 ~ /^-rw--w----/) { x+=1; } } END { exit (x==1)?0:1 }') && (ls -l / | grep file2 | awk '{ if ($1 ~ /^-rw-------/) { x+=1; } } END { exit (x==1)?0:1 }')"}, "example": {"type": "command", "data": "touch /file1 && chmod 731 /file1 && touch /file2 && chmod 600 /file2 && chmod a-rwx /file2"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && echo 'hello world!' > /var/hello && chmod 777 /var/hello"}, "description": "Allow user 'lisa' to read the file at /var/hello, but not modify or delete it. Other users should not be able to read, modify, or delete the file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(stat -c '%U:%G %a' /var/hello | grep -q ^lisa:.*444 || stat -c '%U:%G %a' /var/hello | grep -q ^lisa:.*644) && (stat -c '%U:%G %a' /var | grep -q ^root:root.*/ && ! ls -l /var/hello | grep -q -- -rw-------)"}, "example": {"type": "command", "data": "chmod 444 /var/hello && chown lisa:lisa /var/hello && chmod o-rwx /var"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m -s /bin/bash bob && useradd -m -s /bin/bash alice && useradd -m -s /bin/bash charlie && echo 'password123' | passwd --stdin bob && echo 'password123' | passwd --stdin alice && echo 'password123' | passwd --stdin charlie && mkdir /data && chown root:root /data && chmod 770 /data"}, "description": "There is a directory called /data that contains sensitive files that should only be accessible to users who are members of the group \"dataaccess\". Create the group and add the users bob and alice to it. Then, grant the group \"dataaccess\" read and write permissions on the directory, and ensure other users cannot access the directory or its contents.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "[[ $(ls -ld /data) == \"drwxrwx--- 2 root dataaccess\"* ]] && [[ $(getent group dataaccess) =~ [[:space:]]bob[[:space:]] && $(getent group dataaccess) =~ [[:space:]]alice[[:space:]] ]]"}, "example": {"type": "command", "data": "groupadd dataaccess && usermod -a -G dataaccess bob && usermod -a -G dataaccess alice && chmod g+rw /data && chmod o-rwx /data"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && echo 'password' | passwd bob --stdin && touch /home/bob/topsecret && chown bob:bob /home/bob/topsecret"}, "description": "Ensure that bob can read the file 'topsecret', but no other users can", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/bob/topsecret && sudo cat /home/topsecret) | if [ \"$(cat -)\" = \"password$'\\n'$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o-r /home/bob/topsecret"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && mkdir /home/jane/documents && touch /home/jane/documents/doc1 && chmod o-rwx /home/jane/documents/doc1"}, "description": "jane needs to give read and write access to the group 'teammates' on the 'documents' directory and its contents. teammates group already exists and jane should not lose her own access to the same", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -la /home/jane/documents | awk '{if ($4!~/teammates/ || $1!~/^drwxrwx---/) { exit 1; } else { exit 0; } }'"}, "example": {"type": "command", "data": "chgrp teammates /home/jane/documents && chmod 2770 /home/jane/documents && setfacl -m g:teammates:rwX /home/jane/documents"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /data && useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && useradd -s /bin/bash -d /home/user3 -m user3"}, "description": "Create a group named \"dataaccess\" and add user1 and user2 to this group. With the appropriate permissions, allow the members of this group to read and modify files created by any member of the group in the /data directory, but prohibit all other users from accessing these files.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l / | grep data | awk '{if ($1~/^d.rws.---$/) { exit 0; } else { exit 1; } }') && (getent group | grep dataaccess | awk '{ if ($4 == \"user1,user2\") { exit 0; } else { exit 1; } }') && (ls -ld /data | awk '{if ($3==\"root\" && $4==\"dataaccess\") { exit 0; } else { exit 1; } }') && (touch /data/test && chgrp dataaccess /data/test && chmod 770 /data/test && su - user1 -c 'echo \"hello\" > /data/test' && cat /data/test | grep \"hello\" && su - user3 -c 'cat /data/test' | grep -v \"hello\") | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd dataaccess && usermod -a -G dataaccess user1 && usermod -a -G dataaccess user2 && chmod 770 /data && chgrp dataaccess /data"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/carol -m carol && echo 'secret data' > /home/shared && chmod 660 /home/shared && chown bob /home/shared"}, "description": "Alice, Bob and Carol are members of the group 'sharedone'. Bob owns the shared file, but Carol should be able to read it too. But Alice, who isn't a member of 'sharedone', shouldn't have read permission. Set the permissions and group ownerships appropriately.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l bob -c 'cat /home/shared' && runuser -l carol -c 'cat /home/shared' && runuser -l alice -c 'cat /home/shared') | if [ \"$(cat -)\" = \"secret data\"$'\\n'\"secret data\"$'\\n'$'cat: /home/shared: Permission denied' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd sharedone && usermod -a -G sharedone bob && usermod -a -G sharedone carol && chmod g+rx /home && chmod 640 /home/shared && chown bob:sharedone /home/shared"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m alice && useradd -m bob && useradd -m charlie && echo 'sample content' > /home/alice/sample.txt && chown alice /home/alice/sample.txt && chmod 660 /home/alice/sample.txt"}, "description": "Bob and Charlie both need read access to alice's sample.txt file. Give both of them the necessary permissions without compromising the security of the file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u bob cat /home/alice/sample.txt && sudo -u charlie cat /home/alice/sample.txt) | if [ \"$(cat -)\" = \"sample content\"$'\\n'\"sample content\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo usermod -a -G alice bob && sudo usermod -a -G alice charlie && chmod g+r /home/alice/sample.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/tom -m tom && useradd -s /bin/bash -d /home/jen -m jen && usermod -aG sudo jack && usermod -aG sudo bob && usermod -aG sudo tom && usermod -aG sudo jen && echo 'umask 017' >> /etc/bash.bashrc"}, "description": "Set jack, bob, and tom as sudoers, and jen as a normal user. Then add a file called secret.txt in /home/jack. Only jack should be able to read,write, and execute it; bob should be able to read and execute it; tom should not have any permissions on it; and jen should not even be able to see it. In addition, ensure that any new files created in /home/jack by jack inherit these same permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jack stat /home/jack/secret.txt | awk '{print $3}' | grep '[rwx]*--*') && (sudo -u bob stat /home/jack/secret.txt | awk '{print $3}' | grep '[r-]*x[---]*') && (sudo -u tom stat /home/jack/secret.txt | awk '{print $3}' | grep '--*--*--*') && (ls -A /home/jen | grep -q secret.txt || echo 'not found') && sudo -u jack touch /home/jack/newfile && sudo -u jack [ $(stat /home/jack/newfile | grep Uid | sed 's/Uid: ( *//;s/).*//') = $(id -u jack) ] && sudo -u bob touch /home/jack/newfile && sudo -u bob [ $(stat /home/jack/newfile | grep Uid | sed 's/Uid: ( *//;s/).*//') = $(id -u jack) ]"}, "example": {"type": "command", "data": "sudo -u jack touch /home/jack/secret.txt && sudo -u jack chmod 700 /home/jack/secret.txt && sudo -u bob chmod 500 /home/jack/secret.txt && sudo -u tom chmod 000 /home/jack/secret.txt && sudo -u jen chmod 000 /home/jack/secret.txt && sudo -u jack umask 017"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir work && cd work && touch file1 && touch file2 && echo 'This is file 1' > file1 && echo 'This is file 2' > file2"}, "description": "Only allow john and members of the group workgroup to read and write to files in /home/john/work", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -la /home/john/work/ | awk 'NR>2' | awk '{print $1\": \" $3, $4, $9;}' && sudo find /home/john/work/ -type d ! -perm 2770 -ls && sudo find /home/john/work/ -type f ! -perm 660 -ls) | if [ \"$(cat -)\" = \"drwxrws---: root workgroup /home/john/work/\"$'\\n'\"-rw-rw----: john workgroup /home/john/work/file1\"$'\\n'\"-rw-rw----: john workgroup /home/john/work/file2\"$'\\n''\"$(sudo find /home/john/work/ ! -type d ! -perm 660)\"]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 2770 /home/john/work && chgrp workgroup /home/john/work && chmod 660 /home/john/work/* && chmod 770 /home/john/work"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /data && useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2"}, "description": "Make /data directory readable and writable by user1 only but not user2.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l user1 -c 'cd /data && touch test_file' && runuser -l user2 -c 'cd /data && touch test_file') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chown user1 /data && chmod 700 /data"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && echo \"Ubuntu is cool!\" > /home/john/message.txt && touch /home/john/secret.txt && echo \"I love penguins!\" > /home/john/secret.txt && chmod 600 /home/john/secret.txt"}, "description": "Give user jane read access to /home/john/secret.txt without giving her access to its parent directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u jane cat /home/john/secret.txt | if [ \"$(cat -)\" = \"I love penguins!\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o-r /home/john && setfacl -m u:jane:r /home/john/secret.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/user && cd /home/user && touch file1 && touch file2 && touch file3 && chgrp user file1 && chown user file2 && chmod 750 file3"}, "description": "Set up a directory called /home/user with three files in it. File1 should be owned by the group called 'user', file2 should be owned by a user named 'user', and file3 should be non-executable and not writable by anyone who isn't the owner.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/user | awk '{if ($1~/^-.rwxr-x---/ && $4~/^user$/ && $5~/^user$/ && $6~/^0/ && $7~/^0/ && $8~/^0/ && $9~/^file1$/) { found1=1; } else if ($1~/^-.rw-------/ && $4~/^user$/ && $5~/^user$/ && $6~/^0/ && $7~/^0/ && $8~/^0/ && $9~/^file2$/) { found2=1; } else if ($1~/^-.rwxr-x---/ && $4~/^user$/ && $5!~/^user$/ && $8~/^file3$/) { found3=1; }} END {if (found1 && found2 && found3) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "chmod 750 /home/user/file3"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && cd /home/alice && touch file1 && touch file2 && chmod 600 file1 && chmod 664 file2 && chown alice:alice file1 && chown alice:alice file2"}, "description": "Alice has two files in her home directory, file1 and file2. She wants to give Bob read and write access to file1, but only read access to file2. Help her give Bob the correct permissions without changing any other permissions", "evaluation": {"type": "ground-truth", "answer": "To give Bob read and write access to file1: chmod 660 file1 && chown alice:bob file1. To give Bob read access to file2: chmod 444 file2", "checking": null, "example": {"type": "command", "data": "chmod 660 file1 && chown alice:bob file1 && chmod 444 file2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /data"}, "description": "Create a group called \"dataaccess\" and assign it to /data directory to ensure that only members of this group can access it. Also write a file named \"secret\" in it and remove read, write and execute permissions from users and groups.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l / | grep data | awk '{if ($1~/^d.....s.r-x/) { exit 0; } else { exit 1; } }' && ls -l /data/secret | awk '{if ($1~/^-.....---/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "groupadd dataaccess && chgrp dataaccess /data && chmod 770 /data && touch /data/secret && chmod 600 /data/secret"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/amy -m amy && useradd -s /bin/bash -d /home/bob -m bob && touch sharedfile && chown amy:amy sharedfile"}, "description": "Give amy and bob both read and write permission to sharedfile without letting others access it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l sharedfile | awk '{if ($1 !~ /^-..rw-------./) { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "chmod 600 sharedfile && chgrp amy sharedfile && chmod g+rw sharedfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "cd ~ && touch file && chmod 444 file"}, "description": "Change the permission of the file to allow you to edit it, without giving execute permission", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "echo 'hello world' > file && cat file | if [ \"$(cat -)\" = \"hello world\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod u+w file && chmod u-x file"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir secret && echo 'I have a secret' > secret/secret.txt && touch secret/readme.txt && chmod 770 secret && chown -R jane: staff secret"}, "description": "jane wants to share the content of the 'secret' folder with another user named 'mark' without allowing mark to modify or delete any files or folders in the 'secret' folder. How can jane do that?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -ld /home/jane/secret && ls -l /home/jane/secret | awk '{if ($1~/^drwxrwx---/) { exit 0; } else { exit 1; } }' && ls -l /home/jane/secret | grep secret.txt | awk '{if ($1~/^-rwxr-xr-x/) { exit 0; } else { exit 1; } }' && ls -l /home/jane/secret | grep readme.txt | awk '{if ($1~/^-rw-r--r--/) { exit 0; } else { exit 1; } }' && sudo -u mark cat /home/jane/secret/secret.txt | if [ \"$(cat -)\" = \"I have a secret\" ]; then exit 0; else exit 1; fi && sudo -u mark touch /home/jane/secret/new_file && sudo -u mark rm -rf /home/jane/secret | if [ $? -gt 0 ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "adduser mark && usermod -aG staff mark && chmod o-rwx /home/jane/secret && chmod o-rwx /home/jane/secret/secret.txt"}}, "labels": ["permission", "user", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/peter -m peter && touch /home/mark/file.txt && chown mark:mark /home/mark/file.txt && chmod 640 /home/mark/file.txt"}, "description": "give john and peter read/write permission to file.txt without changing the ownership", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - john -c 'echo test >> /home/mark/file.txt' && su - peter -c 'echo test >> /home/mark/file.txt' && su - john -c 'cat /home/mark/file.txt' && su - peter -c 'cat /home/mark/file.txt'"}, "example": {"type": "command", "data": "chmod o+rw /home/mark/file.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "apt update && apt install sudo -y && useradd -s /bin/bash -d /home/cynthia -m cynthia && useradd -s /bin/bash -d /home/alex -m alex && touch /home/cynthia/testfile && touch /home/alex/testfile && chmod 600 /home/cynthia/testfile && chmod 660 /home/alex/testfile"}, "description": "Both Cynthia and Alex need read access to their respective testfile. However, Alex should also have write access to Cynthia's testfile. Modify permissions accordingly.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u cynthia cat /home/cynthia/testfile && sudo -u alex cat /home/alex/testfile ) | if [ \"$(cat -)\" = \"testtest\" ]; then exit 0; else exit 1; fi && sudo -u alex sh -c 'echo \"testalex\" > /home/cynthia/testfile' && sudo -u cynthia cat /home/cynthia/testfile | if [ \"$(cat -)\" = \"testalex\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+w /home/cynthia/testfile && chmod o+w /home"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && cd /home/jack && echo 'This is a test file.' > test && chmod 777 test &&su - jack"}, "description": "Change the owner of ~/test to user 'bill'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home | grep test | awk '{if ($3 == \"bill\") { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chown bill /home/jack/test"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'hello world' > myfile && chmod 755 myfile &&su - john"}, "description": "execute ~/myfile and get the output", "evaluation": {"type": "ground-truth", "answer": "hello world", "checking": null, "example": {"type": "command", "data": "~/myfile"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/kate -m kate && echo 'kate:password' | chpasswd && chage -d 0 kate && touch /home/kate/secretfile && chmod 400 /home/kate/secretfile"}, "description": "Create a new user named kate, set her password to 'password' and force her to change it upon first login. Create a file called secretfile in her home directory and make it read-only, so that only kate can read it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su kate -c 'cat /home/kate/secretfile') | if [ \"$(cat -)\" = \"You found the secret!\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 700 /home/kate && chmod 400 /home/kate/secretfile && chown kate /home/kate/secretfile && echo 'You found the secret!' > /home/kate/secretfile"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/amy -m amy && useradd -s /bin/bash -d /home/bob -m bob && echo 'amy ALL=(bob) /usr/bin/whoami' >> /etc/sudoers && su - amy"}, "description": "As user amy, run `/usr/bin/whoami` as user bob without using Bob's password.", "evaluation": {"type": "ground-truth", "answer": "bob", "checking": null, "example": {"type": "command", "data": "sudo -u bob /usr/bin/whoami"}}, "labels": ["sudo", "permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m user1 && useradd -m user2 && echo '123' > /tmp/file.txt && chown user2:user2 /tmp/file.txt && chmod 600 /tmp/file.txt"}, "description": "User1 needs to read the contents of /tmp/file.txt, but cannot modify or delete it. User2 should have full ownership and access rights to this file. How can you accomplish this task?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l user1 -c 'cat /tmp/file.txt' && runuser -l user2 -c 'cat /tmp/file.txt'"}, "example": {"type": "command", "data": "chmod o-rwx /tmp/file.txt && chown user2:user2 /tmp/file.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jenny -m jenny && cd /home/jenny && echo 'This is a secret message!' > secret.txt && touch public.txt && chmod 644 public.txt && chmod 600 secret.txt && chown jenny:jenny secret.txt && su - jenny"}, "description": "As the user 'jenny', create a new file called 'my_public.txt' in the current working directory. Set the appropriate permissions so that this file is readable and writable by everyone, but only jenny can delete the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l | grep my_public.txt | awk '{if ($1~/^-.rw-r--r--$/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "touch my_public.txt && chmod 666 my_public.txt && chmod +t my_public.txt && chmod +t . && chmod -t ."}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && echo 'topSecret' > secret && chmod 400 secret"}, "description": "Grant read permission of the secret file to the group admins and enable setgid to ensure they can modify the file and new ones created within the same directory without issues", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/bob/secret | awk '{print $1}'| grep '^..r....... $') && (ls -ld /home/bob | awk '{print $1}' | grep '^drwxrwsr-x $') && (cd /home/bob && echo 'short lived secret' > shortsecret && cat shortsecret | grep 'short lived secret')  && (cd /home/bob && touch newsecret && ls -l | grep newsecret)"}, "example": {"type": "command", "data": "chmod g+rw /home/bob/secret && chmod g+s /home/bob"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jason -m jason && cd /home/jason && mkdir projects && cd projects && mkdir public && mkdir private && echo 'public content' > public/file.txt && echo 'private content' > private/file.txt && chmod -R 755 public && chmod -R 700 private && chown -R jason:jason /home/jason"}, "description": "Allow user 'jason' to read the file at /home/jason/projects/public/file.txt but not the file at /home/jason/projects/private/file.txt", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jason cat /home/jason/projects/public/file.txt && sudo -u jason cat /home/jason/projects/private/file.txt) | if [ \"$(cat -)\" = \"public content$'\\n'cat: /home/jason/projects/private/file.txt: Permission denied\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o-rwx /home/jason/projects/private/file.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/paul -m paul && useradd -s /bin/bash -d /home/george -m george && useradd -s /bin/bash -d /home/ringo -m ringo && mkdir /home/beatles && chgrp beatles /home/beatles && chmod g+ws /home/beatles && chown john /home/beatles"}, "description": "Set up a directory /home/beatles that only members of the \"beatles\" group can access, and make sure that any new files or directories created in that directory automatically inherit the group ownership. Additionally, make sure that the directory itself is owned by the user \"john\".", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -ld /home/beatles && getfacl /home/beatles | grep -q 'default:group::rwx'"}, "example": {"type": "command", "data": "groupadd beatles && usermod -a -G beatles john && usermod -a -G beatles paul && usermod -a -G beatles george && usermod -a -G beatles ringo && chmod g+s /home/beatles && chmod 770 /home/beatles"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && mkdir /data && touch /data/file1 && touch /data/file2 && echo 'This is file1' > /data/file1 && echo 'This is file2' > /data/file2"}, "description": "Give read and write permission to john on /data/file1 but keep /data/file2 inaccessible to john", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "{ sudo -u john cat /data/file1 && sudo -u john cat /data/file2 ;} 2>&1 | if grep -q 'Permission denied' ; then exit 0; else exit 1; fi;"}, "example": {"type": "command", "data": "chmod 600 /data/file1 && chown john /data/file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -d /home/john -m john && echo 'i am the walrus' > /home/john/walrus && chmod 600 /home/john/walrus && chown john:john /home/john/walrus && su - john"}, "description": "What is the content of /home/john/walrus?", "evaluation": {"type": "ground-truth", "answer": "i am the walrus", "checking": null, "example": {"type": "command", "data": "cat /home/john/walrus"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/foo -m foo && cd /home/foo && touch file.txt && chmod u=rw file.txt && chown foo file.txt"}, "description": "Change the owner of file.txt to root without changing the file permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/foo/file.txt | awk '{if ($3 == \"root\" && $4 == \"foo\") exit 1; else exit 0;}'"}, "example": {"type": "command", "data": "chown root:foo /home/foo/file.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/jane -m jane && mkdir /home/lisa/secret && echo 'top secret' > /home/lisa/secret/file && chown lisa /home/lisa/secret/file && chgrp john /home/lisa/secret/file"}, "description": "How can Bob read the contents of /home/lisa/secret/file? Bob is not a member of any group that has access to the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l bob -c 'cat /home/lisa/secret/file' | if [ \"$(cat -)\" = \"top secret\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+r /home/lisa/secret/file"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/student -m student && mkdir /var/protectdir && chown root /var/protectdir && chmod 730 /var/protectdir && touch /var/protectdir/importantfile && chmod 710 /var/protectdir/importantfile && chown student /var/protectdir/importantfile && echo 'Access denied' > /var/protectdir/errorfile && chown student /var/protectdir/errorfile && chmod 740 /var/protectdir/errorfile && su - student"}, "description": "As a student, try accessing the /var/protectdir directory and its files. You should see a 'Permission denied' error message. Figure out a way to access the contents of the /var/protectdir directory and its files, then modify the contents of the 'importantfile' to include the phrase 'Gotcha!'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo ls -l /var/protectdir/ | awk '{if ($1 ~ /d....---w./) {print $9} }' | ( grep -q 'Access denied' || cat ) | grep 'Gotcha!'"}, "example": {"type": "command", "data": "chmod o+x /var/protectdir && chmod o+r /var/protectdir/importantfile && echo 'Gotcha!' >> /var/protectdir/importantfile"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "sudo useradd -s /bin/bash -d /home/jane -m jane && sudo mkdir /home/jane/secret_folder && sudo chmod 770 /home/jane/secret_folder && sudo chown jane:root /home/jane/secret_folder && su - jane"}, "description": "Create a folder /home/jane/secret_folder that is only accessible to jane and the root group. Give jane full permission and the root group read and execute permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jane touch /home/jane/secret_folder/jane_secret.txt && find /home/jane/secret_folder -perm /o+rwx && ! find /home/jane/secret_folder -perm /g+w | if [ \"$(cat -)\" = \"/home/jane/secret_folder/jane_secret.txt\\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo chmod 770 /home/jane/secret_folder && sudo chown jane:root /home/jane/secret_folder && sudo setfacl -m g:root:rx /home/jane/secret_folder"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && useradd -s /bin/bash -d /home/leo -m leo && useradd -s /bin/bash -d /home/michael -m michael && chgrp michael /home/emma && chgrp michael /home/leo && chmod g+s /home/michael"}, "description": "You have three users (emma, leo, michael) and a directory (/home/michael) that only michael should manage. Set up the correct permissions so that only michael has read, write, and execute permissions for the directory. Also, ensure that new files and directories created in the directory inherit the group ownership.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l / | grep michael | awk '{if ($1~/^d....rws--t/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 770 /home/michael && chgrp michael /home/michael && chmod g+s /home/michael"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /var/www && touch /var/www/index.php && echo '<?php echo \"Hello World!\";' > /var/www/index.php && chown -R root:www-data /var/www && chmod -R 750 /var/www && chmod 640 /var/www/index.php && useradd -s /bin/bash -d /var/www/html/ -m dan && usermod -aG www-data dan && su - dan"}, "description": "Create a user named 'dan' and give them access to the Apache root directory (/var/www/html/) without compromising security. The user should not be able to modify any files or directories under /var/www except for the ones created in their home directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /var/www/* ! -path /var/www -type d -not -group www-data -ls && find /var/www/* ! -path /var/www -type f -not -group www-data -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo chown -R root:www-data /var/www && sudo chmod -R 750 /var/www && sudo chmod 640 /var/www/index.php && useradd -s /bin/bash -d /var/www/html/ -m dan && usermod -aG www-data dan"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user1 -m user1 && useradd -s /bin/bash -d /home/user2 -m user2 && mkdir /home/shared && touch /home/shared/document.txt && chown root:root /home/shared/document.txt && chmod 664 /home/shared/document.txt"}, "description": "Set up a shared directory /home/shared that can be read by user1 and user2 but cannot be modified or deleted by them.", "evaluation": {"type": "ground-truth", "answer": "", "checking": "Check that both users can read the content of the /home/shared/document.txt file using the `cat` command, but they cannot modify it or delete it using `touch` or `rm` commands.", "example": {"type": "command", "data": "setfacl -m u:user1:r,u:user2:r /home/shared/document.txt && setfacl -d -m u:user1:r,u:user2:r /home/shared/document.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && cd /home/emma && touch file1 && touch file2 && chmod 700 file1 && chmod 600 file2 && chown emma:emma file1 && chown emma:emma file2"}, "description": "Change the owner and group of file1 to root only temporarily (10 seconds)", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l file1 | awk '{if ($3==\"root\" && $4==\"root\") { exit 0; } else { exit 1; }}' && sleep 10 && ls -l file1 | awk '{if ($3==\"emma\" && $4==\"emma\") { exit 0; } else { exit 1; }}') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "(chown root:root file1 && sleep 10 && chown emma:emma file1)"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir project && cd project && mkdir public private && touch public/doc.txt private/database.sql && chmod 755 public && chmod 700 private && chmod 644 public/doc.txt && chmod 600 private/database.sql && chown john:john -R ."}, "description": "You need to allow the group \"developers\" to read the file /home/john/project/public/doc.txt and execute files in /home/john/project/public, without letting them access /home/john/project/private or its content", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/john/project/public/doc.txt && printf '1' > /home/john/project/public/temp && find /home/john/project/private -type f ! -perm 600 | grep /) | if [ \"$(cat -)\" = \"Hello World!1\" ] ; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "groupadd developers && usermod -a -G developers john && chmod -R g+rx /home/john/project/public && chmod g+r /home/john/project/public/doc.txt && chmod o-r /home/john/project/private && chmod o-rwx /home/john/project/private/*"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && cd /home/jack && echo 'hello world' > test.txt"}, "description": "Grant read-only permission of test.txt to all users.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su -l mike -c 'cat /home/jack/test.txt' | grep -q 'hello world' && su -l tom -c 'cat /home/jack/test.txt' | grep -q 'hello world' && echo 'success'"}, "example": {"type": "command", "data": "chmod a+r /home/jack/test.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir docs && cd docs && touch doc1 && touch doc2 && chmod 600 doc1 && chmod 644 doc2"}, "description": "Set the permission of doc1 to -rw-r--r--, and the permission of doc2 to -rw-------", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/jane/docs/ | grep doc1 | awk '{if ($1~/^-rw-r--r--/) { exit 0; } else { exit 1 }}' && ls -l /home/jane/docs/ | grep doc2 | awk '{if ($1~/^-rw-------/) { exit 0; } else { exit 1 }}'"}, "example": {"type": "command", "data": "chmod 644 /home/jane/docs/doc1 && chmod 600 /home/jane/docs/doc2"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/shared && chmod -R 777 /home/shared && mkdir /home/bob && mkdir /home/john && mkdir /home/alice && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/alice -m alice"}, "description": "Bob, John, and Alice need access to the shared directory /home/shared. The directory should be readable and writable by all users, however, Bob must be able to create new files/directories, John must be able to modify existing files/directories, and Alice must only be able to read files/directories. Set the appropriate permissions to achieve these goals", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l bob -c 'touch /home/shared/bob_test' && ls -l /home/shared | grep bob_test | awk '{if($1~/^-..rw.rw.-/) { exit 0; } else { exit 1; }}') && (runuser -l john -c 'echo 'hello' > /home/shared/test.txt' && runuser -l john -c 'echo 'world' >> /home/shared/test.txt' && ls -l /home/shared | grep test.txt | awk '{if($1~/^-..rw..rw./) { exit 0; } else { exit 1; }}') && (runuser -l alice -c 'cat /home/shared/test.txt' && echo 'hello world' > /home/shared/alice_test && runuser -l alice -c 'touch /home/shared/new_file' && ls -l /home/shared | grep alice_test | awk '{if($1~/^-..r...r..$/) { exit 0; } else { exit 1; }}') && (ls -l /home/shared | grep new_file | awk '{if($1~/^-..r...r..$/) { exit 0; } else { exit 1; }}') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod -R 777 /home/shared && setfacl -d -m u:bob:rwx,g::rwx,o::rwx /home/shared && setfacl -m u:john:rwX,g::rwX,o::rwX /home/shared && setfacl -m u:alice:rX,g::rX,o::rX /home/shared"}}, "labels": ["permission", "ACL"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/peter -m peter && useradd -s /bin/bash -d /home/paul -m paul && chmod 755 /home/john && chmod 550 /home/peter && chmod 750 /home/paul"}, "description": "Give read, write, and execute permission to john and peter for paul's home directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(runuser -l john -c 'test -r /home/paul' && runuser -l john -c 'test -w /home/paul' && runuser -l john -c 'test -x /home/paul' && runuser -l peter -c 'test -r /home/paul' && runuser -l peter -c 'test -w /home/paul' && runuser -l peter -c 'test -x /home/paul') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 755 /home/paul"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "apt update && apt install sudo -y && useradd -s /bin/bash -d /home/tom -m tom && echo '' > /etc/sudoers"}, "description": "Add tom to sudoers and grant him only the right to execute command 'ifconfig'", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "runuser -l tom -c 'sudo ifconfig' | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi && runuser -l tom -c 'sudo cat /etc/sudoers' | if [ \"$(cat -)\" = \"tom ALL=(ALL) NOPASSWD:/sbin/ifconfig\"$'\\n'\"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'tom ALL=(ALL) NOPASSWD:/sbin/ifconfig' >> /etc/sudoers"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "apt update && apt install sudo -y && useradd -s /bin/bash -d /home/lily -m lily && echo 'lily ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers"}, "description": "Allow user lily to execute only a specific command (say, apt-get) as superuser using sudo without password prompt.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -iu lily bash -c 'sudo apt-get update && echo success' | if [ \"$(cat -)\" = \"success\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'lily ALL=(ALL) NOPASSWD:/usr/bin/apt-get' >> /etc/sudoers"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": ""}, "description": "What is the numeric value of 'rwxr-xr--' linux permissions? ", "evaluation": {"type": "ground-truth", "answer": "754", "checking": null, "example": {"type": "command", "data": ""}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/luke -m luke && cd /home/luke && mkdir music && chmod 770 music && touch music/song1 music/song2 && chmod 660 music/*"}, "description": "Allow user 'dave' to have read access to the music folder and its contents, but prevent him from writing to any file in the music folder.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - dave -c 'cat /home/luke/music/song1' && su - dave -c 'cat /home/luke/music/song2' && su - dave -c 'echo \"test\" >> /home/luke/music/song1' 2>/dev/null) | if [ \"$(cat -)\" = \"song1contents$'\\n'song2contents$'\\n'$'\\n'\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -aG luke dave && chmod 750 /home/luke/music && chmod 640 /home/luke/music/*"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sam -m sam && cd /home/sam && mkdir photos && cd photos && touch pic1 && touch pic2 && chown sam:p4photos pic1 && chown sam:p4photos pic2 && chmod 600 pic1 && chmod 604 pic2 && chmod 700 .. && useradd -s /bin/bash -d /home/jim -m jim && mkdir /home/shared && chmod 777 /home/shared && echo 'jim ALL=(ALL) NOPASSWD: /bin/cp' >> /etc/sudoers && echo 'sam ALL=(ALL) NOPASSWD: /usr/bin/find' >> /etc/sudoers && cd /home/jim && su - jim"}, "description": "sam and jim are working on a project together, they need to share some photos in /home/shared. sam is the owner of /home/sam/photos folder and its contents, jim is not in the group of sam, but sam trusts jim. give jim read and write access to /home/shared, so jim can copy photos from /home/sam/photos to /home/shared without sam's intervention.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/shared/pic1 && cat /home/shared/pic2) | if [ \"$(cat -)\" = \"\" ]; then exit 1; else exit 0; fi && ls -l / | grep shared | awk '{if ($1 != \"drwxrwxrwx\") { exit 1; } else { exit 0; } }'"}, "example": {"type": "command", "data": "chmod o+rwx /home/shared && usermod -a -G p4photos jim"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/smith -m smith && useradd -s /bin/bash -d /home/richard -m richard && useradd -s /bin/bash -d /home/henry -m henry && groupadd dataaccess && usermod -a -G dataaccess john && usermod -a -G dataaccess smith && usermod -a -G dataaccess richard && mkdir /data && touch /data/file1 && touch /data/file2 && touch /data/file3 && chgrp dataaccess /data/file* && chmod 440 /data/file*"}, "description": "Set permissions for the directory /data in such a way that all members of the group \"dataaccess\" can read but not modify files and directories in the /data folder, while ensuring that other users can only read and execute files and directories in the /data folder and its subdirectories", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l / | grep data | awk '{if ($1~/^d.....r-x/) { exit 0; } else { exit 1; } }' && (ls -l /data | grep '^-r--r-----') | if [ \"$(cat -)\" = \"-r--r----- 1 root dataaccess\"$'\\n'\"-r--r----- 1 root dataaccess\"$'\\n'\"-r--r----- 1 root dataaccess\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 755 /data && find /data -type d -exec chmod 755 {} + && find /data -type f -exec chmod 644 {} + && chown root:dataaccess /data/file*"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/johnny -m johnny && cd /home/johnny && touch world.txt && chmod 600 world.txt && echo 'Hello World!' > world.txt && chown johnny world.txt &&su - johnny"}, "description": "Print the content of ~/world.txt", "evaluation": {"type": "ground-truth", "answer": "Hello World!", "checking": null, "example": {"type": "command", "data": "cat /home/johnny/world.txt"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && cd /home/jack && echo 'hello_world' > test && chmod 222 test && chown jack test &&su - jack"}, "description": "execute ~/test and and try to modify the file. What happens and why?", "evaluation": {"type": "text", "answer": "The command for executing the file works fine, but when we try to modify the file, it throws a permission denied error. That is because we have set the file permissions as 222 (write permission denied) which does not allow us to modify the file.", "checking": null, "example": null}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /data && useradd -s /bin/bash -d /home/sam -m sam && useradd -s /bin/bash -d /home/john -m john && groupadd dataaccess && usermod -a -G dataaccess sam && usermod -a -G dataaccess john && chgrp dataaccess /data && chmod g+s /data"}, "description": "Create a file called 'secret.txt' inside /data that can read by members of the group 'dataaccess', but only writable and  executable by the owner, and only readable by other users that are not members of the 'dataaccess' group", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u sam touch /data/secret.txt && sudo -u sam chmod 710 /data/secret.txt && sudo -u sam chown sam /data/secret.txt && sudo chmod 751 /data/secret.txt && (sudo -u john cat /data/secret.txt >/dev/null 2>&1 && echo 1 || echo 0 )) | if [ \"$(cat -)\" = \"1\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo -u sam touch /data/secret.txt && sudo -u sam chmod 710 /data/secret.txt && sudo -u sam chown sam /data/secret.txt && sudo chmod 751 /data/secret.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && touch /home/lisa/myfile && chmod 400 /home/lisa/myfile && su - lisa"}, "description": "As user \"lisa\", edit a new line with the text \"Hello World!\" at the end of the file \"myfile\" in the home directory of user \"lisa\"", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cd ~ && cat myfile | tail -n 1 | grep 'Hello World!' && cat myfile | wc -l | awk '{if ($1 == 2) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "echo 'Hello World!' >> /home/lisa/myfile"}}, "labels": ["permission", "file-editing"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && echo 'mark:password' | chpasswd && chmod 400 /etc/shadow"}, "description": "Explain why the command 'su - mark' does not work, and provide the necessary steps to fix it so that it does work", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - mark && whoami | if [ \"$(cat -)\" = \"mark\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 755 /home/mark"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && mkdir /data && cd /data && touch file1 && touch file2 && touch file3 && chown jane:jane file1 && chmod 400 file1 && chown root:root file2 && chmod 644 file2 && chown jane:root file3 && chmod 660 file3"}, "description": "For files owned by jane, only jane can read them; for files owned by root, only root can modify them; for files owned by jane but with root group, only jane can modify them. List all files in /data with permissions.", "evaluation": {"type": "formative", "answer": "/data/file1: -r-------- jane jane\n/data/file2: -rw-r--r-- root root\n/data/file3: -rw-rw---- jane root\n", "checking": null, "example": {"type": "command", "data": "ls -l /data"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && useradd -s /bin/bash -d /home/bill -m bill && useradd -s /bin/bash -d /home/tom -m tom && useradd -s /bin/bash -d /home/george -m george && echo 'secret' > /home/jack/secret_file && echo 'top_secret' > /home/bill/top_secret_file && echo 'super_secret' > /home/tom/super_secret_file && echo 'super_top_secret' > /home/george/super_top_secret_file"}, "description": "Grant `jack` and `bill` read permission to their home directories, but don't let `tom` and `george` access their directories at all.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - jack -c 'cat ~/secret_file' && su - bill -c 'cat ~/top_secret_file' && (su - tom -c 'ls ~/super_secret_file' && exit 1 || exit 0) && (su - george -c 'ls ~/super_top_secret_file' && exit 1 || exit 0)) | if [ \"$(cat -)\" = \"secret\"$'\\n'\"top_secret\"$'\\n'\"\"$'\\n'\"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 700 /home/tom && chmod 700 /home/george && chmod 755 /home/jack && chmod 755 /home/bill"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir docs && cd docs && touch doc1 && touch doc2 && chmod 070 docs && chmod 040 doc1 && chmod 020 doc2 && chown jane:users docs && chown jane:users doc1 && chown jane:users doc2 && su - jane"}, "description": "jane has a directory named docs in her home directory, where she stores confidential documents. Set the permissions in such a manner that only members of the users group can access content in this directory, only the the user jane can delete files from this directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u jane cat /home/jane/docs/doc1 && sudo -u jane cat /home/jane/docs/doc2 && sudo -u joe cat /home/jane/docs/doc1 && sudo -u joe cat /home/jane/docs/doc2 && sudo -u jane touch /home/jane/docs/newDoc1 && sudo -u joe rm /home/jane/docs/doc1 && sudo -u joe rm /home/jane/docs/newDoc1 && ls /home/jane/docs | grep doc1 && ! ls /home/jane/docs | grep newDoc1"}, "example": {"type": "command", "data": "chmod 750 /home/jane/docs && chmod 740 /home/jane/docs/doc1 /home/jane/docs/doc2"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lucas -m lucas && useradd -s /bin/bash -d /home/anna -m anna && echo 'lucas ALL=(ALL) NOPASSWD: /bin/cat' >> /etc/sudoers && su - lucas"}, "description": "Allow lucas to use sudo to only see the contents of anna's files but not execute them.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo cat /home/anna/testfile | if [ \"$(cat -)\" = \"Anna's private content\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 600 /home/anna/testfile && chown anna:anna /home/anna/testfile"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/linuxper && cd /home/linuxper && touch file1 file2 file3 file4 && chmod 664 file* && mkdir dir1 dir2 dir3 && chmod 775 dir*"}, "description": "Add write permission only for owner to file1 and file2", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "[ -w /home/linuxper/file1 ] && [ -w /home/linuxper/file2 ] && [ ! -w /home/linuxper/file3 ] && [ ! -w /home/linuxper/file4 ]"}, "example": {"type": "command", "data": "chmod u+w /home/linuxper/file1 && chmod u+w /home/linuxper/file2"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/julie -m julie && mkdir /var/filevault && chown julie /var/filevault && chmod 770 /var/filevault"}, "description": "Create a file called 'topsecret' inside /var/filevault and make it readable to julie only", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su - julie -c 'cat /var/filevault/topsecret' | if [ \"$(cat -)\" = \"I am not guilty\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "echo 'I am not guilty' > /var/filevault/topsecret && chown julie /var/filevault/topsecret && chmod 400 /var/filevault/topsecret"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/peter -m peter && cd /home/peter && touch file1 file2 && chmod 0644 file1 && chmod 0755 file2"}, "description": "Given the current directory /home/peter, change the group ownership of file1 and file2 to be 'staff'.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "cd /home/peter && ls -l file1 file2 | awk '{if ($4 != \"staff\") { exit 1; }}' && echo $(stat -c '%a' file1)$(stat -c '%a' file2) | if [ $(cat -) -eq 755644 ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chgrp staff file1 file2"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /data && chgrp dataaccess /data && chmod g+rwx /data && chmod g+s /data"}, "description": "Suppose you have a directory called /data that contains sensitive files that should only be accessible to members of the group \"dataaccess\". Ensure that new files and directories created in this directory inherit the group ownership, and that users can only delete files and directories that they own.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -ld /data | cut -d ' ' -f 1 | grep '^drwxrws---$'"}, "example": {"type": "command", "data": "chmod g+s /data"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/myuser -m myuser && mkdir /home/myuser/dir1 /home/myuser/dir2 && touch /home/myuser/file1 /home/myuser/file2 && chown myuser:myuser /home/myuser/* && chmod 700 /home/myuser/* && chmod 600 /home/myuser/*"}, "description": "Add a user 'myuser' with two directories dir1 and dir2 and two files file1 and file2 in the home directory. Set the owner of these directories and files to 'myuser' and give full access to 'myuser'.", "evaluation": {"type": "ground-truth", "answer": "", "checking": null, "example": {"type": "command", "data": "ls -la /home/myuser"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "apt-get update && apt-get install -y vsftpd && touch hello.txt && echo 'Hello, world!' > hello.txt"}, "description": "Make hello.txt accessible to user only, and deny access to everyone else, even the group", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u user cat hello.txt >> userout.txt && cat userout.txt) | if [ \"$(cat -)\" = \"Hello, world!\" ]; then exit 0; else exit 1; fi && (sudo -u group cat hello.txt && exit 1) || exit 0 && (sudo -u other cat hello.txt && exit 1) || exit 0"}, "example": {"type": "command", "data": "adduser user && addgroup group && chown user:user hello.txt && chmod 700 hello.txt"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && groupadd secret && usermod -a -G secret jane && cd /home/jane && mkdir secret_files && cd secret_files && touch file1 && touch file2 && echo 'Super secret info' > file1 && echo 'More secret info' > file2 && chmod 660 file1 && chmod 640 file2 && cd /home && useradd -s /bin/bash -d /home/mark -m mark"}, "description": "jane wants to share the files in /home/jane/secret_files/file1 with mark without him being able to modify or delete the file. How can she do it?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/jane/secret_files/file1 && echo -e '\\n') | if [ \"$(cat -)\" = \"Super secret info\"$'\\n' ]; then exit 0; else exit 1; fi && (sudo -u mark cat /home/jane/secret_files/file1 && echo -e '\\n') | if [ \"$(cat -)\" = \"Super secret info\"$'\\n' ]; then exit 0; else exit 1; fi && (sudo -u mark echo 'New secret info' > /home/jane/secret_files/file1 && echo 1) 2>&1 | grep -q 'Permission denied' && (sudo -u mark rm /home/jane/secret_files/file1 2>&1 | grep -q 'Permission denied') && (sudo -u mark touch /home/jane/secret_files/file3 2>&1 | grep -q 'Permission denied')"}, "example": {"type": "command", "data": "chmod 664 /home/jane/secret_files/file1 && chown jane:secret /home/jane/secret_files/file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/user1 && mkdir /home/user2 && chown user1:user1 /home/user1 && chown user2:user2 /home/user2 && chmod 700 /home/user1 && chmod 700 /home/user2"}, "description": "Create two users named user1 and user2 with separate home directories. Only the respective owners should be able to access their home directory, not even the root user.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo su - && cd /home/user1 && touch file1 && su - user2 -c 'touch /home/user2/file2' && if [ -f /home/user1/file1 ] && [ -f /home/user2/file2 ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": ""}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && touch file1 && chown mark file1 && chmod 751 file1 && touch file2 && chown root file2 && chmod 640 file2 && su - mark"}, "description": "As user 'mark', list the contents of file1 and file2, and explain why you can/cannot read them", "evaluation": {"type": "ground-truth", "answer": "Able to read the contents of file1, but not file2. This is because mark is the owner of file1 and has execute permission on it, while file2 is owned by root with no group or user permissions for reading", "checking": null, "example": {"type": "command", "data": "cat file1 && cat file2"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /project && cd /project && mkdir code && touch code/script.py && chmod 640 code/script.py"}, "description": "Give all users read access to /project/code directory but restrict their write access to script.py file. Give execute access to script.py file only to the owner of the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /project/code | awk '{if ($1~/^dr..r..r..$/) {exit 0;} else {exit 1;}}' && ls -l /project/code/script.py | awk '{if ($1~/^..rw.r..$/) {exit 0;} else {exit 1;}}' && [ -x /project/code/script.py ] && ([ $(stat -c %U /project/code/script.py) = $(whoami) ] || ! [ -x /project/code/script.py ])"}, "example": {"type": "command", "data": "chmod o+r /project/code && chmod o-w /project/code/script.py && chmod u+x /project/code/script.py"}}, "labels": ["permission", "file"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jack -m jack && cd /home/jack && echo 'qwerty' > test && chmod 311 test && chown jack test &&su - jack"}, "description": "What is the permission set on /home/jack/test after executing the initialization command?", "evaluation": {"type": "ground-truth", "answer": "-wx--x--x", "checking": null, "example": {"type": "command", "data": "ls -l /home/jack/test"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sarah -m sarah && useradd -s /bin/bash -d /home/max -m max && usermod -aG sudo sarah && usermod -aG sudo max"}, "description": "Allow 'sarah' user to modify files owned by 'max' user, and vice versa", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "su sarah -c \"echo 'test' >> /home/max/testfile\" && su max -c \"echo 'test' >> /home/sarah/testfile\" && cat /home/max/testfile /home/sarah/testfile | if [ \"$(cat -)\" = \"test\"$'\\n'\"test\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "setfacl -m u:sarah:rwx /home/max && setfacl -m u:max:rwx /home/sarah"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user -m user && cd /home/user && mkdir work && cd work && mkdir project && cd project && touch file1.txt && touch file2.txt && touch file3.txt && chmod 700 /home/user/work/project &&chmod 600 /home/user/work/project/* && chown user:user -R /home/user/work/project"}, "description": "A user named \"user\" has a directory called \"project\" inside a directory called \"work.\" The user has three files inside the project directory and the directory has 700 permission while all files have 600 permission. The user wants to change the names of all files in the project directory using a single command. Help the user to do so.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls /home/user/work/project | grep -q file1.txt && ls /home/user/work/project | grep -q file2.txt && ls /home/user/work/project | grep -q file3.txt && ls /home/user/work/project | wc -l | grep -q 3) && (ls /home/user/work/project | grep -q newfile1.txt && ls /home/user/work/project | grep -q newfile2.txt && ls /home/user/work/project | grep -q newfile3.txt && ls /home/user/work/project | wc -l | grep -q 3) && (ls /home/user/work/project | grep -v file1.txt | grep -v file2.txt | grep -v file3.txt | wc -l | grep -q 0)"}, "example": {"type": "command", "data": "cd /home/user/work/project && for file in file*; do mv $file new${file#file}; done"}}, "labels": ["permission", "command"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/tom -m tom && useradd -s /bin/bash -d /home/jessica -m jessica && groupadd superusers && usermod -a -G superusers jessica && cd /home/tom && mkdir letters && cd letters && touch letter1 && touch letter2 && chown tom:superusers letter2 && chmod 2770 . && chmod 660 *"}, "description": "Give jessica full access to the letters directory, including read, write and execute permissions, while maintaining tom's permissions as they are. Note: jessica should not have superuser permissions.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u jessica ls /home/tom/letters && sudo -u jessica touch /home/tom/letters/letter3 && sudo -u jessica rm /home/tom/letters/letter1 && ([ $(stat -c \"%a\" /home/tom/letters/letter2) = \"660\" ] && [ $(stat -c \"%A\" /home/tom/letters/letter2) = \"-rw-rw----+\" ]))/bin/true"}, "example": {"type": "command", "data": "chgrp superusers /home/tom/letters && chmod 2774 /home/tom/letters && chmod g+rwx /home/tom/letters"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && echo 'hello world!' > test && chmod 400 test && chown john test && su - john"}, "description": "Print the content of ~/test file", "evaluation": {"type": "ground-truth", "answer": "hello world!", "checking": null, "example": {"type": "command", "data": "cat ~/test"}}, "labels": ["permission", "file"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && touch file1 && touch file2 && chmod 400 file1 && chmod 440 file2"}, "description": "Explain the differences between the permissions on file1 and file2 and how they affect users and groups.", "evaluation": {"type": "theory", "answer": "The permissions on file1 are 400, which means the owner (john) has read permission but no write or execute permission. No one else has any permission. The permissions on file2 are 440, which means the owner (john) has read and write permission, but no execute permission. Group members also have read permission but no write or execute permission. No one outside the owner or group has any permission. This means that john can read and modify both files, but other users can only read file2. Group members can also read file2. The execute permission is not relevant as these are not executable files.", "checking": null, "example": null}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jim -m jim && useradd -s /bin/bash -d /home/tom -m tom && cd /home && sudo -u jim mkdir testdir && cd testdir && sudo -u jim touch testfile && echo 'test' | sudo tee testfile && sudo chown tom:tom testfile"}, "description": "Give Tom read, write, and execute permissions on the testfile; give Jim only read and write permissions to the testfile", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/testdir/testfile | grep -q -- '-rw-rw-r--' && sudo -u tom cat /home/testdir/testfile | grep -q -- 'test' && sudo -u jim cat /home/testdir/testfile | grep -q -- 'test' && ! sudo -u jim echo 'hello' >> /home/testdir/testfile && sudo -u tom echo 'hello' >> /home/testdir/testfile && sudo -u jim echo 'goodbye' >> /home/testdir/testfile && ! sudo -u tom echo 'goodbye' >> /home/testdir/testfile && sudo -u tom rm /home/testdir/testfile"}, "example": {"type": "command", "data": "sudo chmod 664 /home/testdir/testfile && sudo chown jim:testdir /home/testdir/testfile"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -m -G sudo johndoe"}, "description": "Add user johndoe to the sudo group.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -l -U johndoe | grep -q '(ALL : ALL)'"}, "example": {"type": "command", "data": "usermod -aG sudo johndoe"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/jane -m jane && groupadd executives && usermod -a -G executives john && usermod -a -G executives jane && cd / && touch confidential.txt && echo 'executives can read and write, john can only read and jane has no permissions' > /confidential.txt && chmod 260 /confidential.txt && chown john /confidential.txt && chgrp executives /confidential.txt"}, "description": "Set permissions such that only users in the executives group can both read and write to the /confidential.txt file, john can only read, and jane has no permissions at all.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john cat /confidential.txt && sudo -u jane cat /confidential.txt && sudo -u john echo 'test' > /confidential.txt && sudo -u jane echo 'test' > /confidential.txt && sudo -u john cat /confidential.txt && sudo -u jane cat /confidential.txt) | if [ \"$(cat -)\" = \"executives can read and write, john can only read and jane has no permissions\"$'\\n'$'\\n'\"executives can read and write, john can only read and jane has no permissions\"$'\\n'$'\\n'$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 260 /confidential.txt && chown john /confidential.txt && chgrp executives /confidential.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && cd /home/lisa && mkdir files && touch files/file1 && touch files/file2 && chmod 740 files && chown lisa:root files && su - lisa"}, "description": "As lisa, allow others in the group to read and execute files directory, but not modify it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home | grep files | grep 'r-x' | grep -v 'w'"}, "example": {"type": "command", "data": "chmod 754 /home/lisa/files"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "cd ~ && mkdir school && cd school && mkdir math && mkdir science && mkdir english && touch math/grade.txt && touch science/grade.txt && touch english/grade.txt && chmod 660 */grade.txt && useradd -s /bin/bash -d /home/student -m student"}, "description": "There are three directories in ~/school: math, science, and english. Each directory has a file called grade.txt, which contains a student's grade. The directories should be readable, writable, and executable by the user who owns them, but not by any other user. The files should be readable and writable by their owners and by the group \"students\", but not by any other user. The group should have no other permissions. Create a user called \"student\" and add them to the group. As the student, list the contents of all three directories.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l ~/school | awk '{if ($1~/^d..-..-..--$/) { print $NF; }}' | xargs -I %% find ~/school/%% -type d ! -perm 700 -ls || ls -lR ~/school | awk '{if (!/^d/) { print $NF; }}' | grep 'grade.txt$' | xargs -I %% sh -c 'if [ \"$(stat --format=%a \"%%\")\" != \"660\" ]; then echo \"false\"; exit 1; fi;') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 700 ~/school/{math,science,english} && chmod g+s ~/school/{math,science,english} && chown student:students ~/school/{math,science,english} && chmod 660 ~/school/*/*.txt && usermod -aG students student && su - student && ls -l ~/school/*/*.txt"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/grant -m grant && cd /home/grant && mkdir public && cd public && touch file1 && touch file2 && touch file3 && chmod 645 file1 && chmod 600 file2 && chmod 640 file3"}, "description": "Grant would like all files in his public directory to be read-only for group and other, with the exception of file2, which he would like to be read, write and executable by other users. Change permissions to meet Grant's requirements", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/grant/public -type f ! -perm 644 -ls && find /home/grant/public/file2 ! -perm 777 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 644 /home/grant/public/* && chmod 777 /home/grant/public/file2"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/sarah -m sarah && useradd -s /bin/bash -d /home/kevin -m kevin && echo \"secret\" > /home/sarah/myfile && chmod 600 /home/sarah/myfile && chown sarah:sarah /home/sarah/myfile"}, "description": "Set permissions for /home/sarah/myfile so that both sarah and kevin can read the file, but kevin cannot modify or delete the file. Also, kevin should not be able to list the contents of the /home/sarah directory.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo su - kevin -c \"cat /home/sarah/myfile\" > /dev/null 2>&1 && sudo su - kevin -c \"echo 'hello' > /home/sarah/myfile\" > /dev/null 2>&1 && [ $(sudo su - kevin -c \"ls -l /home/ | grep sarah | wc -l\") -eq 0 ]) || echo fail"}, "example": {"type": "command", "data": "chmod 644 /home/sarah/myfile && chattr +i /home/sarah/myfile && chattr +i /home/sarah"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir bank && cd bank && mkdir accounts && touch accounts/johnson && cd .. && chown -R john:john bank && chmod 750 bank && chmod 770 bank/accounts && chmod 400 bank/accounts/johnson && su - john"}, "description": "John has a bank directory which has an accounts directory and a johnson file. Set the correct permissions so that John can access all files and directories, while no other users besides John can access the bank or accounts directories.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find /home/john/bank -type d ! -perm 750 -ls && find /home/john/bank/accounts -type d ! -perm 770 -ls && find /home/john/bank/accounts/johnson -type f ! -perm 400 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 750 /home/john/bank && chmod 770 /home/john/bank/accounts && chmod 400 /home/john/bank/accounts/johnson"}}, "labels": ["permission", "directory", "file"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && useradd -s /bin/bash -d /home/andy -m andy && echo 'andy ALL=(mike) NOPASSWD:ALL' >> /etc/sudoers && cd /home/andy"}, "description": "andy wants to run a command as mike without typing in the password. How can he do that?", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u mike whoami | if [ \"$(cat -)\" = \"mike\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo -u mike <command> #(substitute <command> with the desired command)"}}, "labels": ["permission", "sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/kim -m kim && echo 'customer ALL=(ALL) /usr/bin/find' >> /etc/sudoers && mkdir /data && cd /data && touch file1.txt && touch file2.txt && chown root:root file1.txt && chown customer:customer file2.txt && chmod 640 file1.txt && chmod 440 file2.txt"}, "description": "Add user kim to the group 'customer'. kim should be able to perform a find only in /data and list any content but only for file2.txt, he should only be able to read the file content..", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "echo \"test\" | sudo -u kim sh -c 'find /data -name file2.txt -print0 | xargs -0 cat && { sudo -n -v && sleep 1 && sudo -n true; } >&2'"}, "example": {"type": "command", "data": "echo 'kim ALL=(ALL) find /data' >> /etc/sudoers"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/jack -m jack && mkdir /home/shared && touch /home/shared/log.txt && chown -R jack:jack /home/shared && chmod -R 2770 /home/shared && chmod o-r /home/shared/log.txt && passwd jack && passwd bob && passwd jane"}, "description": "Create a shared directory (/home/shared) that can be accessed by users jack, bob and jane. Only jack should be able to modify the contents of the directory and files within it. No one should be able to list the contents of /home/shared except the owner and group members. The file /home/shared/log.txt should be writable by jack and readable by bob and jane", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u jane ls /home/shared | if [ \"$(cat -)\" = \"ls: cannot open directory '/home/shared': Permission denied\"$'\\n' ]; then exit 0; else exit 1; fi && sudo -u bob ls /home/shared | if [ \"$(cat -)\" = \"ls: cannot open directory '/home/shared': Permission denied\"$'\\n' ]; then exit 0; else exit 1; fi && sudo -u jack touch /home/shared/jack_modification.txt && sudo -u bob touch /home/shared/bob_modification.txt && sudo -u jane touch /home/shared/jane_modification.txt && ls -l /home/shared | awk '{if ((substr($1, 3, 1)~/x/) || ($1~/^d/)) { exit 1; } else { exit 0; }}' && cat /home/shared/log.txt | if [ \"$(cat -)\" = \"Log file\"$'\\n' ]; then exit 0; else exit 1; fi && sudo -u jack echo \"Modification by Jack\" >> /home/shared/log.txt && sudo -u bob cat /home/shared/log.txt | if [ \"$(cat -)\" = \"Log file\\nModification by Jack\"$'\\n' ]; then exit 0; else exit 1; fi && sudo -u jane cat /home/shared/log.txt | if [ \"$(cat -)\" = \"Log file\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo -u jack touch /home/shared/new_file.txt && chmod g+w /home/shared/log.txt && chmod o+r /home/shared/log.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m frank && echo 'secretpassword' | passwd --stdin frank"}, "description": "Create a group called \"confidential\" and a file called \"important_doc.txt\" with 640 permissions. Only the owner and group should be able to read and write this file. Add frank to the \"confidential\" group and test that he is not able to read the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l important_doc.txt | grep '^-rw-r-----.' | awk '{print $1, $3, $4}') && (id frank | grep -q 'confidential') && sudo -u frank bash -c '[ -r important_doc.txt ] && echo \"Frank can read the file!\" || echo \"Frank cannot read the file!\"'"}, "example": {"type": "command", "data": "(umask 027 && touch important_doc.txt && chmod 640 important_doc.txt && chown root:confidential important_doc.txt) && usermod -a -G confidential frank"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/test -m test && cd /home/test && touch file1 && touch file2"}, "description": "Give execute permission for file1 to user, group and others and remove all permissions for file2 for user, group and others.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/test/file1 |awk '{print $1}' | grep '...x...x...x') && (ls -l /home/test/file2 |awk '{print $1}' | grep '^-' | grep '..............$' )"}, "example": {"type": "command", "data": "chmod a+x /home/test/file1 && chmod a-rwx /home/test/file2"}}, "labels": ["permission", "chmod"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/susan -m susan && cd /home/susan && mkdir work && cd work && touch file1 && touch file2 && touch file3 && chmod 740 file1 && chmod 640 file2 && chmod 770 file3 && chown susan file1 && chown susan:users file2 && chown :users file3"}, "description": "List all the files in /home/susan/work along with their permissions and ownerships. Explain the meaning of the numbers in the permission bits and the significance of the owner, group, and other fields.", "evaluation": {"type": "written", "answer": "file1: rwxr----- susan susan\nfile2: rw-r----- susan users\nfile3: rwxrwx--- susan users\n\nIn the permission bits:\n- The first character indicates the type of file (d for directory, - for regular file)\n- The next 3 characters (rwx) describe the read, write, and execute permissions for the owner of the file\n- The following 3 characters (r--) describe the read, write, and execute permissions for the group associated with the file\n- The last  3 characters (---) describe the read, write, and execute permissions for others (everyone else)\n\nIn the ownership fields:\n- The first field indicates the owner user of the file\n- The second field indicates the owner group of the file", "checking": null, "example": null}, "labels": ["permission", "ownership"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mike -m mike && cd /home/mike && touch file1 && touch file2 && chgrp mike file1 && chgrp users file2 && chmod g+w file1 && chmod g-w file2 &&su - mike"}, "description": "Which group has write access to file1 and which group does not have write access to file2? Fix permissions for file2 so that the group that had write access to file1 also has write access to file2.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l file1 | awk '{if ($1~/^......w./ && $4~/^mike/){ exit 0;} else {exit 1;}}') && (ls -l file2 | awk '{if($1~/^......w./ && $4~/^mike/){ exit 1;} else {exit 0;}}') && (chgrp mike file2 && chmod g+w file2) && (ls -l file2 | awk '{if($1~/^......w./ && $4~/^mike/){ exit 0;} else {exit 1;}}')"}, "example": {"type": "command", "data": "chmod g+w file2 && chgrp mike file2"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/user -m user && cd /home/user && touch important.txt && chmod 0400 important.txt && chattr +i important.txt"}, "description": "How to make a file unchangeable by non-root users, even if they have write permissions to the parent directory.", "evaluation": {"type": "knowledge-based", "question": "What command is used to make a file unchangeable by non-root users, even if they have write permissions to the parent directory?", "answer": "chattr +i filename", "options": ["chmod +i filename", "chattr +r filename", "chattr -i filename", "chmod +r filename"]}, "labels": ["permission", "file attributes"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/greg -m greg && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/mike -m mike && usermod -a -G john greg && usermod -a -G mike john && usermod -a -G greg mike && cd /home/john && mkdir dir1 && cd dir1 && touch file1 && touch file2 && echo '1234' > file2 && cd .. && mkdir dir2 && cd dir2 && touch file3 && touch file4 && echo '5678' > file4 && chown -R john:greg . && chmod -R 775 . && su - mike"}, "description": "mike have to delete file1, but he can't because he is not a member of the group. Fix it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/john/dir1/file1 | grep -o '^-rwxrwxr-x' || echo 'Not exist.'"}, "example": {"type": "command", "data": "usermod -a -G greg mike && chmod g+w /home/john/dir1 && chmod g+w /home/john/dir1/file1"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/linda -m linda && useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/mike -m mike && mkdir /home/shared && chgrp shared /home/shared && chmod 2770 /home/shared"}, "description": "All users (linda, john, mike) need read/write permission to /home/shared and only their members can access and modify files in this directory", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -al /home/shared | awk '{if ($1~/^d......w./) { exit 0; } else { exit 1; }}' && (runuser -l linda -c 'touch /home/shared/lindafile'; echo $?; runuser -l john -c 'touch /home/shared/johnfile'; echo $?; runuser -l mike -c 'touch /home/shared/mikefile'; echo $?) | if [ $(grep -o 0 | wc -l) -eq 3 ]; then exit 0; else exit 1; fi) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "addgroup shared && usermod -a -G shared linda && usermod -a -G shared john && usermod -a -G shared mike && chmod 2770 /home/shared"}}, "labels": ["permission", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/joe -m joe && useradd -s /bin/bash -d /home/sam -m sam && echo 'joe:sales' | chpasswd && echo 'sam:engineering' | chpasswd && cd /home && sudo chown -R joe:sales joe && sudo chown -R sam:engineering sam"}, "description": "There are two users joe and sam. joe belongs to sales group and sam belongs to engineering group. The /home/joe directory should be owned by the sales group and have the permission 750, where jow only is the owner of the directory. The /home/sam directory should have the permission 640 and the ownership should belong to the engineering group. Check the properties of the directories to verify them.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/joe /home/sam | awk '{if ($3 ~ /^joe$|^sam$/ && $4 ~ /^sales$|^engineering$/) { exit 0; } else { exit 1; }}' && ls -ld /home/joe /home/sam | awk '{if ($1 ~ /^drwxr-x---$/) { exit 0; } else if ($1 ~ /^drw-------$/) { 'if (system (\"ls -ld /home/joe | awk '{if ($4 == \\\"sales\\\") { exit 0; } else { exit 1; }}'\") == 0) {exit 0;} else {exit 1;}} else if ($1 ~ /^drw--r-----$/) {'if (system(\"ls -ld /home/sam | awk '{if ($4 == \\\"engineering\\\") { exit 0; } else { exit 1; }}'\") == 0) {exit 0;} else {exit 1;}} else {exit 1;}}'"}, "example": {"type": "command", "data": "chmod 750 /home/joe && chmod -R u+w /home/joe && chown -R joe:sales /home/joe && chmod 640 /home/sam && chown -R :engineering /home/sam"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m -s /bin/bash jerry && useradd -m -s /bin/bash tom && su - jerry -c 'cd && mkdir linux && cd linux && echo \"You're doing great!\" >> greeting.txt'"}, "description": "Jerry has created a directory `~/linux` with a file `greeting.txt` inside, that contains the message \"You're doing great!\". Tom needs to read the file but he doesn't have permission. Grant Tom read permission to the file while ensuring that Jerry's write permission is preserved.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - tom -c 'cd && cat ~/linux/greeting.txt') | if [ \"$(cat -)\" = \"You're doing great!\"$'\\n' ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod o+r ~/linux/greeting.txt"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && echo 'Hello World!' >> /home/john/file1 && echo '123456' >> /home/john/file2 && chmod 444 /home/john/file1 && chmod 661 /home/john/file2 && chown john:john /home/john/file1 && chown john:john /home/john/file2"}, "description": "Set permissions for /home/john/file1 to only allow read and execute permissions for the user and group, but no permissions for others; and for /home/john/file2 to only allow read and write permissions for the owner, read and execute permissions for the group, and no permissions for others.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/john/file1 | awk '{if($1 == \"-r-xr-x---\") {exit 0;} else {exit 1;}}') && (ls -l /home/john/file2 | awk '{if($1 == \"-rw-r-x---\") {exit 0;} else {exit 1;}}')"}, "example": {"type": "command", "data": "chmod 550 /home/john/file1 && chmod 760 /home/john/file2"}}, "labels": ["permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /var/logs && touch /var/logs/main.log && chmod o-r /var/logs/main.log"}, "description": "You want to allow the user 'webserver' to write to /var/logs/main.log, but only allow the group 'logaccess' to read from it. The user 'webserver' is not a member of the 'logaccess' group. Set the appropriate file permissions to allow this access.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /var/logs/main.log | awk '{if ($1!~/^-..rw-r--/) { exit 1; } else { exit 0; }}'"}, "example": {"type": "command", "data": "chgrp logaccess /var/logs/main.log && chmod g+r /var/logs/main.log && chmod u+w /var/logs/main.log"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir folder && touch file.txt && chmod 750 folder && chmod 640 file.txt && chown john:john file.txt"}, "description": "You need to enable group write permission and add bill to the group to allow him to edit file.txt and create new files in folder", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -ld /home/john/folder /home/john/file.txt | awk '{if ($1~/drwxr-x---/ && $2~/john/ && $3~/dataaccess/ && $4~/john/) {} else if ($1~/^-rw-r-----/ && $2~/john/ && $3~/john/ && $4~/John/) {} else { exit 1; }}' && find /home/john/folder -type d ! -perm 2750 -ls | wc -l | awk '{if ($0==0) { } else { exit 1; }}' && find /home/john/folder -type f ! -perm 640 -ls | wc -l | awk '{if ($0==0) { } else { exit 1; }}') | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -aG john bill && chmod g+w /home/john/folder && chmod g+w /home/john/file.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/alice -m alice && useradd -s /bin/bash -d /home/bob -m bob && usermod -aG sudo alice && usermod -aG sudo bob && echo '%sudo ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers"}, "description": "Create a new user group called \"developers\" and add Alice and Bob to it. Allow the developers group to execute the command \"apt-get update\" with sudo command without prompting for password.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u alice sudo apt-get update >/dev/null && sudo -u bob sudo apt-get update >/dev/null && sudo -u alice sudo dpkg -l sudo | awk 'NR==6 {if ($2==\"sudo\") { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "groupadd developers && usermod -aG developers alice && usermod -aG developers bob && echo '%developers ALL=(ALL) NOPASSWD: /usr/bin/apt-get update' >> /etc/sudoers && chmod 750 /etc/sudoers"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "apt update && apt install vsftpd -y && useradd -s /bin/false -d /srv/ftp ftpuser && echo 'ftpuser:password' | chpasswd && mkdir /srv/ftp/files && chown ftpuser /srv/ftp/files && echo 'welcome to my FTP server' > /srv/ftp/welcome.msg && chmod 555 /srv/ftp && su - ftpuser"}, "description": "Access the FTP server (IP address is the same as this machine) and download a file named secret.txt. The password for the FTP server is \"password\"", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(echo 'open localhost\nuser ftpuser password\nget secret.txt\n' ; sleep 5)| telnet localhost 21 | tail -1 | grep 226 && cat secret.txt | grep 'this is the secret' && rm secret.txt"}, "example": {"type": "command", "data": ""}}, "labels": ["FTP", "permission"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m john && cd /home/john && touch file1 file2 file3"}, "description": "Give read-only permission to file1, read-write permission to file2, and no permission to file3 to the owner (john).", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/john/file1 && ls -l /home/john/file2 && ls -l /home/john/file3) | awk '{if (($1 == \"-rw-r--r--\" && $3==\"john\" && $4==\"john\" && $NF==\"file1\") || ($1 == \"-rw-------\" && $3==\"john\" && $4==\"john\" && $NF==\"file2\") || ($1 == \"----------\" && $3==\"john\" && $4==\"john\" && $NF==\"file3\")) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 404 /home/john/file1 && chmod 600 /home/john/file2 && chmod 000 /home/john/file3"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jane -m jane && cd /home/jane && mkdir dir1 && echo 'Hello World' > dir1/file1 && chmod u-r dir1/file1 && chown jane:jane dir1/file1 && su - jane"}, "description": "Add read permission for user 'jane' on file1 in directory 'dir1'.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u jane cat /home/jane/dir1/file1 "}, "example": {"type": "command", "data": "sudo chmod u+r /home/jane/dir1/file1"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && touch /home/john/secret && chmod 600 /home/john/secret && useradd -s /bin/bash -d /home/anna -m anna && usermod -aG john anna && su - anna"}, "description": "Anna desperately needs the content of John's secret file, but she doesn't want him to know. Please show her how to read the secret file using the Linux command line without revealing her actions to John.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(cat /home/john/secret && echo 'I love Linux!') | if [ \"$(sudo -u john cat /home/john/secret)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "sudo -u john cat /home/john/secret"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/kate -m kate && mkdir /shared && chmod 777 /shared && touch /shared/file.txt && chown kate:kate /shared/file.txt"}, "description": "Kate wants to share a file in the /shared directory with her group (also named kate), but does not want to give other users access. Set the correct file/folder permissions to fulfill her request and make sure only kate group members can access /shared/file.txt.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /shared/file.txt | awk '{print $1}') | grep -q '^-rwxrwx---' && find /shared -perm 777 -type d | grep -q '/shared'"}, "example": {"type": "command", "data": "chmod 770 /shared && chmod 660 /shared/file.txt && chgrp kate /shared/file.txt"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd guest && mkdir /data && chown root:guest /data && chmod 2770 /data"}, "description": "Create a directory called /data that is owned by root, but that the group 'guest' has full access to", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "find /data ! -user root -o ! -group guest | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chown root:guest /data && chmod 2770 /data"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/jim -m jim && cd /home/jim && mkdir testdir && touch testfile && chmod 777 testdir && chmod 444 testfile"}, "description": "What's the numeric mode of the file 'testfile' in the home directory of user 'jim' and what does it signify?", "evaluation": {"type": "ground-truth", "answer": "444 signifies that the file is readable only by the owner, group, and others", "checking": null, "example": {"type": "command", "data": "stat -c %a /home/jim/testfile"}}, "labels": ["permission", "user"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -m alice && useradd -m bob && useradd -m charlie && groupadd group"}, "description": "Assign alice and bob to group 'group' but exclude charlie. Set the permissions of all files in /home/ so that only alice, bob or root can read or write them and nobody else can", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/ | awk '{if ($1~/^-rwxrw-/ && $3!~/^(alice|bob|root)$/ && $4!~/^group$/ ) { exit 1; } else { exit 0; } }'"}, "example": {"type": "command", "data": "usermod -a -G group alice && usermod -a -G group bob && chmod -R 660 /home/ && chown -R root:group /home/"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "touch /home/testuser/testfile && chmod 400 /home/testuser/testfile && chown root:root /home/testuser/testfile"}, "description": "Add read permission for an user named 'dev' to /home/testuser/testfile, without affecting other users' access to the same file", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u dev test -r /home/testuser/testfile && sudo -u anotheruser test ! -r /home/testuser/testfile && sudo -u thirduser test ! -w /home/testuser/testfile && sudo -u fourthuser test ! -x /home/testuser/testfile && sudo -u fifthuser test ! -d /home/testuser/testfile && sudo -u sixthuser test ! -f /home/testuser/testfile && sudo -u seventhuser test ! -s /home/testuser/testfile && sudo -u eighthuser test ! -L /home/testuser/testfile; if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi;"}, "example": {"type": "command", "data": "chmod u+r /home/testuser/testfile && chmod g+r /home/testuser/testfile && chmod o-r /home/testuser/testfile && usermod -a -G root dev"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/bob -m bob && useradd -s /bin/bash -d /home/tom -m tom && echo 'export PASSWORD=opensesame' >> /home/john/.bashrc && echo 'export PASSWORD=opensesame' >> /home/bob/.bashrc && echo 'export PASSWORD=opensesame' >> /home/tom/.bashrc"}, "description": "Set the file owner and group owner for /home/john to john:john, for /home/bob to bob:bob, and for /home/tom to tom:bob", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -ld /home/john /home/bob /home/tom | awk '{if ($3\" \"$4!~/^john john$|^bob bob$|^tom bob$/) { exit 1; }} END {if (NR==3 && NR==FNR) {exit 0;} else {exit 1;}}'"}, "example": {"type": "command", "data": "chown john:john /home/john && chown bob:bob /home/bob && chown tom:bob /home/tom"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/bob -m bob && cd /home/bob && mkdir documents && cd documents && touch secret && chmod 400 secret"}, "description": "Bob has a file called 'secret' inside a directory called 'documents'. Give Alice read access to the 'secret' file without giving her any other access to the 'documents' folder or any other files inside it.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u alice cat /home/bob/documents/secret | grep -q 'this is a secret' && sudo ls -l /home/bob/documents | awk '{if ($1~/^drwx------./) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "sudo usermod -a -G bob alice && chmod g+r /home/bob/documents/secret"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mark -m mark && useradd -s /bin/bash -d /home/lisa -m lisa && useradd -s /bin/bash -d /home/emma -m emma && cd /home && mkdir data && echo 'confidential data' > /home/data/confidential.txt && chmod 640 /home/data/confidential.txt && chown mark:mark /home/data/confidential.txt && chmod g+s /home/data"}, "description": "Mark needs access to the confidential.txt file. Lisa and Emma will work with Mark on this project: they need access to the data/ directory but not the confidential.txt file. Ensure that they have the required access levels.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "ls -l /home/data | grep lisa | awk '{if ($1~/^d.....r-x/) { exit 0; } else { exit 1; } }' && ls -l /home/data | grep emma | awk '{if ($1~/^d.....r-x/) { exit 0; } else { exit 1; } }' && ls -l /home/data | grep confidential.txt | awk '{if ($1~/^-rw-r----|^-r--------/) { exit 0; } else { exit 1; }}'"}, "example": {"type": "command", "data": "usermod -aG mark lisa && usermod -aG mark emma"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/lisa -m lisa && cd /home/lisa && mkdir -p documents/confidential documents/important documents/public && touch documents/confidential/file1 documents/important/file2 documents/public/file3 && chmod 440 documents/confidential/file1 && chmod 660 documents/important/file2 && chmod 644 documents/public/file3 && chown lisa:users -R documents && su - lisa"}, "description": "You are lisa, and you have created 3 directories and 3 files. Set the permissions so that all files in the 'confidential' directory are not executable by anyone, readable by lisa and writable only by lisa; all files in the 'important' directory are not executable by anyone, readable and writable only by lisa; all files in the 'public' directory are readable and writable by anyone, but executable only by lisa.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(find ~/documents/confidential -type f ! -perm 440 -ls && find ~/documents/important -type f ! -perm 660 -ls && find ~/documents/public -type f ! -perm /111 -o -perm /002 -ls) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 440 ~/documents/confidential/* && chmod 660 ~/documents/important/* && chmod 644 ~/documents/public/* && find ~/documents -type f ! -execdir test -x {} \\; -exec chmod +x {} +"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && useradd -s /bin/bash -d /home/mark -m mark && useradd -s /bin/bash -d /home/sam -m sam && echo 'secret' > /home/john/secret_file && echo 'secret' > /home/mark/secret_file && echo 'secret' > /home/sam/secret_file && chmod 600 /home/*/secret_file"}, "description": "Give the user \"john\" read access to \"mark\" and \"sam's\" secret files", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(sudo -u john cat /home/mark/secret_file && sudo -u john cat /home/sam/secret_file) | if [ \"$(cat -)\" = \"secretsecret\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "usermod -a -G mark,sam john && chmod g+r /home/mark/secret_file && chmod g+r /home/sam/secret_file"}}, "labels": ["permission", "user", "group"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/james -m james && cd /home/james && mkdir documents && cd documents && touch doc1 && touch doc2 && chmod 600 doc1 && chmod 400 doc2 && cd .. && chmod 700 documents && chown james documents && su - james"}, "description": "james created some documents and made them private, but he wants to share them with his colleague paul who belongs to the same group as james. set the permission of documents directory and its files accordingly so that paul can read the documents without editing them.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(getent group | grep -w 'james\\|paul' | awk '{printf $1}';ls -l /home/james/documents | grep -w doc | awk '{if ($1~/^-...r..--) {printf $9; printf \"\\n\";} else if ($1~/^-..r....../) {printf $9; printf \"\\n\";} }') | if [ \"$(cat -)\" = \"paul\ndoc1\ndoc2\n\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chmod 750 /home/james/documents && chown :paul /home/james/documents && chmod 640 /home/james/documents/*"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/emma -m emma && useradd -s /bin/bash -d /home/mia -m mia && cd /home && mkdir shared_folder && touch shared_folder/shared_file && chmod u=rw,g=r,o-rw shared_folder/shared_file && chown mia shared_folder/shared_file && chgrp emma shared_folder/shared_file && echo 'Hello from Emma!' | tee shared_folder/shared_file && echo 'Hello from Mia!' | tee -a shared_folder/shared_file"}, "description": "Create a directory called `shared_folder` in `/home`. Inside this directory, create a file called `shared_file`. Make this file readable and writeable by the owner and the group, and not accessible for others. Change the owner of `shared_file` to `mia` and change the group of the file to `emma`. Without changing ownership or group of the file, write 'Hello from Emma!' on the first line of `shared_file` and 'Hello from Mia!' on the second line of `shared_file`", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo cat /home/shared_folder/shared_file | awk '{if (NR==1&&$0~/Hello from Emma!/) condition=1; if (NR==2&&$0~/Hello from Mia!/) condition+=2;} END {if (condition==3) exit 0; else exit 1;}'"}, "example": {"type": "command", "data": "echo 'Hello from Emma!' | tee /home/shared_folder/shared_file && echo 'Hello from Mia!' | tee -a /home/shared_folder/shared_file"}}, "labels": ["permission"], "difficulty": 1},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/mary -m mary && useradd -s /bin/bash -d /home/lucas -m lucas && useradd -s /bin/bash -d /home/evan -m evan && cd ~ && mkdir safe && cd safe && touch sensitive.txt && echo 'top secret info' > sensitive.txt && chown mary sensitive.txt && chgrp lucas sensitive.txt && chmod 460 sensitive.txt"}, "description": "Give Lucas and Evan read permission for sensitive.txt without changing other properties of the file.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "'$(sudo -l -U lucas 2>/dev/null)' | if grep -q 'sensitive.txt'; then eval 'sudo -u lucas cat ~/safe/sensitive.txt' | if grep -q 'top secret info'; then eval 'sudo -u evan cat ~/safe/sensitive.txt' | if grep -q 'top secret info'; then exit 0; fi; fi; fi; exit 1"}, "example": {"type": "command", "data": "chmod u+r,g+r sensitive.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "mkdir /home/john && touch /home/john/log.txt && touch /home/john/data.txt && chmod -R 770 /home/john && chown john:john /home/john -R"}, "description": "Create a user account named john and allow him to read and write log.txt but not data.txt", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su john -c 'echo write_text >> /home/john/log.txt' && grep 'write_text' /home/john/log.txt && su john -c 'cat /home/john/data.txt' 2> /dev/null && echo error) | awk '{if ($1~/write_text$/ && $2~/write_text$/ && $3!~/error/) { exit 0; } else { exit 1; } }'"}, "example": {"type": "command", "data": "chmod 640 /home/john/data.txt && chmod 660 /home/john/log.txt && chown john:john /home/john/data.txt && chown john:john /home/john/log.txt"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/beth -m beth && useradd -s /bin/bash -d /home/kate -m kate && useradd -s /bin/bash -d /home/lily -m lily && echo 'beth:kate:lily ALL=(ALL) /bin/echo' >> /etc/sudoers && echo 'beth:kate:lily' > /var/local/users"}, "description": "Create a script using `sudo -u` command to execute `echo 'hello world'` for each user listed in `/var/local/users` file. Limit it to only allow execution of `/bin/echo` command and password input must be provided", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "sudo -u beth /bin/echo 'hello world' && sudo -u kate /bin/echo 'hello world' && sudo -u lily /bin/echo 'hello world' | if [ \"$(cat -)\" = \"hello world\"$'\\n'\"hello world\"$'\\n'\"hello world\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "touch /bin/echo && chmod u+x /bin/echo && echo './user_exec.sh' | EDITOR=\"tee /etc/cron.d/user_exec\" crontab -u root -"}}, "labels": ["sudo"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && cd /home/john && mkdir scripts && cd scripts && touch script1.sh && touch script2.sh && chmod u+x script1.sh && chmod g+x script2.sh && chown john script1.sh && chgrp john script2.sh && chmod o-rwx script1.sh && chmod o-r script2.sh && cd /home && useradd -s /bin/bash -d /home/anna -m anna"}, "description": "John wants to share his script files only with Anna. Make sure that Anna is the only user who has read and execute permissions for both the scripts while John has full permissions and no one else should have any access to both the scripts.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(su - john -c 'cat /home/john/scripts/script1.sh'; su - anna -c 'cat /home/john/scripts/script1.sh') | if [ \"$(cat -)\" = \"This is script1.\"$'\\n'\"This is script1.\" ]; then exit 0; else exit 1; fi && (su - john -c 'cat /home/john/scripts/script2.sh'; su - anna -c 'cat /home/john/scripts/script2.sh') | if [ \"$(cat -)\" = \"This is script2.\"$'\\n'\"This is script2.\" ]; then exit 0; else exit 1; fi && (find /home/john/scripts -not -user john -or -not -group john -or ! -perm u=rx,g=x,o= /home/john/scripts) | if [ \"$(cat -)\" = \"\" ]; then exit 0; else exit 1; fi"}, "example": {"type": "command", "data": "chown john:john /home/john/scripts/script1.sh && chown john:john /home/john/scripts/script2.sh && chmod 750 /home/john/scripts && chmod 740 /home/john/scripts/script1.sh && chmod 750 /home/john/scripts/script2.sh"}}, "labels": ["permission", "user"], "difficulty": 2},
{"create": {"type": "command", "data": ""}, "init": {"type": "command", "data": "useradd -s /bin/bash -d /home/john -m john && find /home/john -type d -exec chmod 755 {} + && find /home/john -type f -exec chmod 644 {} + && chown -R john:john /home/john && cd /home/john && touch test.txt"}, "description": "Change the owner of test.txt to mike and grant read and write permission to mike.", "evaluation": {"type": "operation-checking", "answer": null, "checking": {"type": "command", "data": "(ls -l /home/john/test.txt | grep \"^-rw-rw-r--\") && (ls -l /home/john/test.txt | grep mike:mike) && (ls -l /home/john | grep mike:mike)"}, "example": {"type": "command", "data": "chown mike:mike /home/john/test.txt && chmod 660 /home/john/test.txt"}}, "labels": ["permission", "ownership"], "difficulty": 1}
]